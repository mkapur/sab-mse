col = scales::alpha(rev(rev(subareaPal)[i]),0.8))
legend("topright",col = c(scales::alpha(rev(rev(subareaPal)[i]),0.2),
scales::alpha(rev(rev(subareaPal)[i]),0.4),
scales::alpha(rev(rev(subareaPal)[i]),0.8)),
legend = c("beg",
"mid (move)",
"end (fished)"), cex = 0.7, lty =1, lwd = 5)
axis(1, at = seq(1,nyear,5), labels = years[seq(1,nyear,5)])
}
spmat <- data.frame(subarea = c('A1',"A3","B3","B2","C2","C1"),
stock = c("R4","R3","R3","R2","R2","R1"),
mgmt = c("AI","AK", rep("BC",2), rep("CC",2)))
inames = rev(unique(spmat$subarea))
par(mfrow = c(2,3))
for(i in 1:6){
ylt = 2*max(sum(dat$N_yais_end[2,,i,][!is.na(dat$N_yais_end[2,,i,])]),
sum(dat$N_yais_end[df$yRun,,i,][!is.na(dat$N_yais_end[df$yRun,,i,])]))
plot(rowSums(dat$N_yais_beg[1:(df$yRun-1),,i,]),
type = 'l',
lwd = 2,
col = scales::alpha(rev(rev(subareaPal)[i]),0.2),
main = inames[i],
col.main = rev(rev(subareaPal)[i]),
ylim = c(0,ylt),
xlim = c(0,1959+df$yRun),xaxt='n',
xlab = "Model Year",
ylab = 'Numbers (M+F)')
lines(rowSums(dat$N_yais_mid[,,i,]),
type = 'l',
lwd = 3,
col = scales::alpha(rev(rev(subareaPal)[i]),0.4))
lines(rowSums(dat$N_yais_end[,,i,]),
type = 'l',
lwd = 3,
col = scales::alpha(rev(rev(subareaPal)[i]),0.8))
legend("topright",col = c(scales::alpha(rev(rev(subareaPal)[i]),0.2),
scales::alpha(rev(rev(subareaPal)[i]),0.4),
scales::alpha(rev(rev(subareaPal)[i]),0.8)),
legend = c("beg",
"mid (move)",
"end (fished)"), cex = 0.7, lty =1, lwd = 5)
axis(1, at = seq(1,nyear,5), labels = years[seq(1,nyear,5)])
}
dev.o
dev.off()
par(mfrow = c(2,3))
for(i in 1:6){
ylt = 2*max(sum(dat$N_yais_end[2,,i,][!is.na(dat$N_yais_end[2,,i,])]),
sum(dat$N_yais_end[df$yRun,,i,][!is.na(dat$N_yais_end[df$yRun,,i,])]))
plot(rowSums(dat$N_yais_beg[1:(df$yRun-1),,i,]),
type = 'l',
lwd = 2,
col = scales::alpha(rev(rev(subareaPal)[i]),0.2),
main = inames[i],
col.main = rev(rev(subareaPal)[i]),
ylim = c(0,ylt),
xlim = c(0,1959+df$yRun),xaxt='n',
xlab = "Model Year",
ylab = 'Numbers (M+F)')
lines(rowSums(dat$N_yais_mid[,,i,]),
type = 'l',
lwd = 3,
col = scales::alpha(rev(rev(subareaPal)[i]),0.4))
lines(rowSums(dat$N_yais_end[,,i,]),
type = 'l',
lwd = 3,
col = scales::alpha(rev(rev(subareaPal)[i]),0.8))
legend("topright",col = c(scales::alpha(rev(rev(subareaPal)[i]),0.2),
scales::alpha(rev(rev(subareaPal)[i]),0.4),
scales::alpha(rev(rev(subareaPal)[i]),0.8)),
legend = c("beg",
"mid (move)",
"end (fished)"), cex = 0.7, lty =1, lwd = 5)
axis(1, at = seq(1,1959+df$yRun,5), labels = years[seq(1,1959+df$yRun,5)])
}
par(mfrow = c(2,3))
ylt = 2*max(sum(dat$N_yais_end[2,,i,][!is.na(dat$N_yais_end[2,,i,])]),
sum(dat$N_yais_end[df$yRun,,i,][!is.na(dat$N_yais_end[df$yRun,,i,])]))
plot(rowSums(dat$N_yais_beg[1:(df$yRun-1),,i,]),
type = 'l',
lwd = 2,
col = scales::alpha(rev(rev(subareaPal)[i]),0.2),
main = inames[i],
col.main = rev(rev(subareaPal)[i]),
ylim = c(0,ylt),
xlim = c(0,1959+df$yRun),xaxt='n',
xlab = "Model Year",
ylab = 'Numbers (M+F)')
df$yRun
for(i in 1:6){
ylt = 2*max(sum(dat$N_yais_end[2,,i,][!is.na(dat$N_yais_end[2,,i,])]),
sum(dat$N_yais_end[df$yRun,,i,][!is.na(dat$N_yais_end[df$yRun,,i,])]))
plot(rowSums(dat$N_yais_beg[1:(df$yRun-1),,i,]),
type = 'l',
lwd = 2,
col = scales::alpha(rev(rev(subareaPal)[i]),0.2),
main = inames[i],
col.main = rev(rev(subareaPal)[i]),
ylim = c(0,ylt),
xlim = c(0,df$yRun-1),xaxt='n',
xlab = "Model Year",
ylab = 'Numbers (M+F)')
lines(rowSums(dat$N_yais_mid[,,i,]),
type = 'l',
lwd = 3,
col = scales::alpha(rev(rev(subareaPal)[i]),0.4))
lines(rowSums(dat$N_yais_end[,,i,]),
type = 'l',
lwd = 3,
col = scales::alpha(rev(rev(subareaPal)[i]),0.8))
legend("topright",col = c(scales::alpha(rev(rev(subareaPal)[i]),0.2),
scales::alpha(rev(rev(subareaPal)[i]),0.4),
scales::alpha(rev(rev(subareaPal)[i]),0.8)),
legend = c("beg",
"mid (move)",
"end (fished)"), cex = 0.7, lty =1, lwd = 5)
axis(1, at = seq(1,df$yRun-1,5), labels = years[seq(1,df$yRun-1,5)])
}
for(i in 1:6){
ylt = 2*max(sum(dat$N_yais_end[2,,i,][!is.na(dat$N_yais_end[2,,i,])]),
sum(dat$N_yais_end[df$yRun,,i,][!is.na(dat$N_yais_end[df$yRun,,i,])]))
plot(rowSums(dat$N_yais_beg[1:(df$yRun-1),,i,]),
type = 'l',
lwd = 2,
col = scales::alpha(rev(rev(subareaPal)[i]),0.2),
main = inames[i],
col.main = rev(rev(subareaPal)[i]),
ylim = c(0,ylt),
xlim = c(0,df$yRun),xaxt='n',
xlab = "Model Year",
ylab = 'Numbers (M+F)')
lines(rowSums(dat$N_yais_mid[,,i,]),
type = 'l',
lwd = 3,
col = scales::alpha(rev(rev(subareaPal)[i]),0.4))
lines(rowSums(dat$N_yais_end[,,i,]),
type = 'l',
lwd = 3,
col = scales::alpha(rev(rev(subareaPal)[i]),0.8))
legend("topright",col = c(scales::alpha(rev(rev(subareaPal)[i]),0.2),
scales::alpha(rev(rev(subareaPal)[i]),0.4),
scales::alpha(rev(rev(subareaPal)[i]),0.8)),
legend = c("beg",
"mid (move)",
"end (fished)"), cex = 0.7, lty =1, lwd = 5)
axis(1, at = seq(1,df$yRun,5), labels = years[seq(1,df$yRun,5)])
}
dev.off()
par(mfrow = c(2,3))
for(i in 1:6){
ylt = 2*max(sum(dat$N_yais_end[2,,i,][!is.na(dat$N_yais_end[2,,i,])]),
sum(dat$N_yais_end[df$yRun,,i,][!is.na(dat$N_yais_end[df$yRun,,i,])]))
plot(rowSums(dat$N_yais_beg[1:(df$yRun-1),,i,]),
type = 'l',
lwd = 2,
col = scales::alpha(rev(rev(subareaPal)[i]),0.2),
main = inames[i],
col.main = rev(rev(subareaPal)[i]),
ylim = c(0,ylt),
xlim = c(0,df$yRun-1),xaxt='n',
xlab = "Model Year",
ylab = 'Numbers (M+F)')
lines(rowSums(dat$N_yais_mid[,,i,]),
type = 'l',
lwd = 3,
col = scales::alpha(rev(rev(subareaPal)[i]),0.4))
lines(rowSums(dat$N_yais_end[,,i,]),
type = 'l',
lwd = 3,
col = scales::alpha(rev(rev(subareaPal)[i]),0.8))
legend("topright",col = c(scales::alpha(rev(rev(subareaPal)[i]),0.2),
scales::alpha(rev(rev(subareaPal)[i]),0.4),
scales::alpha(rev(rev(subareaPal)[i]),0.8)),
legend = c("beg",
"mid (move)",
"end (fished)"), cex = 0.7, lty =1, lwd = 5)
axis(1, at = seq(1,df$yRun,5), labels = years[seq(1,df$yRun,5)])
}
## ssb_yk ----
dat$SSB_yk %>%
data.frame() %>%
mutate('Yr' = years[1:nrow(.)]) %>%
reshape2::melt(id = c('Yr')) %>%
ggplot(., aes(x = Yr, y = value, color = variable )) +
scale_color_manual(values = demPal) +
geom_line(lwd = 2) + labs(x = 'Modeled Year',y = 'SSB', color = 'stock') +
scale_x_continuous(limits = c(1960,1960+df$yRun))
## ssb_yk ----
dat$SSB_yk %>%
data.frame() %>%
mutate('Yr' = years[1:nrow(.)]) %>%
reshape2::melt(id = c('Yr')) %>%
ggplot(., aes(x = Yr, y = value, color = variable )) +
scale_color_manual(values = demPal) +
geom_line(lwd = 2) + labs(x = 'Modeled Year',y = 'SSB', color = 'stock') +
scale_x_continuous(limits = c(1960,1959+df$yRun))
# anim_save(paste0(dumpfile,"SSB_yk_animate.gif",animation = last_animation()))
## ssb_ym with compare ----
spmat <- data.frame(subarea = c('A1',"A2","B2","B1","C2","C1"),
stock = c("R4","R3","R3","R2","R2","R1"),
mgmt = c("AK","AK", rep("BC",2), rep("CC",2)))
assSB <- read.csv(here('input','downloads','AssessmentDat_thru2018.csv'),fileEncoding="UTF-8-BOM") %>%
mutate(REG = substr(Index,1,2), assSSBMT = Value) %>% filter(Type == 'SpawnBiomass')
# anim_save(paste0(dumpfile,"SSB_yk_animate.gif",animation = last_animation()))
## ssb_ym with compare ----
spmat <- data.frame(subarea = c('A1',"A3","B3","B2","C2","C1"),
stock = c("R4","R3","R3","R2","R2","R1"),
mgmt = c("AK","AK", rep("BC",2), rep("CC",2)))
assSB <- read.csv(here('input','downloads','AssessmentDat_thru2018.csv'),fileEncoding="UTF-8-BOM") %>%
mutate(REG = substr(Index,1,2), assSSBMT = Value) %>% filter(Type == 'SpawnBiomass')
SSB_yi <- data.frame(dat$SSB_yi)
names(SSB_yi) <- spmat$subarea
SSB_ym0 <-  SSB_yi %>%
mutate('Yr' = years[1:nrow(.)]) %>%
reshape2::melt(id = c('Yr')) %>%
merge(., spmat, by.x = "variable", by.y = "subarea") %>%
group_by(Yr, mgmt) %>%
summarise(totSSBkg = sum(value),
totSSBmt = totSSBkg) %>% select(Yr, mgmt, totSSBmt)
levels(SSB_ym0$mgmt) <- c('AK','BC','CC','WC', 'AI')
SSB_ym0$mgmt[SSB_ym0$mgmt == 'AI'] <- 'AK'
SSB_ym0$mgmt[SSB_ym0$mgmt == 'CC'] <- 'WC'
SSB_ym <- SSB_ym0 %>% group_by(Yr, mgmt) %>%
summarise(omSSBMT = sum(totSSBmt))
merge(assSB, SSB_ym, by.x = c('Year','REG'), by.y = c('Yr','mgmt')) %>%
select(Year, REG, CV,assSSBMT, omSSBMT) %>%
filter(Year >1965 ) %>%
ggplot(., aes(x = Year, y = assSSBMT, color = REG)) +
geom_line(aes(y = omSSBMT),lwd = 1.1) +
geom_errorbar(aes(ymin = assSSBMT-CV*assSSBMT,ymax= assSSBMT+CV*assSSBMT, color = REG)) +
scale_color_manual(values = mgmtPal)+
geom_point()+  ggsidekick::theme_sleek() +
scale_x_continuous(limits = c(1960,1959+df$yRun)) +
labs(x = 'Modeled Year',y = 'SSB', color = 'Mgmt Region') +
facet_wrap(~REG,scales = 'free_y')
# plot FISH selex ----
## bring estimates out and rearrange
inputSel <- array(exp(obj$par[grep('fsh_slx',names(obj$par))]),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
mapped_fsh_selnames <- c('AK_FIX','AK_TWL',paste(df$fltnames_fish[3:df$nfleets_fish]))
selP <- array(exp(opt$par[grep('fsh_slx',names(opt$par))]),
dim = c(7,2,1,2))
dimnames(selP)[[1]] <- mapped_fsh_selnames
fsh_sel_afs <- array(NA, dim = c(df$nage,
length(mapped_fsh_selnames),#df$nfleets_fish
2),
dimnames = list(c(df$age),
mapped_fsh_selnames,# c(paste(df$fltnames_fish)),
c('Fem','Mal')))
for(a in 1:df$nage){
for(s in 1:2){
for(fish_flt in 1:length(mapped_fsh_selnames)){
fsh_sel_afs[,fish_flt,s] <- getSelec2(sex = s,
selP = selP,
flt_idx = fish_flt,
selType = df$selType_fish[fish_flt],
selShape = df$selShape_fish[fish_flt])
}
}
}
par(mfrow = c(4,2) )
for(flt in 1:length(mapped_fsh_selnames)){
for(s in 1:2){
tmp <- fsh_sel_afs[,flt,s]
if(s == 1) plot(tmp,
col = sexPal[1],
type = 'l',
lwd = 2,
xlab = ifelse(df$selType_fish[flt] == 0,
'Age','Length'),
ylab = 'Selectivity',
lty = 1,
ylim = c(0,1),
main = mapped_fsh_selnames[flt], xlim = c(0,75),
col.main  = c(rep(mgmtPal[1],4), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt])
box(which = 'plot', lty = 'solid',
col = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt],
lwd = 2)
axis(2, at = seq(0,1,0.2), labels = seq(0,1,0.2))
if(s == 2) lines(tmp, col = sexPal[2], type = 'l', lty = 2, lwd = 2)
}
}
if(s == 1) plot(tmp,
col = sexPal[1],
type = 'l',
yaxt = 'n',
lwd = 2,
xlab = ifelse(df$selType_fish[flt] == 0,
'Age','Length'),
ylab = 'Selectivity',
lty = 1,
ylim = c(0,1),
main = mapped_fsh_selnames[flt], xlim = c(0,75),
col.main  = c(rep(mgmtPal[1],4), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt])
dev.off()
par(mfrow = c(4,2) )
for(flt in 1:length(mapped_fsh_selnames)){
for(s in 1:2){
tmp <- fsh_sel_afs[,flt,s]
if(s == 1) plot(tmp,
col = sexPal[1],
type = 'l',
yaxt = 'n',
lwd = 2,
xlab = ifelse(df$selType_fish[flt] == 0,
'Age','Length'),
ylab = 'Selectivity',
lty = 1,
ylim = c(0,1),
main = mapped_fsh_selnames[flt], xlim = c(0,75),
col.main  = c(rep(mgmtPal[1],4), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt])
box(which = 'plot', lty = 'solid',
col = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt],
lwd = 2)
axis(2, at = seq(0,1,0.2), labels = seq(0,1,0.2))
if(s == 2) lines(tmp, col = sexPal[2], type = 'l', lty = 2, lwd = 2)
}
}
for(flt in 1:length(mapped_fsh_selnames)){
for(s in 1:2){
tmp <- fsh_sel_afs[,flt,s]
if(s == 1) plot(tmp,
col = sexPal[1],
type = 'l',
yaxt = 'n',
lwd = 2,
xlab = ifelse(df$selType_fish[flt] == 0,
'Age','Length'),
ylab = 'Selectivity',
lty = 1,
ylim = c(0,1),
main = mapped_fsh_selnames[flt], xlim = c(0,75),
col.main  = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt])
box(which = 'plot', lty = 'solid',
col = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt],
lwd = 2)
axis(2, at = seq(0,1,0.2), labels = seq(0,1,0.2))
if(s == 2) lines(tmp, col = sexPal[2], type = 'l', lty = 2, lwd = 2)
}
}
dev.off()
par(mfrow = c(4,2) )
for(flt in 1:length(mapped_fsh_selnames)){
for(s in 1:2){
tmp <- fsh_sel_afs[,flt,s]
if(s == 1) plot(tmp,
col = sexPal[1],
type = 'l',
yaxt = 'n',
lwd = 2,
xlab = ifelse(df$selType_fish[flt] == 0,
'Age','Length'),
ylab = 'Selectivity',
lty = 1,
ylim = c(0,1),
main = mapped_fsh_selnames[flt], xlim = c(0,75),
col.main  = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt])
box(which = 'plot', lty = 'solid',
col = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt],
lwd = 2)
axis(2, at = seq(0,1,0.2), labels = seq(0,1,0.2))
if(s == 2) lines(tmp, col = sexPal[2], type = 'l', lty = 2, lwd = 2)
}
}
mgmtPal
source(here("R","functions",'load_files_OM.R'))
bounds
system.time(opt <-
TMBhelper::fit_tmb(
obj,
# lower = bounds$lower,
# upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
df$yRun =  30 # df$tEnd-1 ## number of years to run model
## ~90s with full years
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(opt <-
TMBhelper::fit_tmb(
obj,
# lower = bounds$lower,
# upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
steep <- exp(opt$par[names(opt$par) == 'logh_k']); names(steep) <- paste0("h","_R",1:4);steep
logR_0 <- opt$par[names(opt$par) == 'logR_0k'];names(logR_0) <- paste0("logR_0","_R",1:4);logR_0
likes <- dat$ans_tot %>% matrix(., ncol = length(.)) %>% data.frame()
names(likes) = c("SDR","CATCH","SURVEY","SURVCOMP","CATCHCOMP","PRIORS")
likes
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(dat=dat,obj = obj, opt = opt, rep=rep, cppname =cppname,
runname = paste0("-",df$yRun,"y_",cppname,"_M=",
paste(df$parms$mort_k,collapse="-"),
"_survOFF"))
df$surv_yf_obs
df$yRun =  40 # df$tEnd-1 ## number of years to run model
## ~90s with full years
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(opt <-
TMBhelper::fit_tmb(
obj,
# lower = bounds$lower,
# upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
10931/60
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat <- obj$report(par = best)
steep <- exp(opt$par[names(opt$par) == 'logh_k']); names(steep) <- paste0("h","_R",1:4);steep
logR_0 <- opt$par[names(opt$par) == 'logR_0k'];names(logR_0) <- paste0("logR_0","_R",1:4);logR_0
likes <- dat$ans_tot %>% matrix(., ncol = length(.)) %>% data.frame()
names(likes) = c("SDR","CATCH","SURVEY","SURVCOMP","CATCHCOMP","PRIORS")
likes
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(dat=dat,obj = obj, opt = opt, rep=rep, cppname =cppname,
runname = paste0("-",df$yRun,"y_",cppname,"_M=",
paste(df$parms$mort_k,collapse="-"),
"_survON"))
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v3L",'shire_v4L')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =  40 # df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
# "logh_k"))
"mort_k")) #,
# fixFlt = c("BC_LL","BC_TRAP","BC_TWL")) )
## ~90s with full years
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
df$yRun =   df$tEnd-1 ## number of years to run model
## ~90s with full years
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c('fsh','srv'))
## 3 hrs for 40 yrs with no bounds
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c('fsh','srv')[1])
## 3 hrs for 40 yrs with no bounds
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)

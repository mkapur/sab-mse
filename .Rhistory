if(units == "metric") { # Scale biomass to kt
post_expl_biom <- post_expl_biom %>% mutate_at(c("mean", "median", "q025", "q975"), n2millions)
post_spawn_biom <- post_spawn_biom %>% mutate_at(c("mean", "median", "q025", "q975"), n2millions)
}
if(units == "imperial") { # Scale biomass to million lb
post_expl_biom <- post_expl_biom %>% mutate_at(c("mean", "median", "q025", "q975"), kg2mlb)
post_spawn_biom <- post_spawn_biom %>% mutate_at(c("mean", "median", "q025", "q975"), kg2mlb)
}
axis <- tickr(post_expl_abd, year, 5)
# Recruitment
ggplot(post_rec, aes(x = year)) +
geom_bar(aes(y = median), stat = "identity", fill = "grey") +
geom_errorbar(aes(ymin = q025, ymax = q975), width = 0.2) +
labs(x = "", y = "\n\nAge-2\nrecruits\n(millions)") +
scale_x_continuous( breaks = axis$breaks, labels = axis$labels) +
scale_y_continuous(label = scales::comma) +
expand_limits(y = 0) +
theme(axis.title.y = element_text(angle = 0)) -> p_rec
# Exploitable abundance (to fishery)
ggplot(post_expl_abd, aes(x = year)) +
geom_point(aes(y = median)) +
geom_line(aes(y = median, group = 1)) +
geom_ribbon(aes(ymin = q025 , ymax = q975),
alpha = 0.2, fill = "black", colour = NA) +
labs(x = "", y = "\n\nExploitable\nabundance\n(millions)") +
scale_x_continuous( breaks = axis$breaks, labels = axis$labels) +
scale_y_continuous(label = scales::comma) +
expand_limits(y = 0) +
theme(axis.title.y = element_text(angle = 0)) -> p_eabd
# Exploitable biomass (to fishery)
ggplot(post_expl_biom, aes(x = year)) +
geom_point(aes(y = median)) +
geom_line(aes(y = median, group = 1)) +
geom_ribbon(aes(ymin = q025 , ymax = q975),
alpha = 0.2, fill = "black", colour = NA) +
labs(x = "", y = ifelse(units == "imperial", "\n\nExploitable\nbiomass\n(million lb)",
"\n\nExploitable\nbiomass\n(kt)")) +
scale_x_continuous( breaks = axis$breaks, labels = axis$labels) +
scale_y_continuous(label = scales::comma) +
expand_limits(y = 0) +
theme(axis.title.y = element_text(angle = 0)) -> p_ebiom
# Spawning biomass
ggplot(post_spawn_biom, aes(x = year)) +
geom_point(aes(y = median)) +
geom_line(aes(y = median, group = 1)) +
geom_ribbon(aes(ymin = q025 , ymax = q975),
alpha = 0.2, fill = "black", colour = NA) +
labs(x = "", y = ifelse(units == "imperial", "\n\nSpawning\nbiomass\n(million lb)",
"\n\nSpawning\nbiomass\n(kt)")) +
scale_x_continuous( breaks = axis$breaks, labels = axis$labels) +
scale_y_continuous(label = scales::comma) +
expand_limits(y = 0) +
theme(axis.title.y = element_text(angle = 0)) -> p_sbiom
}
if(plot_variance == FALSE) {
if(units == "metric") {
ts %>%
# Add another year to hold projected values
full_join(data.frame(year = (max(ts$year) + 1):(max(ts$year) + nproj))) %>%
# For ts by numbers go divide by 1e6 to get values in millions, for biomass
# divide by 1e3 to go from kg to mt
mutate(Fmort = c(obj$report(best)$Fmort, rep(NA, nproj)),
pred_rec = c(obj$report(best)$pred_rec, rep(NA, nproj)) / 1e6,
biom = obj$report(best)$tot_biom / 1e6,
expl_biom = obj$report(best)$tot_expl_biom / 1e6,
expl_abd = obj$report(best)$tot_expl_abd / 1e6,
spawn_biom = obj$report(best)$tot_spawn_biom / 1e6) -> ts
}
if(units == "imperial") { # ends up reported as million lb
ts %>%
# Add another year to hold projected values
full_join(data.frame(year = (max(ts$year) + 1):(max(ts$year) + nproj))) %>%
# For ts by numbers go divide by 1e6 to get values in millions, for biomass
# divide report in million lb
mutate(Fmort = c(obj$report(best)$Fmort, rep(NA, nproj)),
pred_rec = c(obj$report(best)$pred_rec, rep(NA, nproj)) / 1e6,
biom = obj$report(best)$tot_biom * 2.20462 / 1e6,
expl_biom = obj$report(best)$tot_expl_biom * 2.20462 / 1e6,
expl_abd = obj$report(best)$tot_expl_abd / 1e6,
spawn_biom = obj$report(best)$tot_spawn_biom * 2.20462 / 1e6 ) -> ts
}
axis <- tickr(ts, year, 5)
p <- ggplot(ts, aes(x = year)) +
scale_x_continuous( breaks = axis$breaks, labels = axis$labels)+
scale_y_continuous(label = scales::comma) +
expand_limits(y = 0) +
theme(axis.title.y = element_text(angle=0))
# Recruitment
ggplot(ts, aes(year, pred_rec)) +
geom_bar(stat = "identity") +
scale_x_continuous( breaks = axis$breaks, labels = axis$labels) +
# theme(axis.title.y = element_text(angle=0)) +
labs(x = "", y = "\n\nAge-2\nrecruits\n(millions)") +
theme(axis.title.y = element_text(angle=0))-> p_rec
# Exploitable abundance (to fishery)
p + geom_point(aes(y = expl_abd)) +
geom_line(aes(y = expl_abd, group = 1)) +
expand_limits(y = 0) +
labs(x = "", y = "\n\nExploitable\nabundance\n(millions)") -> p_eabd
# Exploitable biomass (to fishery)
p + geom_point(aes(y = expl_biom)) +
geom_line(aes(y = expl_biom, group = 1)) +
expand_limits(y = 0) +
labs(x = "", y = ifelse(units == "imperial", "\n\nExploitable\nbiomass\n(million lb)",
"\n\nExploitable\nbiomass\n(kt)")) -> p_ebiom
# Spawning biomass
p + geom_point(aes(y = spawn_biom)) +
geom_line(aes(y = spawn_biom, group = 1)) +
expand_limits(y = 0) +
labs(x = "", y = ifelse(units == "imperial", "\n\nSpawning\nbiomass\n(million lb)",
"\n\nSpawning\nbiomass\n(kt)")) -> p_sbiom
}
plot_grid(p_rec, p_sbiom, p_eabd, p_ebiom, ncol = 1, align = 'hv',
labels = c('(A)', '(B)', '(C)', '(D)')) -> p
print(p)
mcmc_flag <- ifelse(plot_variance == TRUE, "_mcmc", "")
if(save == TRUE){
ggsave(plot = p, filename = paste0(path, "/derived_ts_", units, "_", YEAR, mcmc_flag, ".png"),
dpi = 300, height = 7, width = 6, units = "in")
}
}
# Fishing mort
plot_F <- function(save = TRUE, path = tmbfigs) {
ts %>%
# Add another year to hold projected values
full_join(data.frame(year = max(ts$year))) %>%
mutate(Fmort = c(obj$report(best)$Fmort),
expl_biom = obj$report(best)$tot_expl_biom[1:nyr] / 1e3,
exploit = obj$report(best)$pred_catch / expl_biom ) -> ts
axis <- tickr(ts, year, 5)
ggplot(ts, aes(x = year)) +
geom_point(aes(y = Fmort)) +
geom_line(aes(y = Fmort, group = 1)) +
labs(x = "", y = "Fishing mortality\n") +
scale_x_continuous( breaks = axis$breaks, labels = axis$labels) -> fmort
ggplot(ts, aes(x = year)) +
geom_point(aes(y = exploit)) +
geom_line(aes(y = exploit, group = 1)) +
labs(x = "", y = "Harvest rate\n") +
scale_x_continuous( breaks = axis$breaks, labels = axis$labels) -> hr
plot_grid(fmort, hr,  ncol = 1, align = 'hv') -> p
print(p)
if(save == TRUE){
ggsave(plot = p, filename = paste0(path, "/fishing_mort.png"),
dpi = 300, height = 7, width = 6, units = "in")
}
}
reshape_age <- function() {
pred_fsh_age <- as.data.frame(obj$report(best)$pred_fsh_age)
names(pred_fsh_age) <- as.character(rec_age:plus_group)
pred_fsh_age %>%
mutate(Source = "Fishery",
index = data$yrs_fsh_age) -> pred_fsh_age
pred_srv_age <- as.data.frame(obj$report(best)$pred_srv_age)
names(pred_srv_age) <- as.character(rec_age:plus_group)
pred_srv_age %>%
mutate(Source = "Survey",
index = data$yrs_srv_age) -> pred_srv_age
# Reshape age comp observations and predictions into long format, calculate
# residuals and prep results for plotting
age %>%
gather("age", "obs", -c("year", "index", "Source", "n", "effn")) %>%
left_join(
bind_rows(pred_fsh_age, pred_srv_age) %>%
gather("age", "pred", 1:30),
by = c("Source", "index", "age")) %>%
group_by(Source) %>%
mutate(resid = obs - pred,
# Get standardized residual (mean of 0, sd of 1)
std_resid = resid / sd(resid),
# Pearson's residual
pearson = resid / sqrt(var(pred)),
# positive or negative
`obj performance` = ifelse(std_resid >= 0, "Observed greater than estimated",
ifelse(is.na(obs), "",
"Observed less than estimated")),
Age = factor(age, levels = c("2", "3", "4", "5", "6", "7", "8",
"9", "10", "11", "12", "13", "14", "15",
"16", "17", "18", "19", "20", "21", "22",
"23", "24", "25", "26", "27", "28", "29", "30",
"31"),
labels = c("2", "3", "4", "5", "6", "7", "8",
"9", "10", "11", "12", "13", "14", "15",
"16", "17", "18", "19", "20", "21", "22",
"23", "24", "25", "26", "27", "28", "29", "30",
"31+")))  -> agecomps
return(agecomps)
}
reshape_len <- function() {
if(nsex == 1) {
pred_srv_len <- as.data.frame(obj$report(best)$pred_srv_len[,,1]) %>%
mutate(Sex = "Sexes combined")
} else {
pred_srv_len <- as.data.frame(obj$report(best)$pred_srv_len[,,1]) %>%
mutate(Sex = "Male") %>%
bind_rows(as.data.frame(obj$report(best)$pred_srv_len[,,2]) %>%
mutate(Sex = "Female"))
}
names(pred_srv_len) <- c(as.character(data$lenbin), "Sex")
pred_srv_len %>%
mutate(Source = "Survey",
index = rep(data$yrs_srv_len, nsex)) -> pred_srv_len
if(nsex == 1) {
pred_fsh_len <- as.data.frame(obj$report(best)$pred_fsh_len[,,1]) %>%
mutate(Sex = "Sexes combined")
} else {
pred_fsh_len <- as.data.frame(obj$report(best)$pred_fsh_len[,,1]) %>%
mutate(Sex = "Male") %>%
bind_rows(as.data.frame(obj$report(best)$pred_fsh_len[,,2]) %>%
mutate(Sex = "Female"))
}
names(pred_fsh_len) <- c(as.character(data$lenbin), "Sex")
pred_fsh_len %>%
mutate(Source = "Fishery",
index = rep(data$yrs_fsh_len, nsex)) -> pred_fsh_len
bind_rows(pred_srv_len, pred_fsh_len) -> pred_len
# residuals and prep results for plotting
if(nsex == 1) {
len <- len %>% filter(Sex == "Sex combined") %>% droplevels()
} else {
len <- len %>% filter(Sex != "Sex combined") %>% droplevels()
}
len %>%
#filter(Source == "srv_len") %>% # FLAG - temporary until we incorporate fishery len comps into the model
rename(obs = proportion) %>%
mutate(length_bin = as.character(length_bin),
Source = factor(Source, levels = c("srv_len", "fsh_len"),
label = c("Survey", "Fishery"))) %>%
left_join(pred_len %>% gather("length_bin", "pred", 1:data$nlenbin)) %>%
group_by(Source, Sex) %>%
mutate(resid = obs - pred,
# Get standardized residual (mean of 0, sd of 1)
std_resid = resid / sd(resid),
# Pearson's residual
pearson = resid / sqrt(var(pred)),
# positive or negative
`obj performance` = ifelse(std_resid >= 0, "Observed greater than estimated",
ifelse(is.na(obs), "",
"Observed less than estimated")),
length_bin = factor(length_bin, levels = c("41", "43", "45", "47", "49", "51", "53", "55", "57", "59", "61",
"63", "65", "67", "69", "71", "73", "75", "77", "79", "81", "83",
"85", "87", "89", "91", "93", "95", "97", "99"),
labels = c("41", "43", "45", "47", "49", "51", "53", "55", "57", "59", "61",
"63", "65", "67", "69", "71", "73", "75", "77", "79", "81", "83",
"85", "87", "89", "91", "93", "95", "97", "99+")))  -> lencomps
return(lencomps)
}
# Labels for ages
get_age_labs <- function() {
age_labs <- c("2", "", "", "", "6", "", "", "", "10", "", "", "", "14", "",
"", "", "18", "", "", "", "22", "", "", "", "26", "",
"", "", "30", "")
return(age_labs)
}
# Labels for length bins
get_len_labs <- function() {
len_labs <- c("", "", "45", "", "", "", "", "55", "", "", "",
"", "65", "", "", "", "", "75", "", "", "", "",
"85", "", "", "", "", "95", "", "")
return(len_labs)
}
# Age comp resids
plot_age_resids <- function(save = TRUE, path = tmbfigs) {
age_labs <- get_age_labs()
axis <- tickr(agecomps, year, 5)
ggplot(agecomps, aes(x = year, y = Age, size = std_resid,
fill = `obj performance`)) +
geom_point(shape = 21, colour = "black") +
scale_size(range = c(0, 3.5)) +
facet_wrap(~ Source) +
labs(x = '\nYear', y = 'Age\n', fill = NULL) +
guides(size = FALSE) +
scale_fill_manual(values = c("white", "black")) +
scale_y_discrete(breaks = unique(agecomps$Age), labels = age_labs) +
scale_x_continuous(breaks = axis$breaks, labels = axis$labels) +
theme(legend.position = "bottom",
strip.text.x = element_text(size = 11, colour = "black"),
strip.text.y = element_text(size = 11, colour = "black")) -> p
print(p)
if(save == TRUE){
ggsave(plot = p, filename = paste0(path, "/agecomps_residplot.png"), dpi = 300, height = 6, width = 7, units = "in")
}
}
# Length comp resids
plot_len_resids <- function(save = TRUE, path = tmbfigs) {
len_labs <- get_len_labs()
axis <- tickr(lencomps, year, 5)
ggplot(lencomps, aes(x = year, y = length_bin, size = std_resid,
fill = `obj performance`)) +
geom_point(shape = 21, colour = "black") +
scale_size(range = c(0, 3)) +
facet_grid(Source ~ Sex) +
labs(x = '\nYear', y = 'Length (cm)\n', fill = NULL) +
guides(size = FALSE) +
scale_fill_manual(values = c("white", "black")) +
scale_y_discrete(breaks = unique(lencomps$length_bin), labels = len_labs) +
scale_x_continuous(breaks = axis$breaks, labels = axis$labels) +
theme(legend.position = "bottom",
strip.text.x = element_text(size = 11, colour = "black"),
strip.text.y = element_text(size = 11, colour = "black")) -> p
print(p)
if(save == TRUE){
ggsave(plot = p, filename = paste0(path, "/lencomps_residplot.png"), dpi = 300, height = 6, width = 7, units = "in")
}
}
barplot_age <- function(src = "Survey", save = TRUE, path = tmbfigs) {
age_labs <- get_age_labs()
ggplot(agecomps %>% filter(Source == src )) + #& year >= 2003
geom_bar(aes(x = Age, y = obs),
stat = "identity", colour = "grey", fill = "lightgrey",
width = 0.8, position = position_dodge(width = 0.5)) +
geom_line(aes(x = Age, y = pred, group = 1), size = 0.6) +
facet_wrap(~ year, dir = "v", ncol = 5) +
scale_x_discrete(breaks = unique(agecomps$Age), labels = age_labs) +
labs(x = '\nAge', y = 'Proportion-at-age\n') +
ggtitle(paste0(src)) -> p
print(p)
if(save == TRUE){
ggsave(plot = p, filename = paste0(path, "/", src, "_agecomps_barplot.png"), dpi = 300, height = 6, width = 7, units = "in")
}
}
barplot_len <- function(src = "Survey", sex = "Female", save = TRUE, path = tmbfigs) {
len_labs <- get_len_labs()
ggplot(lencomps %>% filter(Source == src & Sex == sex)) + #, year >= 2003
geom_bar(aes(x = length_bin, y = obs),
stat = "identity", colour = "grey", fill = "lightgrey",
width = 0.8, position = position_dodge(width = 0.5)) +
geom_line(aes(x = length_bin, y = pred, group = 1), size = 0.6) +
facet_wrap(~ year, dir = "v", ncol = 5) +
scale_x_discrete(breaks = unique(lencomps$length_bin), labels = len_labs) +
labs(x = '\nLength (cm)', y = 'Proportion-at-length\n') +
ggtitle(paste0(src, " (", sex, ")")) -> p
print(p)
if(save == TRUE){
ggsave(plot = p, filename = paste0(path, "/", src, "_", sex, "_lencomps_barplot.png"), dpi = 300, height = 6, width = 7, units = "in")
}
}
plot_sel <- function() {
require(data.table)
# Extract selectivity matrices and convert to dfs and create a second index col
# as a dummy var (must supply an interval to foverlaps). Set as data.table
# object so it is searchable
if(nsex == 1) {
sel <- obj$report(best)$fsh_slx[,,1] %>% as.data.frame() %>%
mutate(Selectivity = "Fishery", Sex = "Sexes combined") %>%
bind_rows(obj$report(best)$srv_slx[,,1] %>% as.data.frame() %>%
mutate(Selectivity = "Survey", Sex = "Sexes combined"))
} else { # Sex-structured
sel <- obj$report(best)$fsh_slx[,,1] %>% as.data.frame() %>%
mutate(Selectivity = "Fishery", Sex = "Male") %>%
bind_rows(obj$report(best)$fsh_slx[,,2] %>% as.data.frame() %>%
mutate(Selectivity = "Fishery", Sex = "Female")) %>%
bind_rows(obj$report(best)$srv_slx[,,1] %>% as.data.frame() %>%
mutate(Selectivity = "Survey", Sex = "Male")) %>%
bind_rows(obj$report(best)$srv_slx[,,2] %>% as.data.frame() %>%
mutate(Selectivity = "Survey", Sex = "Female"))}
names(sel) <- c(unique(agecomps$age), "Selectivity", "Sex")
sel <- sel %>%
mutate(year = rep(ts$year[1:nyr], 2*nsex)) %>%
gather("Age", "proportion", -c(year, Selectivity, Sex)) %>%
mutate(year2 = year) # needed for foverlaps()
setDT(sel)
# Look up table for selectivity time blocks
blks_sel <- data.frame(Selectivity = c(rep("Fishery", length(data$fsh_blks)),
rep("Survey", length(data$srv_blks))),
end = c(data$fsh_blks, data$srv_blks)) %>%
left_join(ts %>%
mutate(end = index) %>%
select(year, end), by = "end") %>%
rename(end_year = year) %>%
# Define start of the interval based on the end of the interval
group_by(Selectivity) %>%
mutate(start_year = c(min(ts$year), head(end_year, -1) + 1))
setkey(setDT(blks_sel), Selectivity, start_year, end_year)
# Match each year to the start and end year in blks_sel
foverlaps(x = sel, y = blks_sel,
by.x = c("Selectivity", "year", "year2"),
type = "within") -> sel
sel <- sel %>%
mutate(`Time blocks` = paste0(start_year, "-", end_year),
age = as.numeric(Age)) %>%
filter(age <= 15)
axis <- tickr(sel, age, 3)
ggplot(sel, aes(x = age, y = proportion, colour = Selectivity,
shape = Selectivity, lty = Selectivity, group = Selectivity)) +
geom_point() +
geom_line() +
facet_grid(Sex~`Time blocks`) +
scale_colour_grey() +
scale_x_continuous(breaks = axis$breaks, labels = axis$labels) +
labs(y = "Selectivity\n", x = NULL,
colour = NULL, lty = NULL, shape = NULL) +
theme(legend.position = c(.85, .15))
# ggsave("selectivity.png", dpi = 300, height = 4, width = 6, units = "in")
}
# User-defined fxns in functions.R
data <- build_data()
parameters <- build_parameters()
random_vars <- build_random_vars()
setwd(tmb_path)
# MLE, phased estimation (phase = TRUE) or not (phase = FALSE)
out <- TMBphase(data, parameters, random = random_vars,
model_name = "mod", phase = FALSE,
debug = FALSE)
obj <- out$obj # TMB model object
opt <- out$opt # fit
rep <- out$rep # sdreport
lower <- out$lower # bounds
upper <- out$upper
rep
best <- obj$env$last.par.best
# TODO: run model using TMBhelper::fit_tmb
# MLE parameter estimates and standard errors in useable format
tidyrep <- tidy(summary(rep))
names(tidyrep) <- c("Parameter", "Estimate", "se")
key_params <- filter(tidyrep, !grepl('devs', Parameter)) # "Key" parameters (exclude devs)
write_csv(key_params, paste0(tmbout, "/tmb_params_mle_", YEAR, ".csv"))
write_csv(tidyrep, paste0(tmbout, "/tmb_allparams_mle_", YEAR, ".csv"))
# Save starting values for next year
write_csv(tidyrep, paste0(tmb_dat, "/inits_for_", YEAR+1, ".csv"))
# variance-covriance
VarCo <- solve(obj$he())
# Check  Hessian is pos def
print(sqrt(diag(VarCo)))
# MLE likelihood components
obj$report(best)$priors
obj$report(best)$prior_M
dat_like <- sum(obj$report(best)$catch_like,
obj$report(best)$index_like[1],
obj$report(best)$index_like[2],
obj$report(best)$index_like[3],
obj$report(best)$age_like[1], obj$report(best)$age_like[2],
sum(obj$report(best)$fsh_len_like),  sum(obj$report(best)$srv_len_like))
sum(obj$report()$catch_like,
obj$report()$index_like[1],
obj$report()$index_like[2],
obj$report()$index_like[3],
obj$report()$age_like[1], obj$report()$age_like[2],
sum(obj$report()$fsh_len_like),  sum(obj$report()$srv_len_like))
like_sum <- data.frame(like = c("Catch",
"Fishery CPUE",
"Survey CPUE",
"Mark-recapture abundance",
"Fishery ages",
"Survey ages",
"Fishery lengths",
"Survey lengths",
"Data likelihood",
"Fishing mortality penalty",
"Recruitment likelihood",
"SPR penalty",
"Sum of catchability priors",
"Total likelihood"),
value = c(obj$report(best)$catch_like,
obj$report(best)$index_like[1],
obj$report(best)$index_like[2],
obj$report(best)$index_like[3],
obj$report(best)$age_like[1],
obj$report(best)$age_like[2],
sum(obj$report(best)$fsh_len_like),
sum(obj$report(best)$srv_len_like),
dat_like,
obj$report(best)$fpen,
obj$report(best)$rec_like,
obj$report(best)$spr_pen,
sum(obj$report(best)$priors),
obj$report(best)$obj_fun)) %>%
mutate(tot = dat_like,
perc = (value / tot) * 100) %>%
select(-tot) %>%
rename(`Likelihood component` = like, Likelihood = value, `Percent of data likelihood` = perc)
write_csv(like_sum, paste0(tmbout, "/likelihood_components_", YEAR, ".csv"))
plot_ts(save = TRUE, units = "imperial", plot_variance = FALSE, path = tmbfigs)
plot_derived_ts(save = TRUE, path = tmbfigs, units = "imperial", plot_variance = FALSE)
plot_F()
# Fits to abundance indices, derived time series, and F. Use units = "imperial" or
# "metric" to switch between units.
plot_ts(save = TRUE, units = "imperial", plot_variance = FALSE, path = tmbfigs)
??pad
install.packages('padr')
plot_derived_ts(save = TRUE, path = tmbfigs, units = "imperial", plot_variance = FALSE)
agecomps <- reshape_age()
plot_sel() # Selectivity
plot_age_resids() # Fits to age comps
barplot_age("Survey")
barplot_age("Fishery")
lencomps <- reshape_len()
plot_len_resids()
barplot_len("Survey", sex = "Female")
barplot_len("Survey", sex = "Male")
barplot_len("Fishery", sex = "Female")
?TMBhelper
??TMBhelper
?TMB
## OM_Master.R
## M S KAPUR
## Generate data, condition and export based on OM config, calling functions.R and TMB model XX
source('./R/presets.R') ## load all pckgs
ts
head(ts)
ts <- read_csv(paste0(tmb_dat, "/abd_indices_", YEAR, ".csv"))        # time series
data
## Load real data and pass to build_dat, build_pars to get in TMB-friendly format
surv <- read.csv("./Indices_SS3_2020-01-23v3.csv") ## VAST stdization
## Load real data and pass to build_dat, build_pars to get in TMB-friendly format
surv <- read.csv("input/Indices_SS3_2020-01-23v3.csv") ## VAST stdization
surv
## Load real data and pass to build_dat, build_pars to get in TMB-friendly format
surv <- read.csv("input/Indices_SS3_2020-01-23v3.csv") ## VAST stdization
surv
## Load real data and pass to build_dat, build_pars to get in TMB-friendly format
surv <- read.csv("input/Indices_SS3_2020-01-23v3.csv")  %>% filter(Fleet != "AllAreas") ## VAST stdization

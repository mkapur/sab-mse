} else {
loadfonts()
+}
if(.Platform$OS.type != "unix") {
## Register fonts for Windows bitmap output
loadfonts(device="win")
} else {
loadfonts()
}
require(xkcd)
require(ggplot2)
require(extrafont)
loadfonts()
piedat <- data.frame(group = c('white','black'),
value = c(0.9,0.1))
bardat <- data.frame('x' = as.factor(1:3),'prop' = c(0.5,0.6,0.25))
## https://stackoverflow.com/questions/12675147/how-can-we-make-xkcd-style-graphs
theme_xkcd <- theme(
panel.background = element_rect(fill="white"),
axis.ticks = element_line(colour=NA),
panel.grid = element_line(colour="white"),
axis.text.y = element_text(colour=NA),
axis.text.x = element_text(colour="black"),
text = element_text(size=16, family="Humor Sans")
)
## first make the piechart
ggplot(piedat, aes(x="", y=value, fill=group)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
theme_xkcd()
font_import(pattern="[H/h]umor")
getSymbols("GDPC1", src="FRED")
font_import(pattern="[C/c]omic")
font_import(pattern="[H/h]umor")
“xkcd” %in% fonts())
“xkcd” %in% fonts()
"xkcd" %in% fonts()
fonts()
require(extrafont)
fonts()
ry <- rlnorm(100,mean = 10, sd = sd_r )
sd_r <- 0.1
ry <- rlnorm(100,mean = 10, sd = sd_r )
ry
?rlnorm
ry <- rlnorm(100,meanlog = log(10), sdlog = log(sd_r ))
ry
log(10)
log(sd_r )
ry <- rlnorm(100,meanlog = log(10), sdlog = sd_r)
ry
Ry <- rlnorm(100,meanlog = log(10), sdlog = sd_r)
hist(Ry)
## deviate
eps <- rlnorm(100,0,sd_r)
eps
hist(eps)
## deviate is normally distributed
eps <- rnorm(100,0,sd_r)
hist(eps)
## Methot Taylor Eq 1
sd_r <- 0.1
Ry <- rlnorm(1000,meanlog = log(10), sdlog = sd_r)
hist(Ry) ## lognormal
## deviate is normally distributed
eps <- rnorm(1000,0,sd_r)
hist(eps)
## error term
et <- exp(eps - sd_r^2/2)
et
hist(et)
rstar <- Ry*et
rstar
hist(Ry, fill = 'grey22')
hist(Ry, col = 'grey22')
hist(rstar, col = 'grey55', add = T)
## Methot Taylor Eq 1
sd_r <- 0.1
Ry <- rlnorm(1000,meanlog = log(10), sdlog = sd_r)
hist(Ry) ## lognormal
## deviate is normally distributed
eps <- rnorm(1000,0,sd_r)
hist(eps)
## error term
et <- exp(eps - sd_r^2/2)
hist(et)
rstar <- Ry*et
hist(Ry, col = 'grey22')
hist(rstar, col = 'grey55', add = T)
hist(rstar, col = 'grey55', add = T, alpha = 0.2)
?hist
hist(rstar, col = 'grey55',alpha = 0.2)
hist(Ry, col = 'grey22', add = T)
rstar
dim(et)
length(et)
length(Ry)
?abline
abline(b = 0, a = mean(Ry), add = T)
abline( v = mean(Ry), add = T)
abline( v = mean(Ry), add = T, col = 'red')
abline( v = mean(rstar), add = T, col = 'blue', lty = 'dashed')
hist(eps, col = 'grey44',alpha = 0.2)
hist(eps, col = 'grey44',alpha = 0.2)
hist(et, col = 'grey22', add = T)
abline( v = mean(eps), add = T, col = 'red')
abline( v = mean(et), add = T, col = 'blue', lty = 'dashed')
hist(et, col = 'grey22', add = T)
hist(et, col = 'grey22')
hist(eps, col = 'grey44',alpha = 0.2, xlim = c(-2,2))
hist(et, col = 'grey22', add = T)
abline( v = mean(eps), add = T, col = 'red')
abline( v = mean(et), add = T, col = 'blue', lty = 'dashed')
mean(et)
mean(exp(eps))
hist(exp(eps), col = 'grey77', add = T)
par(mfrow = c(1,2))
## recdev itself is normal and zero-centered
hist(eps, col = 'grey44',alpha = 0.2, xlim = c(-2,2))
hist(exp(eps), col = 'grey77', add = T) ## shifted up
## when transformed and corrected, the mean is now one
hist(et, col = 'grey22', add = T)
abline( v = mean(eps), add = T, col = 'red')
abline( v = mean(et), add = T, col = 'blue', lty = 'dashed')
hist(rstar, col = 'grey55',alpha = 0.2)
hist(Ry, col = 'grey22', add = T)
## means are on top of one another
abline( v = mean(Ry), add = T, col = 'red')
abline( v = mean(rstar), add = T, col = 'blue', lty = 'dashed')
par(mfrow = c(1,2))
## recdev itself is normal and zero-centered
hist(eps, col = 'grey44',alpha = 0.2, xlim = c(-1,2))
hist(exp(eps), col = 'grey77', add = T) ## shifted up
## when transformed and corrected, the mean is now one
hist(et, col = 'grey22', add = T)
abline( v = mean(eps), add = T, col = 'red')
abline( v = mean(et), add = T, col = 'blue', lty = 'dashed')
hist(rstar, col = 'grey55',alpha = 0.2)
hist(Ry, col = 'grey22', add = T)
## means are on top of one another
abline( v = mean(Ry), add = T, col = 'red')
abline( v = mean(rstar), add = T, col = 'blue', lty = 'dashed')
abline( v = mean(exp(eps)), add = T, col = 'green')
par(mfrow = c(1,2))
## recdevs vs transformed----
## recdev itself is normal and zero-centered
hist(eps, col = 'grey44',alpha = 0.2, xlim = c(-1,2))
hist(exp(eps), col = 'grey77', add = T) ## shifted up
## when transformed and corrected, the mean is now one
hist(et, col = 'grey22', add = T)
abline( v = mean(eps), add = T, col = 'red')
abline( v = mean(et), add = T, col = 'blue', lty = 'dashed')
abline( v = mean(exp(eps)), add = T, col = 'green')
## Ry vs Rstar ----
hist(rstar, col = 'grey55',alpha = 0.2)
hist(Ry, col = 'grey22', add = T)
## means are on top of one another
abline( v = mean(Ry), add = T, col = 'red')
abline( v = mean(rstar), add = T, col = 'blue', lty = 'dashed')
devtools::install_git("mkapur/kaputils")
devtools::install_github("mkapur/kaputils")
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
remove.packages('kaputils')
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils")
devtools::install_github("mkapur/kaputils")
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospectivess/"
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospectivess/"
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospectives/"
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospectives/"
suff = NA,
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospectives/",
suff = NA,
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
require(dplyr)
require(r4ss)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospectives/",
suff = NA,
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospective/",
suff = NA,
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospective/",
suffix = NA,
terminal_year = 2012,
pattern = "retro-",
subpattern = NA,
writeTables = FALSE
)
require(kaputils)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospective/",
suffix = NA,
terminal_year = 2012,
pattern = "retro-",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospective/",
suffix = NA,
terminal_year = 2012,
pattern = "retro-",
subpattern = NA,
writeTables = TRUE
)
length(seq(0.05,0.95,0.05))
9 %%3
## super explicit version
for(i in 1:100){
if( i %% 3 ==0 ) {
case <- "Fizz"
} else if( i %% 5 ==0 ) {
caset <- "Buzz"
} else if(i %% 3 == 0 & i %% 5 == 0 ) {
case <- "FizzBuzz"
} else{
case <- i
}
cat(case, "\n")
}
## super explicit version
for(i in 1:10){
if( i %% 3 ==0 ) {
case <- "Fizz"
} else if( i %% 5 ==0 ) {
caset <- "Buzz"
} else if(i %% 3 == 0 & i %% 5 == 0 ) {
case <- "FizzBuzz"
} else{
case <- i
}
cat(case, "\n")
}
## super explicit version
for(i in 1:10){
if( i %% 3 ==0 ) {
case <- "Fizz"
} else if( i %% 5 ==0 ) {
case <- "Buzz"
} else if(i %% 3 == 0 & i %% 5 == 0 ) {
case <- "FizzBuzz"
} else{
case <- i
}
cat(case, "\n")
}
## super explicit version
for(i in 1:100){
if( i %% 3 ==0 ) {
case <- "Fizz"
} else if( i %% 5 ==0 ) {
case <- "Buzz"
} else if(i %% 3 == 0 & i %% 5 == 0 ) {
case <- "FizzBuzz"
} else{
case <- i
}
cat(case, "\n")
}
## super explicit version
for(i in 1:100){
## check for both first
if(  i %% 3 == 0 & i %% 5 == 0 ) {
case <- "Fizz"
} else if( i %% 5 ==0 ) {
case <- "Buzz"
} else if( i %% 3 ==0 ) {
case <- "FizzBuzz"
} else{
case <- i
}
cat(case, "\n")
}
remotes::install_github('rstudio/blogdown')
?blogdown::new_site()
?blogdown::new_site("./maiakapur")
?blogdown::new_site(dir = "./dropbox/maiakapur")
getwd()
?blogdown::new_site(dir = "C:/Users/mkapur/dropbox/maiakapur")
blogdown::new_site(dir = "C:/Users/mkapur/dropbox/maiakapur")
require(blogdown)
library(rlang)
install.packages('rlang')
install.packages(c("vctrs", "rlang", "tidyverse"))
dplyr::relocate()
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
setwd("C:/Users/mkapur/Dropbox/UW/sab-mse")
## OM_Master.R
## M S Kapur
## Inspiration  from J Sullivan N Jacobsen Summer 2020
## kapurm@uw.edu
# file.copy("C:/Users/public/shire.cpp",here("TMB","shire.cpp"),overwrite = TRUE)
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
compile(here("TMB","shire.cpp"))
dyn.load(dynlib(here("TMB","shire")))
## OM_Master.R
## M S Kapur
## Inspiration  from J Sullivan N Jacobsen Summer 2020
## kapurm@uw.edu
# file.copy("C:/Users/public/shire.cpp",here("TMB","shire.cpp"),overwrite = TRUE)
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
compile(here("TMB","shire.cpp"))
dyn.load(dynlib(here("TMB","shire")))
## OM_Master.R
## M S Kapur
## Inspiration  from J Sullivan N Jacobsen Summer 2020
## kapurm@uw.edu
# file.copy("C:/Users/public/shire.cpp",here("TMB","shire.cpp"),overwrite = TRUE)
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
compile(here("TMB","shire.cpp"))
dyn.load(dynlib(here("TMB","shire")))
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
compile(here("TMB","shire.cpp"))
dyn.load(dynlib(here("TMB","shire")))
# compile("C:/Users/public/shire.cpp")
# dyn.load(dynlib("C:/Users/public/shire"))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
mappy <- list(
logh_k = factor(rep(NA, 4)),
logR_0k = factor(rep(NA, 4)), ## sum wc = 12
# omega_0ij = factor(matrix(NA, nrow = nrow(df$parms$omega_0ij), ncol = nrow(df$parms$omega_0ij))),
logq_f = factor(rep(NA, 5)),
b =  factor(rep(NA, 60)),
logpi_acomp = factor(rep(NA,df$nfleets_acomp)),
logSDR = factor(NA)#,
## structure is fleet x alpha, beta x time block (1 for now)x sex
# log_fsh_slx_pars = factor(array(NA, dim = c(df$nfleets_fish,2,1,2))),
# log_srv_slx_pars =  factor(array(NA, dim = c( df$nfleets_surv+(df$nfleets_acomp-5),2,1,2)))
)
p = proc.time()
obj <- MakeADFun(df,
parameters = df$parms,
map = mappy, ## fix everything
checkParameterOrder = TRUE,
DLL= "shire") # Run the assessment, in TMB folder
proc.time()-p
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
compile(here("TMB","shire.cpp"))
dyn.load(dynlib(here("TMB","shire")))
# compile("C:/Users/public/shire.cpp")
# dyn.load(dynlib("C:/Users/public/shire"))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
mappy <- list(
logh_k = factor(rep(NA, 4)),
logR_0k = factor(rep(NA, 4)), ## sum wc = 12
# omega_0ij = factor(matrix(NA, nrow = nrow(df$parms$omega_0ij), ncol = nrow(df$parms$omega_0ij))),
logq_f = factor(rep(NA, 5)),
b =  factor(rep(NA, 60)),
logpi_acomp = factor(rep(NA,df$nfleets_acomp)),
logSDR = factor(NA)#,
## structure is fleet x alpha, beta x time block (1 for now)x sex
# log_fsh_slx_pars = factor(array(NA, dim = c(df$nfleets_fish,2,1,2))),
# log_srv_slx_pars =  factor(array(NA, dim = c( df$nfleets_surv+(df$nfleets_acomp-5),2,1,2)))
)
p = proc.time()
obj <- MakeADFun(df,
parameters = df$parms,
map = mappy, ## fix everything
checkParameterOrder = TRUE,
DLL= "shire") # Run the assessment, in TMB folder
proc.time()-p
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
compile(here("TMB","shire.cpp"))
dyn.load(dynlib(here("TMB","shire")))
# compile("C:/Users/public/shire.cpp")
# dyn.load(dynlib("C:/Users/public/shire"))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
mappy <- list(
logh_k = factor(rep(NA, 4)),
logR_0k = factor(rep(NA, 4)), ## sum wc = 12
# omega_0ij = factor(matrix(NA, nrow = nrow(df$parms$omega_0ij), ncol = nrow(df$parms$omega_0ij))),
logq_f = factor(rep(NA, 5)),
b =  factor(rep(NA, 60)),
logpi_acomp = factor(rep(NA,df$nfleets_acomp)),
logSDR = factor(NA)#,
## structure is fleet x alpha, beta x time block (1 for now)x sex
# log_fsh_slx_pars = factor(array(NA, dim = c(df$nfleets_fish,2,1,2))),
# log_srv_slx_pars =  factor(array(NA, dim = c( df$nfleets_surv+(df$nfleets_acomp-5),2,1,2)))
)
p = proc.time()
obj <- MakeADFun(df,
parameters = df$parms,
map = mappy, ## fix everything
checkParameterOrder = TRUE,
DLL= "shire") # Run the assessment, in TMB folder
proc.time()-p
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
compile(here("TMB","shire.cpp"))
dyn.load(dynlib(here("TMB","shire")))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works wi
save(df, fil = here('TMB',paste0(Sys.Date(),'df.rdata')))
save(df, file = here('TMB',paste0(Sys.Date(),'df.rdata')))
here('TMB',paste0(Sys.Date(),'df.rdata'))
rm(list = ls())

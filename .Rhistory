"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-c(1,2)] )))
array(mappy$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(rep1 <- obj$report()) ## one off caclulation using start pars
rep1$surv_yf_pred
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <- nlminb(
obj$par,
obj$fn,
obj$gr,
lower = bounds$lower,
upper = bounds$upper,
hessian = NULL,
# control = list(eval.max = 1e6, iter.max = 1e6, rel.tol = 1e-4)
)
)
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred/df$surv_yf_obs
# dat$catch_yf_pred_total/df$catch_yf_obs[,2:ncol(df$catch_yf_obs)]
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(justPlots = FALSE,
dat=dat,
obj = obj,
opt = opt,
rep=rep,
cppname =cppname,
mappy = mappy,
runname = paste0("-",df$yRun,"y_",
cppname,
"_tildeR_yON",
"_AKVASTest",
"_B_y0_off"))
source('C:/Users/mkapur/Dropbox/UW/sab-mse/R/functions/boundPars.R')
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <- nlminb(
obj$par,
obj$fn,
obj$gr,
lower = bounds$lower,
upper = bounds$upper,
hessian = NULL,
control = list(eval.max = 1e6, iter.max = 1e6, rel.tol = 1e-4)
)
)
array(exp(df$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars)))
array(exp(df$log_srv_slx_pars), dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars)))
array(exp(df$log_srv_slx_pars), dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
array(exp(df$parms$log_srv_slx_pars), dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
## use map to match input pars which were actually used
inputSel <- array(exp(obj$par[grep('log_srv_slx_pars',names(obj$par))]),
dim = dim(df$parms$log_srv_slx_pars),
dimnames = dimnames(df$parms$log_srv_slx_pars))
map_srvslx <- array(as.numeric(mappy$log_srv_slx_pars),
dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
## replace non-fixed values with starting pars
map_srvslx[!is.na(map_srvslx)] <-  array(as.numeric(exp(best[grep('log_srv_slx_pars',names(best))])))
map_srvslx
surv_flt = 4
blk = 1
s = 1
is.na(map_srvslx[surv_flt,1,blk,s]
)
getSelec2(sex = s,
selP = inputSel,
flt_idx = surv_flt,
selType = df$selType_surv[surv_flt],
selShape = df$selShape_surv[surv_flt],
fltType = 'surv')
inputSel
map_srvslx <- array(as.numeric(mappy$log_srv_slx_pars),
dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
map_srvslx[is.na(map_srvslx)] <- array(exp(obj$par[grep('log_srv_slx_pars',names(obj$par))]))
map_srvslx
map_srvslx <- array(as.numeric(mappy$log_srv_slx_pars),
dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
map_srvslx
## use map to match input pars which were actually used
inputSel <- array(exp(obj$par[grep('log_srv_slx_pars',names(obj$par))]),
dim = dim(df$parms$log_srv_slx_pars),
dimnames = dimnames(df$parms$log_srv_slx_pars))
inputSel
source('C:/Users/mkapur/Dropbox/UW/sab-mse/R/functions/load_data_OM.R')
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6,
move = TRUE,
b_y_max = 0.109) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-  df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <- df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$b_y <- rep(0,df$tEnd) ## no ramp right now.
array(exp(df$parms$log_srv_slx_pars), dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-c(1,2)] )))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
exp(3.688)
exp(4.249)
source('C:/Users/mkapur/Dropbox/UW/sab-mse/R/functions/boundPars.R')
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <- nlminb(
obj$par,
obj$fn,
obj$gr,
lower = bounds$lower,
upper = bounds$upper,
hessian = NULL,
control = list(eval.max = 1e6, iter.max = 1e6, rel.tol = 1e-4)
)
)
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-19 15_47_50-60y_v4_tildeR_yON_AKVASTest_B_y0_off/bounds.rdata")
## inspect survey bounds in proper format
exp(bounds$srv_bnds_lwr)
exp(bounds$srv_bnds_upr)
## TMBHELPER unavail for R >4.0
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-19 15_47_50-60y_v4_tildeR_yON_AKVASTest_B_y0_off/obj.rdata")
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-19 15_47_50-60y_v4_tildeR_yON_AKVASTest_B_y0_off/mappy.rdata")
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-19 15_47_50-60y_v4_tildeR_yON_AKVASTest_B_y0_off/bounds.rdata")
## TMBHELPER unavail for R >4.0
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred/df$surv_yf_obs
dat$srv_slx_yafs[,,4,1]
# dat$catch_yf_pred_total/df$catch_yf_obs[,2:ncol(df$catch_yf_obs)]
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(justPlots = FALSE,
dat=dat,
obj = obj,
opt = opt,
rep=rep,
cppname =cppname,
mappy = mappy,
runname = paste0("-",df$yRun,"y_",
cppname,
"_tildeR_yON",
"_AKVASTest",
"_B_y0_off"))
length(obj$par[grep('log_srv_slx_pars',names(obj$par))]) != 0
## use map to match input pars which were actually used
inputSel <- array(exp(obj$par[grep('log_srv_slx_pars',names(obj$par))]),
dim = dim(df$parms$log_srv_slx_pars),
dimnames = dimnames(df$parms$log_srv_slx_pars))
map_srvslx <- array(as.numeric(mappy$log_srv_slx_pars),
dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
## replace non-fixed values with starting pars
map_srvslx[!is.na(map_srvslx)] <-  array(as.numeric(exp(best[grep('log_srv_slx_pars',names(best))])))
selP <- map_srvslx
srv_sel_afsb <- array(NA, dim =  c(df$nage,
df$nfleets_surv+df$nfleets_acomp-4,
2,
max(df$srv_blks_size)),
dimnames = list(c(df$age),
c(dimnames(df$parms$log_srv_slx_pars)[[1]]),
c('Fem','Mal'),
c(dimnames(df$parms$log_srv_slx_pars)[[3]])))
for(surv_flt in 1:8){
for(blk in 1:df$srv_blks_size[surv_flt]){
for(s in 1:2){
if(!is.na(map_srvslx[surv_flt,1,blk,s])){
srv_sel_afsb[,surv_flt,s,blk] <- getSelec2(sex = s,
selP = selP,
flt_idx = surv_flt,
selType = df$selType_surv[surv_flt],
selShape = df$selShape_surv[surv_flt],
fltType = 'surv')
} else if(is.na(map_srvslx[surv_flt,1,blk,s])){
srv_sel_afsb[,surv_flt,s,blk] <- getSelec2(sex = s,
selP = inputSel,
flt_idx = surv_flt,
selType = df$selType_surv[surv_flt],
selShape = df$selShape_surv[surv_flt],
fltType = 'surv')
}
}  ## end sex
} ## end blk
}## end surv fleet
srv_sel_afsb[,4,1,1]
surv_flt =4
sex = 1
getSelec2(sex = s,
selP = inputSel,
flt_idx = surv_flt,
selType = df$selType_surv[surv_flt],
selShape = df$selShape_surv[surv_flt],
fltType = 'surv')
df$selType_surv
df$selShape_surv[surv_flt]
df$fltnames_surv
inputSel
array(exp(obj$par[grep('log_srv_slx_pars',names(obj$par))]),
dim = dim(df$parms$log_srv_slx_pars),
dimnames = dimnames(df$parms$log_srv_slx_pars))
array(exp(df$parms$log_srv_slx_pars), dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
## use map to match input pars which were actually used
inputSel <- array(exp(df$parms$log_srv_slx_pars),
dim = dim(df$parms$log_srv_slx_pars),
dimnames = dimnames(df$parms$log_srv_slx_pars))
map_srvslx <- array(as.numeric(mappy$log_srv_slx_pars),
dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
## replace non-fixed values with starting pars
map_srvslx[!is.na(map_srvslx)] <-  array(as.numeric(exp(best[grep('log_srv_slx_pars',names(best))])))
selP <- map_srvslx
srv_sel_afsb <- array(NA, dim =  c(df$nage,
df$nfleets_surv+df$nfleets_acomp-4,
2,
max(df$srv_blks_size)),
dimnames = list(c(df$age),
c(dimnames(df$parms$log_srv_slx_pars)[[1]]),
c('Fem','Mal'),
c(dimnames(df$parms$log_srv_slx_pars)[[3]])))
for(surv_flt in 1:8){
for(blk in 1:df$srv_blks_size[surv_flt]){
for(s in 1:2){
if(!is.na(map_srvslx[surv_flt,1,blk,s])){
srv_sel_afsb[,surv_flt,s,blk] <- getSelec2(sex = s,
selP = selP,
flt_idx = surv_flt,
selType = df$selType_surv[surv_flt],
selShape = df$selShape_surv[surv_flt],
fltType = 'surv')
} else if(is.na(map_srvslx[surv_flt,1,blk,s])){
srv_sel_afsb[,surv_flt,s,blk] <- getSelec2(sex = s,
selP = inputSel,
flt_idx = surv_flt,
selType = df$selType_surv[surv_flt],
selShape = df$selShape_surv[surv_flt],
fltType = 'surv')
}
}  ## end sex
} ## end blk
}## end surv fleet
srv_sel_afsb[,4,1,1]
debugSource('C:/Users/mkapur/Dropbox/UW/sab-mse/R/functions/writeOM.R')
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-15 07_56_55-60y_v4_tildeR_yON_estWC_FIX_srvblksON/opt.rdata")
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
map_srvslx <- array(as.numeric(mappy$log_srv_slx_pars),
dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-15 07_56_55-60y_v4_tildeR_yON_estWC_FIX_srvblksON/mappy.rdata")
map_srvslx <- array(as.numeric(mappy$log_srv_slx_pars),
dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
## replace non-fixed values with starting pars
map_srvslx[!is.na(map_srvslx)] <-  array(as.numeric(exp(best[grep('log_srv_slx_pars',names(best))])))
selP <- map_srvslx
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-15 07_56_55-60y_v4_tildeR_yON_estWC_FIX_srvblksON/opt.rdata")
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-15 07_56_55-60y_v4_tildeR_yON_estWC_FIX_srvblksON/mappy.rdata")
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-15 07_56_55-60y_v4_tildeR_yON_estWC_FIX_srvblksON/obj.rdata")
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
## use map to match input pars which were actually used
inputSel <- array(exp(df$parms$log_srv_slx_pars),
dim = dim(df$parms$log_srv_slx_pars),
dimnames = dimnames(df$parms$log_srv_slx_pars))
map_srvslx <- array(as.numeric(mappy$log_srv_slx_pars),
dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
## replace non-fixed values with starting pars
map_srvslx[!is.na(map_srvslx)] <-  array(as.numeric(exp(best[grep('log_srv_slx_pars',names(best))])))
selP <- map_srvslx
selP
paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c('shire_v4')[1]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6,
move = TRUE,
b_y_max = 0.109) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-  df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <- df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$b_y <- rep(0,df$tEnd) ## no ramp right now.
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-4] )))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
array(mappy$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
## TMBHELPER unavail for R >4.0
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred/df$surv_yf_obs
debugSource('C:/Users/mkapur/Dropbox/UW/sab-mse/R/functions/writeOM.R')
# dat$catch_yf_pred_total/df$catch_yf_obs[,2:ncol(df$catch_yf_obs)]
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(justPlots = FALSE,
dat=dat,
obj = obj,
opt = opt,
rep=rep,
cppname =cppname,
mappy = mappy,
runname = paste0("-",df$yRun,"y_",
cppname,
"_tildeR_yON",
"_AKVASTest",
"_B_y0_off"))
debugSource('C:/Users/mkapur/Dropbox/UW/sab-mse/R/functions/writeOM.R')
writeOM(justPlots = FALSE,
dat=dat,
obj = obj,
opt = opt,
rep=rep,
cppname =cppname,
mappy = mappy,
runname = paste0("-",df$yRun,"y_",
cppname,
"_tildeR_yON",
"_BCVASTest",
"_Brampdisabled"))
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-c(1,4)] )))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
## TMBHELPER unavail for R >4.0
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred/df$surv_yf_obs
# dat$catch_yf_pred_total/df$catch_yf_obs[,2:ncol(df$catch_yf_obs)]
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(justPlots = FALSE,
dat=dat,
obj = obj,
opt = opt,
rep=rep,
cppname =cppname,
mappy = mappy,
runname = paste0("-",df$yRun,"y_",
cppname,
"_tildeR_yON",
"_BCVAST_AKVASTEest",
"_Brampdisabled"))
source('C:/Users/mkapur/Dropbox/UW/sab-mse/R/functions/boundPars.R')
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
## TMBHELPER unavail for R >4.0
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred/df$surv_yf_obs
# dat$catch_yf_pred_total/df$catch_yf_obs[,2:ncol(df$catch_yf_obs)]
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(justPlots = FALSE,
dat=dat,
obj = obj,
opt = opt,
rep=rep,
cppname =cppname,
mappy = mappy,
runname = paste0("-",df$yRun,"y_",
cppname,
"_tildeR_yON",
"_BCVAST_AKVASTEest",
"_Brampdisabled"))

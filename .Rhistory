dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
buildMap <- function(toFix = c(3,5,8,10),
fixFlt = c("BC_LL","BC_TRAP","BC_TWL")){
mappy <- list(); idx = 1
for(i in 1:length(df$parms)){
if(i %in% toFix){
if(i != 8 & i != 9){
names(mappy[[idx]]) <- names(df$parms[i])
mappy[[idx]] <- factor(rep(NA, length(df$parms[i])))
idx = idx+1
## end non slx pars
} else{
if(i == 8){
names(mappy[[idx]]) <- names(df$parms[i])
fsh_slx_map <- array(1:length(df$parms$log_fsh_slx_pars),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
for(flt in fixFlt){
fsh_slx_map[row.names(fsh_slx_map) == flt,1:2,1,1:2] <- factor(NA)
}
mappy[[idx]] <- factor(fsh_slx_map)
idx = idx+1
} else if(i == 9){
stop("fx not ready to automate fixing survey slx")
}
} ## end  slx pars
} ## end i in to fix
} ## end loop parms
return(mappy)
}
# df$parms$logR_0k = rep(25,4)
# omega_0ij_map[1,] <- df$parms$omega_0ij[1,] ## estimate to/from C1 only
#
# ## mirror selex in AK E/W
# ## if you want to MIRROR selex, fill a value in the specific location which is identical for each fleet
# dimnames(fsh_slx_map)[[1]] <- df$fltnames_fish
#
# fsh_slx_map[c(1,2)] <- 1 ## mirror p1 for females, W
# fsh_slx_map[c(19,20)] <- 2 ## mirror p1 for males, W
# fsh_slx_map[c(3,4)] <- 3 ## mirror p1 for females, E
# fsh_slx_map[c(21,22)] <- 4 ## mirror p1 for males, E
# fsh_slx_map[c(10,11)] <- 5## mirror p2 for females, W
# fsh_slx_map[c(28,29)] <- 6## mirror p2 for males, W
# fsh_slx_map[c(12,13)] <- 7## mirror p2 for females, E
# fsh_slx_map[c(30,31)] <- 8## mirror p2 for males, E
## fix BC selex (for use with -1 slx)
mappy <- buildMap(toFix = c(3,5,8,10),
fixFlt = c("BC_LL","BC_TRAP","BC_TWL")) ## the numbers are in order of df$parms
mappy <- list(); idx = 1
mappy <- list(); idx = 1
for(i in 1:length(df$parms)){
if(i %in% toFix){
if(i != 8 & i != 9){
names(mappy[[idx]]) <- names(df$parms[i])
mappy[[idx]] <- factor(rep(NA, length(df$parms[i])))
idx = idx+1
## end non slx pars
} else{
if(i == 8){
names(mappy[[idx]]) <- names(df$parms[i])
fsh_slx_map <- array(1:length(df$parms$log_fsh_slx_pars),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
for(flt in fixFlt){
fsh_slx_map[row.names(fsh_slx_map) == flt,1:2,1,1:2] <- factor(NA)
}
mappy[[idx]] <- factor(fsh_slx_map)
idx = idx+1
} else if(i == 9){
stop("fx not ready to automate fixing survey slx")
}
} ## end  slx pars
} ## end i in to fix
} ## end loop parms
i
i != 8 & i != 9
idx
names(mappy[[idx]]) <- names(df$parms[i])
mappy <- list(); idx = 1
mappy <- list(); idx = 1
for(i in 1:length(df$parms)){
if(i %in% toFix){
if(i != 8 & i != 9){
mappy[[idx]] <- factor(rep(NA, length(df$parms[i])))
names(mappy[[idx]]) <- names(df$parms[i])
idx = idx+1
## end non slx pars
} else{
if(i == 8){
fsh_slx_map <- array(1:length(df$parms$log_fsh_slx_pars),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
for(flt in fixFlt){
fsh_slx_map[row.names(fsh_slx_map) == flt,1:2,1,1:2] <- factor(NA)
}
mappy[[idx]] <- factor(fsh_slx_map)
names(mappy[[idx]]) <- names(df$parms[i])
idx = idx+1
} else if(i == 9){
stop("fx not ready to automate fixing survey slx")
}
} ## end  slx pars
} ## end i in to fix
} ## end loop parms
mappy
class(mappy)
class(mappy[[3]])
class(mappy[[4]])
class(mappy[[2]])
class(mappy[[1]])
class(mappy[[3]])
class(mappy[[3]][1])
## ~90s with full years
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
if("log_fsh_slx_pars" %in% names(mappy))
)
"log_fsh_slx_pars" %in% names(mappy)
names(mappy)
dimnames(mappy)
mappy
mappy[[3]]
array(mappy[[3]], dim = c(7,7,2))
array(mappy[[3]], dim = c(7,2,2))
class(mappy)
names(mappy)
lapply(mapy, names)
lapply(mappy, names)
"log_fsh_slx_pars" %in% lapply(mappy, names)
grep("log_fsh_slx_pars" , mappy)
if(!is.null(grep("logh_k" , mappy))
grep("logh_k" , mappy)
!is.null(grep("logh_k" , mappy)
)
length(grep("logh_k" , mappy)
)
## identify which fleets were NA
which(is.na(mappy))
## identify which fleets were NA
which(is.na(mappy[["log_fsh_slx_pars"]]))
mappy[["log_fsh_slx_pars"]]
grep("log_fsh_slx_pars", mappy)
mappy[[grep("log_fsh_slx_pars", mappy)]]
## identify which fleets were NA
which(is.na(mappy[[grep("log_fsh_slx_pars", mappy)]]))
length(obj$par[names(obj$par) == "log_fsh_slx_pars"])
array(1:length(obj$par[names(obj$par) == "log_fsh_slx_pars"]), dim = c(4,2,2))
array(1:length(obj$par[names(obj$par) == "log_fsh_slx_pars"]), dim = c(7,2,2))
length(obj$par[names(obj$par) == "log_fsh_slx_pars"])
array(exp(obj$par[names(obj$par)=='log_fsh_slx_pars']),
dim = c(7,2,2))
rm(list = ls)
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v2L_1",'shire_v2L_1_16Nov')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
# df$v1 = 0.99; df$Fmax = 3;
# df$v1 = 0.7;  df$Fmax = 1.5;
df$v1 = 0.65; df$Fmax = 1.15;
df$niter = 20
df$yRun =  df$tEnd-1
df$mat_age <- rep(1e-5,df$nage)
df$selShape_fish[3:5] <-  -1 ## slx = 1.0 for all BC fisheries
mappy <- buildMap(toFix = c(3,5,8,10),
fixFlt = c("BC_LL","BC_TRAP","BC_TWL")) ## the numbers are in order of df$parms
source('R/functions/buildMap.R')
mappy <- buildMap(toFix = c(3,5,8,10),
fixFlt = c("BC_LL","BC_TRAP","BC_TWL")) ## the numbers are in order of df$parms
mappy
## ~90s with full years
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
lower <- obj$par-Inf
upper <- obj$par+Inf
length(grep("log_fsh_slx_pars", mappy)) != 0
## make a master array with everything
## identify which fleets were NA
which(is.na(mappy[[grep("log_fsh_slx_pars", mappy)]]))
## brute force par locations; if mappy mirrors first ak fleets,
## assume that fleets 1 and 2 are now AK FIX mirror and AK TWL mirror
array(1:length(obj$par[names(obj$par) == "log_fsh_slx_pars"]), dim = c(4,2,2))
array(1:length(obj$par[names(obj$par) == "log_fsh_slx_pars"]), dim = c(7,2,2))
length(obj$par[names(obj$par) == "log_fsh_slx_pars"])
## identify which fleets were NA
which(is.na(mappy[[grep("log_fsh_slx_pars", mappy)]]))
source('R/functions/boundPars.R')
bounds <- boundPars(obj, r0_lower = 10)
bounds
boundPars <- function(obj, r0_lower = 10){
## bounds on repro pars ----
lower <- obj$par-Inf
upper <- obj$par+Inf
lower[names(lower) == 'logh_k'] <- log(0.2) ## duh
upper[names(upper) == 'logh_k'] <- log(0.99)
lower[names(lower) == 'epsilon_tau'] <- 0
lower[names(lower) == 'logR_0k'] <- r0_lower
lower[names(lower) == 'logSDR'] <- log(0.0001)
lower[names(lower) == 'omega_0ij'] <- log(0.0001)
upper[names(upper) == 'omega_0ij'] <- log(0.999)
## bounds on fsh slx ----
## first check if slx was fixed at all
# if(length(grep("log_fsh_slx_pars", mappy)) != 0){
#   ## make a master array with everything
#   array(1:length(obj$par[names(obj$par) == "log_fsh_slx_pars"]), dim = c(7,2,2))
#   ## identify which fleets were NA
#   which(is.na(mappy[[grep("log_fsh_slx_pars", mappy)]]))
#
# }
## brute force par locations; if mappy mirrors first ak fleets,
## assume that fleets 1 and 2 are now AK FIX mirror and AK TWL mirror
# array(1:length(obj$par[names(obj$par) == "log_fsh_slx_pars"]), dim = c(4,2,2))
# if(is.na(fixSlx)){
## if no fleets to fix, go with the normal slx bounds
p1_logistic_idx <- c(1:2,15:16) #c(1:4,19:22)
p2_logistic_idx <- p1_logistic_idx+df$nfleets_fish
p1_norm_idx <- c(3,4,6,7,17,18,20,21)  #c(5,6,8,9,23,24,26,27)
p1_norm_idx <- c(3,4,6,7,17,18,20,21)  #c(5,6,8,9,23,24,26,27)
p2_norm_idx <- p1_norm_idx+df$nfleets_fish
p1_gamma_idx <- c(5,19)#c(7,25)
p2_gamma_idx <- p1_gamma_idx+df$nfleets_fish
# #* fsh slx lower bounds ----
# ## logistic p1 (a50)
# array(1:length(lower[names(lower) == 'log_fsh_slx_pars']), dim = c(7,2,2))
lower[names(lower) == 'log_fsh_slx_pars'][p1_logistic_idx] <- log(35)
## logistic p2 (a95)
lower[names(lower) == 'log_fsh_slx_pars'][p2_logistic_idx] <- log(60)
## normal p1 (mean)
lower[names(lower) == 'log_fsh_slx_pars'][p1_norm_idx] <- log(15)
## normal p2 (sd)
lower[names(lower) == 'log_fsh_slx_pars'][p2_norm_idx] <- log(1)
## gamma shape (k*theta equals mean)
lower[names(lower) == 'log_fsh_slx_pars'][p1_gamma_idx] <- log(15)
## gamma rate
lower[names(lower) == 'log_fsh_slx_pars'][p2_gamma_idx] <- log(2)
#
#
# #* fsh slx upper bounds ----
# ## logistic p1 (a50)
upper[names(upper) == 'log_fsh_slx_pars'][p1_logistic_idx] <- log(60)
## logistic p2 (a95)
upper[names(upper) == 'log_fsh_slx_pars'][p2_logistic_idx] <- log(70)
## normal p1 (mean)
upper[names(upper) == 'log_fsh_slx_pars'][p1_norm_idx] <- log(65)
## normal p2 (sd)
upper[names(upper) == 'log_fsh_slx_pars'][p2_norm_idx] <- log(4)
## gamma shape (k*theta equals mean)
upper[names(upper) == 'log_fsh_slx_pars'][p1_gamma_idx] <- log(35)
## gamma rate
upper[names(upper) == 'log_fsh_slx_pars'][p2_gamma_idx] <- log(2)
#
# }
# array(exp(upper[names(upper) == 'log_fsh_slx_pars']), dim = dim(df$parms$log_fsh_slx_pars))
# array(exp(lower[names(lower) == 'log_fsh_slx_pars']), dim = dim(df$parms$log_fsh_slx_pars))
# # array(lower[names(lower) == 'log_fsh_slx_pars'], dim = dim = c(7,2,2))
## currently srv slx all logistic with a95, a50
nsurvsel = dim(df$parms$log_srv_slx_pars)[1]
## lower for everything
lower[names(lower) == 'log_srv_slx_pars'] <- log(0.0001)
## lower bound for p2 (a95)
lower[names(lower) == 'log_srv_slx_pars'][c(c(1:nsurvsel,17:(16+nsurvsel))+nsurvsel)] <- log(70)
## upper bound for p1 (a50 or mean)
upper[names(upper) == 'log_srv_slx_pars'][c(c(1:nsurvsel,17:(16+nsurvsel)))] <- log(70)
## upper bound for p2 (a95)
upper[names(upper) == 'log_srv_slx_pars'][c(c(1:nsurvsel,17:(16+nsurvsel))+nsurvsel)]  <- log(70)
lower[names(lower) == 'omega_0ij'] = 0
upper[names(upper) == 'omega_0ij'] = 1
## sanity check
## last five flts p2 should be 10; p2 for first 4 fleets should be > p1
##  p2 should be > p1
array(exp(upper[names(upper) == 'log_srv_slx_pars']), dim = dim(df$parms$log_srv_slx_pars))
## all zero and/or
array(exp(lower[names(lower) == 'log_srv_slx_pars']), dim = dim(df$parms$log_srv_slx_pars))
# upper[names(upper) == 'PSEL'] <- 9
# upper[names(upper) == 'logh'] <- log(0.999)
# upper[names(upper) == 'F0'] <- 2
return(list("upper"=upper, "lower"=lower))
}
bounds <- boundPars(obj, r0_lower = 10)
bounds
with(bounds, array(exp(lower[names(lower)=='log_fsh_slx_pars']), dim = c(7,2,2),
dimnames = list(df$fltnames_fish)))
rm(list = ls())
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
# df$v1 = 0.99; df$Fmax = 3;
# df$v1 = 0.7;  df$Fmax = 1.5;
df$v1 = 0.65; df$Fmax = 1.15;
df$niter = 20
df$yRun =  df$tEnd-1
df$mat_age <- rep(1e-5,df$nage)
df$selShape_fish[4:5] <-  -1 ## slx = 1.0 for all BC fisheries
mappy <- buildMap(toFix = c(3,5,8,10),
fixFlt = c("BC_TRAP","BC_TWL")) ## the numbers are in order of df$parms
## ~90s with full years
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v2L_1",'shire_v2L_1_16Nov')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
mappy
array(mappy[[3]],dim = c(7,2,2))
# df$v1 = 0.7;  df$Fmax = 1.5;
df$v1 = 0.65; df$Fmax = 1.15;
df$niter = 20
df$yRun =  df$tEnd-1
df$mat_age <- rep(1e-5,df$nage)
df$selShape_fish[4:5] <-  -1 ## slx = 1.0 for all BC fisheries
mappy <- buildMap(toFix = c(3,5,8,10),
fixFlt = c("BC_LL","BC_TRAP","BC_TWL")) ## the numbers are
array(mappy[[3]],dim = c(7,2,2))
## ~90s with full years
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj, r0_lower = 10)
with(bounds, array(exp(upper[names(upper)=='log_fsh_slx_pars']), dim = c(7,2,2),
dimnames = list(df$fltnames_fish)))
with(bounds, array(exp(lower[names(lower)=='log_fsh_slx_pars']), dim = c(7,2,2),
dimnames = list(df$fltnames_fish)))
bounds
bounds
source(here("R","functions",'load_files_OM.R'))
bounds <- boundPars(obj, r0_lower = 10)
with(bounds, array(exp(upper[names(upper)=='log_fsh_slx_pars']), dim = c(7,2,2),
dimnames = list(df$fltnames_fish)))
with(bounds, array(exp(lower[names(lower)=='log_fsh_slx_pars']), dim = c(7,2,2),
dimnames = list(df$fltnames_fish)))
rm(list =ls())
## OM_Master.R
## M S Kapur
## Inspiration from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v2L_1_16Nov",'shire_v3L')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
# df$v1 = 0.99; df$Fmax = 3;
# df$v1 = 0.7;  df$Fmax = 1.5;
df$v1 = 0.65; df$Fmax = 1.15;
df$niter = 20
df$yRun =  df$tEnd-1
df$mat_age <- rep(1e-5,df$nage)
df$selShape_fish[4:5] <-  -1 ## slx = 1.0 for all BC fisheries
mappy <- buildMap(toFix = c(3,5,8,10),
fixFlt = c("BC_LL","BC_TRAP","BC_TWL")) ## the numbers are in order of df$parms
## ~90s with full years
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
obj$fn(
)
obj$hessian
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-11-19-59y_v2L_1_16Nov_M=1e-05_Fon_SurvOff_BCSelexOff/opt.rdata")
opt$par
grep('map',obj)
grep('map',opt)
?sink
sink("metadata.txt"))
sink("metadata.txt")
years <- 1960:2019
nyear <- length(years)
tEnd <- length(years)
age <- 0:70
nage <- length(age)
cat('years \t',years,'\n')
cat('age \t',age,'\n')
cat(' \t',mappy,'\n')
lapply(mappy,cat)
sink()
## create and save metadata
sink(paste0(dumpfile,"metadata.txt"))
sink("metadata.txt")
cat('years \t',years,'\n')
cat('age \t',age,'\n')
for(l in 1:length(mappy)) cat(mappy[[l]],'\n')
sink()
mappy[[l]]
sink(paste0(dumpfile,"metadata.txt"))
cat('years \t',nyear,'\n')
cat('age \t',nage,'\n')
cat( as.data.frame(do.call(rbind, LS)),"\n")
sink()
sink(paste0(dumpfile,"metadata.txt"))
cat('years \t',nyear,'\n')
cat('age \t',nage,'\n')
cat( as.data.frame(do.call(rbind, mappy)),"\n")
sink()
as.data.frame(do.call(rbind, mappy))
mappy
rm(opt)
rm(rep)
array(exp(obj$par[names(obj$par)=='log_fsh_slx_pars']),
dim = c(7,2,2))
bounds
bounds <- boundPars(obj, r0_lower = 10)
with(bounds, array(exp(upper[names(upper)=='log_fsh_slx_pars']), dim = c(7,2,2),
dimnames = list(df$fltnames_fish)))
with(bounds, array(exp(lower[names(lower)=='log_fsh_slx_pars']), dim = c(7,2,2),
dimnames = list(df$fltnames_fish)))
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
rm(list = ls())
## OM_Master.R
## M S Kapur
## Inspiration from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v2L_1_16Nov",'shire_v3L')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
# df$v1 = 0.99; df$Fmax = 3;
# df$v1 = 0.7;  df$Fmax = 1.5;
df$v1 = 0.65; df$Fmax = 1.15;
df$niter = 20
df$yRun =  df$tEnd-1
df$mat_age <- rep(1e-5,df$nage)
# df$selShape_fish[4:5] <-  -1 ## slx = 1.0 for all BC fisheries
mappy <- buildMap(toFix = c(3,5,10)) #,
mappy
# df$selShape_fish[4:5] <-  -1 ## slx = 1.0 for all BC fisheries
mappy <- buildMap(toFix = c(3,5)) #,
## ~90s with full years
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(rep1 <- obj$report()) ## one off caclulation using start pars
rep1$fsh_slx_yafs[1,,2,1]; rep1$fsh_slx_yafs[1,,3,1];
rep1$fsh_slx_yafs[1,,4,1]; rep1$fsh_slx_yafs[1,,5,1]
head(round(rep1$catch_yf_pred,2)/round(df$catch_yf_obs[,2:(1+df$nfleets_fish)],2),df$yRun)
df$selShape_fish
df$selType_fish
plot(rep1$fsh_slx_yafs[1,,3,1])
plot(rep1$fsh_slx_yafs[1,,4,1])
plot(rep1$fsh_slx_yafs[1,,5,1])
plot(rep1$fsh_slx_yafs[1,,2,1])
plot(rep1$fsh_slx_yafs[1,,1,1])
plot(rep1$fsh_slx_yafs[1,,6,1])
plot(rep1$fsh_slx_yafs[1,,7,1])
bounds <- boundPars(obj, r0_lower = 10)
with(bounds, array(exp(upper[names(upper)=='log_fsh_slx_pars']), dim = c(7,2,2),
dimnames = list(df$fltnames_fish)))
with(bounds, array(exp(lower[names(lower)=='log_fsh_slx_pars']), dim = c(7,2,2),
dimnames = list(df$fltnames_fish)))
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)

obj = obj,
opt = opt,
rep=rep,
cppname =cppname,
mappy = mappy,
runname = paste0("-",df$yRun,"y_",
cppname,
"_tildeR_yON",
"_onlyAKVASTEest95blk",
"_B_y0_off"))
paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))
## OM_Master.R
## M S Kapur
## Inspiration & code guidance from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c('shire_v4')[1]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6,
move = TRUE,
b_y_max = 0.109) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-  df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <- df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
# df$parms$b_y <- rep(0,df$tEnd) ## no ramp right now.
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-1] )))
# mappy$logh_k <- factor(c(NA,NA,2,3)) ##  fix WC regs
# mappy$b_y <- factor(c(1,rep(NA,59))) ## enable estimation of year 1 b_y ## consider mirroring for these guys
# mappy$tildeR
df$srv_blks
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred/df$surv_yf_obs
# dat$catch_yf_pred_total/df$catch_yf_obs[,2:ncol(df$catch_yf_obs)]
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(justPlots = FALSE,
dat=dat,
obj = obj,
opt = opt,
rep=rep,
cppname =cppname,
mappy = mappy,
runname = paste0("-",df$yRun,"y_",
cppname,
"_tildeR_yON",
"_onlyAKVASTWest",
"_B_y0_off"))
exp(3.688)
exp(4.24)
## OM_Master.R
## M S Kapur
## Inspiration & code guidance from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c('shire_v4')[1]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
library(TMB)
install.packages('TMB')
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
dllUSE = c('shire_v4')[1]
library(ggsidekick)
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6,
move = TRUE,
b_y_max = 0.109) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-  df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <- df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
# df$parms$b_y <- rep(0,df$tEnd) ## no ramp right now.
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-1] )))
devtools::install_github("jakelawlor/PNWColors")
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6,
move = TRUE,
b_y_max = 0.109) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-  df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <- df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
# df$parms$b_y <- rep(0,df$tEnd) ## no ramp right now.
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-1] )))
array(mappy$log_fsh_slx_pars, dim = c(df$nfleets_fish,2,max(df$fsh_blks_size),2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))
# df$parms$b_y <- rep(0,df$tEnd) ## no ramp right now.
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-c(1,2)] )))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-c(1,2)]
# df$parms$b_y <- rep(0,df$tEnd) ## no ramp right now.
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-c(1,2)] )))
mappy
array(mappy$log_fsh_slx_pars, dim = c(df$nfleets_fish,2,max(df$fsh_blks_size),2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
array(mappy$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
df$fltnames_acomp
df$fltnames_fish
## Fleet [names and nfleets] ----
## build fleets
## makes the master flag_fleets matrix
## and attendant indices for subsetting
fltnames <- read.table(here("input","input_data","OM_fleetnames.txt"), header = TRUE) ## this is like flag_fleets
fltnames$NAME[fltnames$COMM]
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
df$fltnames_acomp
class(df$fltnames_acomp)
df$fltnames_acomp <- list(df$fltnames_acomp)
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
source('C:/Users/mkapur/Dropbox/UW/sab-mse/R/functions/load_data_OM.R')
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
df <- load_data_OM(nspace = 6,
move = TRUE,
b_y_max = 0.109) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-  df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <- df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
compile(here("TMB",paste0(dllUSE,".cpp")))
## Inspiration & code guidance from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c('shire_v4')[1]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6,
move = TRUE,
b_y_max = 0.109) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-  df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
# df$parms$b_y <- rep(0,df$tEnd) ## no ramp right now.
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-c(1,2)] )))
array(mappy$log_fsh_slx_pars, dim = c(df$nfleets_fish,2,max(df$fsh_blks_size),2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
array(mappy$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
df$yRun <- df$tEnd ## number of years to run model
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
df[which(is.na(df))]
df[which(is.na(df)),]
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
install.packages('TMBhelper')
devtools::install_github('kasr/TMBHelper')
devtools::install_github('kaskr/TMBHelper')
devtools::install_github('kaskr/TMB_contrib_R/TMBHelper')
?MakeADFun
?nlminb
system.time(opt <- nlminb(
obj$par,
obj$fn,
obj$gr,
hessian = NULL,
control = list(eval.max = 1e6, iter.max = 1e6, rel.tol = 1e-4)
)
)
system.time(opt <- nlminb(
obj$par,
obj$fn,
obj$gr,
lower = bounds$lower,
upper = bounds$upper,
hessian = NULL,
control = list(eval.max = 1e6, iter.max = 1e6, rel.tol = 1e-4)
)
)
opt
opt$par == obj$par
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred/df$surv_yf_obs
best
dat <- obj$report(par = best)
dat$surv_yf_pred/df$surv_yf_obs
df$surv_yf_obs
dat$surv_yf_pred
rm(opt)
system.time(opt <- nlminb(
obj$par,
obj$fn,
obj$gr,
lower = bounds$lower,
upper = bounds$upper,
hessian = NULL,
control = list(eval.max = 1e6, iter.max = 1e6, rel.tol = 1e-4)
)
)
system.time(opt <- nlminb(
obj$par,
obj$fn,
obj$gr,
lower = bounds$lower,
upper = bounds$upper,
hessian = NULL,
# control = list(eval.max = 1e6, iter.max = 1e6, rel.tol = 1e-4)
)
)
opt
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred
df$yRun
system.time(rep1 <- obj$report()) ## one off caclulation using start pars
rep1$Length_yais_end[4,c(1,2,65:71),1,1]
rep1$surv_yf_pred
mappy
rep1$catch_yf_pred_total
rep1$R_yk
rep1$fsh_slx_yafs
# df$parms$b_y <- rep(0,df$tEnd) ## no ramp right now.
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
# "log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-c(1,2)] )))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(rep1 <- obj$report()) ## one off caclulation using start pars
rep1$srv_slx_yafs
rep1$fsh_slx_yafs
df$parms$log_srv_slx_pars
class(df$parms$log_srv_slx_pars)
system.time(opt <- nlminb(
obj$par,
obj$fn,
obj$gr,
lower = bounds$lower,
upper = bounds$upper,
hessian = NULL,
# control = list(eval.max = 1e6, iter.max = 1e6, rel.tol = 1e-4)
)
)
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred
## M S Kapur
## Inspiration & code guidance from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c('shire_v4')[1]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6,
move = TRUE,
b_y_max = 0.109) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-  df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <- df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
# df$parms$b_y <- rep(0,df$tEnd) ## no ramp right now.
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( paste0(c(as.character(df$fltnames_surv),as.character(df$fltnames_acomp[c(2,4,5)])))[-c(1,2)] )))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(rep1 <- obj$report()) ## one off caclulation using start pars
rep1$N_yais_beg[,c(1,2,65:71),1,1]
# rep1$N_yais_mid[,c(1,2,65:71),1,1]
# rep1$N_yais_end[,c(1,2,65:71),1,1]
rep1$Length_yais_beg[4,c(1,2,65:71),1,1]
rep1$Length_yais_mid[4,c(1,2,65:71),1,1]
rep1$Length_yais_end[4,c(1,2,65:71),1,1]
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <- nlminb(
obj$par,
obj$fn,
obj$gr,
lower = bounds$lower,
upper = bounds$upper,
hessian = NULL,
# control = list(eval.max = 1e6, iter.max = 1e6, rel.tol = 1e-4)
)
)
obj$par
obj$par==opt$par
obj$par
opt$par
exp(opt$par[names(opt$par) == 'log_srv_slx_pars'])
exp(obj$par[names(opt$par) == 'log_srv_slx_pars'])
dat$surv_yf_pred
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred
rep1$surv_yf_pred
class(df$parms$log_fsh_slx_pars[1])
class(df$parms$log_fsh_slx_pars[5])
class(df$parms$log_fsh_slx_pars[10])
rep1$catch_yf_pred_total
df$parms$log_fsh_slx_pars
exp(1)
exp(3.4)
exp(1.414)
runExample(all=TRUE)

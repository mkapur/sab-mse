if(is.na(   LengthAge_alyi_beg[a,LBins,y,i])) stop('NA ON ', a,l,y,i,"\n")
} ## end ages
} ## end nspace
## Hybrid F tuning  ----
# v1 <- 0.99;   Fmax <- 3; ##corresponds to an Fmax of 3
# v1 = 0.865; Fmax <- 2##corresponds to an Fmax of 2
# v1 = 0.7; Fmax = 1.5
v1 = 0.65; Fmax <- 1.15
# v1 = 0.25
v2 <- 30;
catch_afk_TEMP <- array(0, dim = c(nage, nfleets_fish, niter+1)) ## storage for intermediate guesses
Adj <- Z_a_TEMP <- Z_a_TEMP2 <- NULL
for(fish_flt in 1:nfleets_fish){
catch_yaf_pred[y,,fish_flt] <- catch_yf_pred[y,fish_flt] <- catch_yfi_pred[y,fish_flt,] <- 0
## make an initial guess for Ff using obs catch - need to update selex whihc is 1.0 now
denom = 0
for(i in 1:nspace){
denom <- denom + (phi_if_fish[fish_flt, i] *
sum(N_yai_beg[y,,i])*
sum(wage_catch[,y]) * 1.0 +
catch_yf_obs[y, fish_flt+1])
}
F1_yf[y, fish_flt, 1] <-    catch_yf_obs[y, fish_flt+1]/denom
latest_guess <-    F1_yf[y, fish_flt, 1]
## iterative tuning
for(k in 2:(niter+1)){
## modify the guess Eq 20
term0 = 1/(1+exp(v2*( latest_guess - v1)));
term1 = latest_guess*term0;
term2 = v1*(1-term0);
F1_yf[y,fish_flt,k] = -log(1-(term1+term2))
# Predicted catches @ F Eq 21; need to add SELEX
for(i in 1:nspace){
for(a in 1:nage){
Z_a_TEMP[a] <- F1_yf[y,fish_flt,k] + M[a]
catch_afk_TEMP[a,fish_flt,k] <-     catch_afk_TEMP[a,fish_flt,k] +
(F1_yf[y,fish_flt,k]/(Z_a_TEMP[a]))*(1-exp(-Z_a_TEMP[a]))*
phi_if_fish[fish_flt, i]*
N_yai_beg[y,a,i]*1.0*
wage_catch[a,i]
} ## end ages
} ## end space
## Calc Adj Eq 22
Adj[k] <- catch_yf_obs[y, fish_flt+1]/sum(catch_afk_TEMP[,fish_flt,k])
## Get new Z given ADJ - need to add discard and selex here
for(a in 1:nage) Z_a_TEMP2[a] <-  Adj[k]*F1_yf[y,fish_flt,k] +  M[a]
## Second Guess for F (EQ 24)
denom = 0
for(i in 1:nspace){
for(a in 1:nage){
denom <- denom + phi_if_fish[fish_flt, i] *
N_yai_beg[y,a,i]*
wage_catch[a,y] * 1.0 *(1-exp(-Z_a_TEMP2[a])) * (F1_yf[y,fish_flt,k]/(Z_a_TEMP2[a]))
}
}
# F2_yf[y, fish_flt, k] <- F2_yf[y, fish_flt, k-1] + catch_yf_obs[y, fish_flt+1]/denom
F2_yf[y, fish_flt, k] <- catch_yf_obs[y, fish_flt+1]/denom
## Modify the guess again Eq 25
term0 = 1/(1+exp(v2*( F2_yf[y,fish_flt,k] - v1)));
term1 = F2_yf[y,fish_flt,k]*term0;
term2 = v1*(1-term0);
F2_yf[y,fish_flt,k] = -log(1-(term1+term2))
# cat(F2_yf[y,fish_flt,k],"\n")
latest_guess <- F2_yf[y,fish_flt,k]
} ## end hybrid F iterations
## Define F, Z and predicted catches ----
Freal_yf[y, fish_flt] <- latest_guess ## final as Freal_yf
## annoying multi-loops for F in area
N_avail_yf[y,fish_flt] <- 0
## get total N exploitable by this fleet
for(i in 1:nspace){
N_avail_yf[y,fish_flt] <- N_avail_yf[y,fish_flt] + sum( phi_if_fish[fish_flt, i]*
N_yai_beg[y,,i])
}
## get ratio of N in area & reweight F
## will just return Freal and 0 for single-area fisheries
for(i in 1:nspace){
N_weight_yfi[y,fish_flt, i] <- sum(phi_if_fish[fish_flt, i]*  N_yai_beg[y,,i])/
N_avail_yf[y,fish_flt]
F_area_yfi[y,fish_flt,i] <- Freal_yf[y, fish_flt]*N_weight_yfi[y,fish_flt, i]
}
for(i in 1:nspace){
for(a in 1:nage){
Zreal_ya[y,a] <-   Freal_yf[y, fish_flt] + M[a] ## should this include all flets?
catch_yaf_pred[y,a,fish_flt] <- catch_yaf_pred[y,a,fish_flt] +
(Freal_yf[y, fish_flt]/(Zreal_ya[y,a]))*(1-exp(-Zreal_ya[y,a]))*
phi_if_fish[fish_flt, i]*
N_yai_beg[y,a,i]*
1.0*
wage_catch[a,i]
Zreal_yai[y,a,i]  <- F_area_yfi[y,fish_flt,i] + M[a]
catch_yaif_pred[y,a,i,fish_flt] <- (F_area_yfi[y,fish_flt,i]/
(  Zreal_yai[y,a,i] ))*(1-exp(-  Zreal_yai[y,a,i] ))*
phi_if_fish[fish_flt, i]*
N_yai_beg[y,a,i]*
1.0*
wage_catch[a,i]
} ## end ages for predicted catch
catch_yfi_pred[y,fish_flt,i] <- sum(catch_yaif_pred[y,,i,fish_flt])
} ## end nspace for predicted catch
catch_yf_pred[y,fish_flt] <- sum(catch_yaf_pred[y,,fish_flt])
} ## end fishery fleets
cat( Freal_yf[y, fish_flt],fish_flt,"\n")
## survey biomass ----
## Estimate survey biomass at midyear
for( sur_flt in 1:nfleets_surv){
Nsamp_acomp_yf[y,sur_flt] <- survey_yf_pred[y,sur_flt] <- 0
for(i in 1:nspace){
for(a in 1:nage){
## need selex here
survey_yf_pred[y,sur_flt] <-  survey_yf_pred[y,sur_flt] +
1.0*wage_survey[a,y]*phi_if_surv[sur_flt,i]*N_yai_mid[y,a,i]*q; ## need to include phi matrix to conditionally sum biomass over i
Nsamp_acomp_yf[y,sur_flt] <-  Nsamp_acomp_yf[sur_flt]  +
1.0*phi_if_surv[sur_flt,i]*N_yai_mid[y,a,i]; ## To use with age comps; may need to change phi to sum acomp surveys
} ## end surv fleets
} ## end ages
} ## end nspace
## survey age comps w error
## age comps in catches
# Catch_yaf_est(y,a,fish_flt) = (Freal_yf(a)/(Z(a)))*(1-exp(-Z(a)))*
#   phi_if_fish(fish_flt, i)* N_yai_beg(y,a,i)*wage_catch(a,y); ## do this by fleet with phi
# CatchN_yaf(y,a,fish_flt) = (Freal_yf(a)/(Z(a)))*(1-exp(-Z(a)))* phi_if_fish(fish_flt, i)* N_yai_beg(y,a,i);## Calculate the catch in kg
# Catch_yf_est(y,fish_flt)= Catch_yf_est[y,a,fish_flt] + Catch_yaf_est(y,a,fish_flt); ## sum over the current catch at age
# CatchN(y,fish_flt) <- CatchN_yaf[y,a,] CatchN_yaf(y,a,fish_flt);
} ## END YEARS
## new option - by area weighted Fs
catch_yf_predt <- data.frame(matrix(NA, nrow = tEnd, ncol = nfleets_fish))
for(flt in 1:nfleets_fish){
for(y in 1:(tEnd-1)){
catch_yf_predt[y,flt] <- sum(catch_yfi_pred[y,flt,])
}
}
## old option -- fleet -specific
# catch_yf_predt <- data.frame(catch_yf_pred)[1:(tEnd-1),]
names(catch_yf_predt) <- paste('Fleet',1:3)
catch_yf_predt <- catch_yf_predt %>%
mutate(Year = 1:nrow(catch_yf_predt)) %>%
melt(id = 'Year') %>%
mutate(Type = 'PRED')
catch_yf_obst<- catch_yf_obs[1:52,]%>%  data.frame() %>%select(-X1)
names(catch_yf_obst) <- paste('Fleet',1:3)
catch_yf_obst <- catch_yf_obst %>%
mutate(Year = 1:52) %>%
melt(id = 'Year') %>%
## convert CV to SD via CV = mean/sd
mutate(Type = 'OBS',
lci = value - 1.96*(0.1*value),
uci = value + 1.96*(0.1*value))
ggplot(data = catch_yf_obst, aes(x = Year, y = value, color = variable)) +
geom_line(data = catch_yf_predt, lwd = 0.75) +
scale_color_manual(values = c('blue','blue1','blue2')) +
geom_point(pch = 1, fill = NA, col = 'black') +
geom_errorbar(aes(ymin = lci, ymax = uci), col = 'black') +
theme_sleek() + theme(legend.position = 'none')+
labs(y = 'Catch (lbs)', color = 'Fishing Fleet') +
facet_wrap(~variable, scales = "free_y")
Freal_yf
Freal_yf[,2]
plot(Freal_yf[,2] ~ F_area_yfi[,2,1])
lines(0,1,color = 'red')
lines(0,1,col = 'red')
lines(0,1,col = 'red')
abline(0,1,col = 'red')
plot(Freal_yf[,2] ~ F_area_yfi[,2,1]+F_area_yfi[,2,2])
F_area_yfi[,2,1]+F_area_yfi[,2,2]
plot(Freal_yf[,2] ~ F_area_yfi[,2,1]+F_area_yfi[,2,2])
sum(F_area_yfi[,2,1]+F_area_yfi[,2,2])
## new option - by area weighted Fs
catch_yf_predt <- data.frame(matrix(NA, nrow = tEnd, ncol = nfleets_fish))
for(flt in 1:nfleets_fish){
for(y in 1:(tEnd-1)){
catch_yf_predt[y,flt] <- sum(catch_yfi_pred[y,flt,])
}
}
plot(Freal_yf[,2] ~ catch_yf_predt[,2])
abline(0,1,col = 'red')
plot(Freal_yf[,2] ~ catch_yf_predt[,2])
abline(0,1,col = 'red')
F_area_yfi[,2,]
plot(Freal_yf[,2] ~ rowsums(F_area_yfi[,2,]))
plot(Freal_yf[,2] ~ rowSums(F_area_yfi[,2,]))
abline(0,1,col = 'red',add = TRUE)
## comparing options
plot(Freal_yf[,2] ~ rowSums(F_area_yfi[,2,]),
xlab = 'New Method sum of F x fleet x Area', ylab = 'old method F_fleet')
abline(0,1,col = 'red',add = TRUE)
plot(catch_yf_pred[,2] ~   catch_yf_predt[y,flt],
xlab = 'New Method sum of F x fleet x Area', ylab = 'old method F_fleet')
plot(catch_yf_pred[,2] ~   catch_yf_predt[,2],
xlab = 'New Method sum of F x fleet x Area', ylab = 'old method F_fleet')
abline(0,1,col = 'red',add = TRUE)
plot(catch_yf_pred[,1] ~   catch_yf_predt[,1],
xlab = 'New Method sum of F x fleet x Area', ylab = 'old method F_fleet')
abline(0,1,col = 'red',add = TRUE)
plot(catch_yf_pred[,2] ~   catch_yf_predt[,2],
xlab = 'New Method sum of F x fleet x Area', ylab = 'old method F_fleet')
abline(0,1,col = 'red',add = TRUE)
Zreal_yai[,,]
## start year loop ----
for(y in 1:(tEnd-1)){
cat(y,"\n")
## Year 0 ----
if(y == 1){
# for(k in 1:nstocks){
for(i in 1:nspace){
Length_yai_beg[1,1,i] <- 10
N_yai_beg[1,1,i] <- Ninit_ai[1,i]
N_yai_mid[1,1,i] <- N_yai_beg[1,1,i]*exp(-0.15)
for(a in 2:(nage-1)){ ## fill A0 in position 1 later
for(j in 1:nspace){
pLeave = 0.0;  NCome = 0.0; # // reset for new age
if(i != j){
pLeave = pLeave + X_ija[i,j,a]; #// will do 1-this for proportion which stay
NCome = NCome + X_ija[j,i,a]*Ninit_ai[a,j]; #// actual numbers incoming
}
} #// end subareas j
# // this is the synthesis syntax; 10 is placeholder for LMIN
# // likely need a lower L1 at age stock-specific and linear before that age
Length_yai_beg[y,a,i] = Linf_yk[1,phi_ik2[i]]+(10-Linf_yk[1,phi_ik2[i]])*
exp(-kappa_yk[1,phi_ik2[i]]*a)
Length_yai_mid[y,a,i] = Linf_yk[1,phi_ik2[i]]+(10-Linf_yk[1,phi_ik2[i]])*
exp(-0.5*kappa_yk[1,phi_ik2[i]]*a)
N_yai_beg[y,a,i] = ((1-pLeave)*Ninit_ai[a,i] + NCome)*exp(-M[a])
} #// end ages
for(j in 1:nspace){
pLeave = 0.0;  NCome = 0.0; # // reset for new age
#   #// plus group includes those already at A AND age into A
if(i != j){
pLeave = pLeave + X_ija[i,j,nage]
# NCome = NCome + X_ija[j,i,nage]*(N_yai_beg[1,nage-1,j] + N_yai_beg[1,nage-1,j])  #// if M becomes spatial use M_aj here
NCome = NCome + X_ija[j,i,nage]*(Ninit_ai[nage,j] + Ninit_ai[nage-1,j])  #// if M becomes spatial use M_aj here
}
} #// end subareas j
N_yai_beg[y,nage,i] =  ((1-pLeave)*(Ninit_ai[nage,i] + Ninit_ai[nage-1,i]) +  NCome)*exp(-M[nage])
Length_yai_beg[y,nage,i] = Linf_yk[1,phi_ik2[i]]+(10-Linf_yk[1,phi_ik2[i]])*
exp(-kappa_yk[1,phi_ik2[i]]*nage-1)
Length_yai_mid[y,nage,i]  = Linf_yk[1,phi_ik2[i]]+(10-Linf_yk[1,phi_ik2[i]])*
exp(-0.5*kappa_yk[1,phi_ik2[i]]*nage-1)
} #// end subareas i
# } #// end stocks
} ## end y == 1
## SSB_y ----
for(i in 1:nspace){
# SSB_yi[y,i] = 0;SSB_yk[y,] = 0
for(a in 1:(nage)){
SSB_yi[y,i] <- SSB_yi[y,i] +  N_yai_beg[y,a,i]*wage_ssb[a,y]*0.5
# cat(  SSB_yi[y,i] +  N_yai_beg[y,a,i]*wage_ssb[a,y]*0.5,"\n")
# cat( SSB_yi[y,i],"\n")
for(k in 1:nstocks){
SSB_yk[y,k] <- SSB_yk[y,k] + phi_ik[k,i]*N_yai_beg[y,a,i]*wage_ssb[a,y]*0.5
} # // end stocks
} #// end ages
} #// end space
## A0 Recruits ----
# next year based on present SSB
omega_0ij <- rep(1, nspace)
for(i in 1:nspace){
for(k in 1:nstocks){
# // SSB_yk already has summation
R_yk[y,k] = (4*h_k[k]*R_0k[k]*SSB_yk[y,k]
/(SSB_0k[k]*(1-h_k[k])+
SSB_yk[y,k]*(5*h_k[k]-1)))*exp(-0.5*b[y]*SDR*SDR+tildeR_yk[y,k])
# if(R_yk[y,k] == 0) stop(paste("RYK IS ZER ON,",y,k,"\n"))
} # // end stocks
R_yi[y,i] = R_yk[y,phi_ik2[i]]*tau_ik[phi_ik2[i],i]*omega_0ij[i] #// downscale to subarea including age-0 movement
N_yai_beg[y+1,1,i] =  R_yi[y,i] #// fill age-0 recruits
} ### end space
#N- and Nominal Length ----
# at-age for the middle of this year and beginning of next
for(i in 1:nspace){
N_yai_mid[y,1,i] <- N_yai_beg[y,1,i]*exp(-0.15)
for(a in 2:(nage-1)){ ## note that TMB starts at pos 1 which is age 1 which is pos 2 here
pLeave = 0.0;  NCome = 0.0
for(j in 1:nspace){
if(i != j){
pLeave = pLeave + X_ija[i,j,a]; ### will do 1-this for proportion which stay
NCome = NCome + X_ija[j,i,a]*N_yai_beg[y,a,j]; ### actual numbers incoming
}
} ### end subareas j
N_yai_mid[y,a,i] = N_yai_beg[y,a,i]*exp(-0.15)
N_yai_beg[y+1,a,i] = ((1-pLeave)*N_yai_beg[y,a-1,i] + NCome)*exp(-0.15) ## this exponent needs to be Ztuned eventually
Length_yai_beg[y,1,i] <- 10 ## another LMIN placeholder
## as in document: next year A1 == this year A0 plus growth
Length_yai_beg[y+1,a,i] = Length_yai_beg[y,a-1,i] + (Linf_yk[y,phi_ik2[i]]-Length_yai_beg[y,a-1,i])*(1-exp(-kappa_yk[y,phi_ik2[i]]))
Length_yai_mid[y,a,i] = Length_yai_beg[y,a,i] + (Linf_yk[y,phi_ik2[i]]-Length_yai_beg[y,a,i]*
(1-exp(-0.5*kappa_yk[y,phi_ik2[i]])))
} ## end ages
# ## plus groups
pLeave = 0.0;  NCome = 0.0
for(j in 1:nspace){
if(i != j){
pLeave <- pLeave + X_ija[i,j,nage-1]
NCome <- NCome + X_ija[j,i,nage-1]*(N_yai_beg[y,nage,j] + N_yai_beg[y,nage-1,j])
} ## end i != j
} ## end subareas j
N_yai_mid[y,nage,i] = N_yai_beg[y,nage,i]*exp(-0.15)
N_yai_beg[y+1,nage,i] =   ((1-pLeave)*( N_yai_beg[y,nage,i]+ N_yai_beg[y,nage-1,i]) + NCome)*exp(-0.15);
## plus group weighted average (we already have the numbers at age)
Length_yai_beg[y+1,nage,i] = ( N_yai_beg[y+1,nage-1,i]*
(Length_yai_beg[y,nage-1,i]+
(Linf_yk[y,phi_ik2[i]]-Length_yai_beg[y,nage-1,i]*(1-exp(-kappa_yk[y,phi_ik2[i]])))) +
N_yai_beg[y+1,nage-1,i]*
(Length_yai_beg[y,nage,i]+
(Linf_yk[y,phi_ik2[i]]-Length_yai_beg[y,nage,i])*(1-exp(-kappa_yk[y,phi_ik2[i]]))))/
(N_yai_beg[y+1,nage-1,i] + N_yai_beg[y+1,nage,i])
#
Length_yai_mid[y+1,nage,i] = (N_yai_mid[y+1,nage-1,i]*
(Length_yai_beg[y,nage-1,i]+(Linf_yk[y,phi_ik2[i]]-Length_yai_beg[y,nage-1,i]*(1-exp(-0.5*kappa_yk[y,phi_ik2[i]])))) +
N_yai_mid[y+1,nage,i]*
(Length_yai_beg[y,nage,i]+(Linf_yk[y,phi_ik2[i]]-Length_yai_beg[y,nage,i])*(1-exp(-0.5*kappa_yk[y,phi_ik2[i]]))))/
(N_yai_mid[y,nage-1,i] + N_yai_mid[y,nage,i])
} ## end subareas i
## reweight length-at-age based on movement from other stocks ----
for(i in 1:nspace){
for(a in 2:(nage)){ ## note that TMB starts at pos 1 which is age 1 which is pos 2 here
LCome = 0.0; NCome = 0.0
for(j in 1:nspace){
if(i != j){
LCome = LCome + phi_ij[i,j]*N_yai_beg[y,a,j]*Length_yai_beg[y,a,j] ## for numerator
NCome = NCome + phi_ij[i,j]*N_yai_beg[y,a,j] ## for denom
}
} ## end subareas j
Length_yai_beg[y+1,a,i] = (N_yai_beg[y,a,i]*Length_yai_beg[y,a,i] + LCome)/(N_yai_beg[y,a,i]+NCome)
} ## end ages
} ## end subareas i
## prob of length-at-age
for(i in 1:nspace){
for(a in 1:(nage)){
LengthAge_alyi_beg[a,1,y,i] = pnorm(1,  Length_yai_beg[y,a,i], sigmaG_yk[y,phi_ik2[i]]);
LengthAge_alyi_mid[a,1,y,i] = pnorm(1,  Length_yai_mid[y,a,i], sigmaG_yk[y,phi_ik2[i]]);
for(l in 2:(LBins-1)){
LengthAge_alyi_beg[a,l,y,i] = pnorm(l+1,  Length_yai_beg[y,a,i], sigmaG_yk[y,phi_ik2[i]]) -
pnorm(l,  Length_yai_beg[y,a,i], sigmaG_yk[y,phi_ik2[i]])
LengthAge_alyi_mid[a,l,y,i] = pnorm(l+1,  Length_yai_mid[y,a,i], sigmaG_yk[y,phi_ik2[i]]) -
pnorm(l,  Length_yai_mid[y,a,i], sigmaG_yk[y,phi_ik2[i]])
} ## end LBins
LengthAge_alyi_beg[a,LBins,y,i] = 1-pnorm(LBins, Length_yai_beg[y,a,i], sigmaG_yk[y,phi_ik2[i]]);
LengthAge_alyi_mid[a,LBins,y,i] = 1-pnorm(LBins, Length_yai_mid[y,a,i], sigmaG_yk[y,phi_ik2[i]]);
if(is.na(   LengthAge_alyi_beg[a,LBins,y,i])) stop('NA ON ', a,l,y,i,"\n")
} ## end ages
} ## end nspace
## Hybrid F tuning  ----
# v1 <- 0.99;   Fmax <- 3; ##corresponds to an Fmax of 3
# v1 = 0.865; Fmax <- 2##corresponds to an Fmax of 2
# v1 = 0.7; Fmax = 1.5
v1 = 0.65; Fmax <- 1.15
# v1 = 0.25
v2 <- 30;
catch_afk_TEMP <- array(0, dim = c(nage, nfleets_fish, niter+1)) ## storage for intermediate guesses
Adj <- Z_a_TEMP <- Z_a_TEMP2 <- NULL
for(fish_flt in 1:nfleets_fish){
catch_yaf_pred[y,,fish_flt] <- catch_yf_pred[y,fish_flt] <- catch_yfi_pred[y,fish_flt,] <- 0
## make an initial guess for Ff using obs catch - need to update selex whihc is 1.0 now
denom = 0
for(i in 1:nspace){
denom <- denom + (phi_if_fish[fish_flt, i] *
sum(N_yai_beg[y,,i])*
sum(wage_catch[,y]) * 1.0 +
catch_yf_obs[y, fish_flt+1])
}
F1_yf[y, fish_flt, 1] <-    catch_yf_obs[y, fish_flt+1]/denom
latest_guess <-    F1_yf[y, fish_flt, 1]
## iterative tuning
for(k in 2:(niter+1)){
## modify the guess Eq 20
term0 = 1/(1+exp(v2*( latest_guess - v1)));
term1 = latest_guess*term0;
term2 = v1*(1-term0);
F1_yf[y,fish_flt,k] = -log(1-(term1+term2))
# Predicted catches @ F Eq 21; need to add SELEX
for(i in 1:nspace){
for(a in 1:nage){
Z_a_TEMP[a] <- F1_yf[y,fish_flt,k] + M[a]
catch_afk_TEMP[a,fish_flt,k] <-     catch_afk_TEMP[a,fish_flt,k] +
(F1_yf[y,fish_flt,k]/(Z_a_TEMP[a]))*(1-exp(-Z_a_TEMP[a]))*
phi_if_fish[fish_flt, i]*
N_yai_beg[y,a,i]*1.0*
wage_catch[a,i]
} ## end ages
} ## end space
## Calc Adj Eq 22
Adj[k] <- catch_yf_obs[y, fish_flt+1]/sum(catch_afk_TEMP[,fish_flt,k])
## Get new Z given ADJ - need to add discard and selex here
for(a in 1:nage) Z_a_TEMP2[a] <-  Adj[k]*F1_yf[y,fish_flt,k] +  M[a]
## Second Guess for F (EQ 24)
denom = 0
for(i in 1:nspace){
for(a in 1:nage){
denom <- denom + phi_if_fish[fish_flt, i] *
N_yai_beg[y,a,i]*
wage_catch[a,y] * 1.0 *(1-exp(-Z_a_TEMP2[a])) * (F1_yf[y,fish_flt,k]/(Z_a_TEMP2[a]))
}
}
# F2_yf[y, fish_flt, k] <- F2_yf[y, fish_flt, k-1] + catch_yf_obs[y, fish_flt+1]/denom
F2_yf[y, fish_flt, k] <- catch_yf_obs[y, fish_flt+1]/denom
## Modify the guess again Eq 25
term0 = 1/(1+exp(v2*( F2_yf[y,fish_flt,k] - v1)));
term1 = F2_yf[y,fish_flt,k]*term0;
term2 = v1*(1-term0);
F2_yf[y,fish_flt,k] = -log(1-(term1+term2))
# cat(F2_yf[y,fish_flt,k],"\n")
latest_guess <- F2_yf[y,fish_flt,k]
} ## end hybrid F iterations
## Define F, Z and predicted catches ----
Freal_yf[y, fish_flt] <- latest_guess ## final as Freal_yf
## annoying multi-loops for F in area
N_avail_yf[y,fish_flt] <- 0
## get total N exploitable by this fleet
for(i in 1:nspace){
N_avail_yf[y,fish_flt] <- N_avail_yf[y,fish_flt] + sum( phi_if_fish[fish_flt, i]*
N_yai_beg[y,,i])
}
## get ratio of N in area & reweight F
## will just return Freal and 0 for single-area fisheries
for(i in 1:nspace){
N_weight_yfi[y,fish_flt, i] <- sum(phi_if_fish[fish_flt, i]*  N_yai_beg[y,,i])/
N_avail_yf[y,fish_flt]
F_area_yfi[y,fish_flt,i] <- Freal_yf[y, fish_flt]*N_weight_yfi[y,fish_flt, i]
}
for(i in 1:nspace){
for(a in 1:nage){
Zreal_ya[y,a] <-   Freal_yf[y, fish_flt] + M[a] ## should this include all flets?
catch_yaf_pred[y,a,fish_flt] <- catch_yaf_pred[y,a,fish_flt] +
(Freal_yf[y, fish_flt]/(Zreal_ya[y,a]))*(1-exp(-Zreal_ya[y,a]))*
phi_if_fish[fish_flt, i]*
N_yai_beg[y,a,i]*
1.0*
wage_catch[a,i]
Zreal_yai[y,a,i]  <-  Zreal_ya[y,a] #F_area_yfi[y,fish_flt,i] + M[a]
catch_yaif_pred[y,a,i,fish_flt] <- (F_area_yfi[y,fish_flt,i]/
(  Zreal_yai[y,a,i] ))*(1-exp(-  Zreal_yai[y,a,i] ))*
phi_if_fish[fish_flt, i]*
N_yai_beg[y,a,i]*
1.0*
wage_catch[a,i]
} ## end ages for predicted catch
catch_yfi_pred[y,fish_flt,i] <- sum(catch_yaif_pred[y,,i,fish_flt])
} ## end nspace for predicted catch
catch_yf_pred[y,fish_flt] <- sum(catch_yaf_pred[y,,fish_flt])
} ## end fishery fleets
cat( Freal_yf[y, fish_flt],fish_flt,"\n")
## survey biomass ----
## Estimate survey biomass at midyear
for( sur_flt in 1:nfleets_surv){
Nsamp_acomp_yf[y,sur_flt] <- survey_yf_pred[y,sur_flt] <- 0
for(i in 1:nspace){
for(a in 1:nage){
## need selex here
survey_yf_pred[y,sur_flt] <-  survey_yf_pred[y,sur_flt] +
1.0*wage_survey[a,y]*phi_if_surv[sur_flt,i]*N_yai_mid[y,a,i]*q; ## need to include phi matrix to conditionally sum biomass over i
Nsamp_acomp_yf[y,sur_flt] <-  Nsamp_acomp_yf[sur_flt]  +
1.0*phi_if_surv[sur_flt,i]*N_yai_mid[y,a,i]; ## To use with age comps; may need to change phi to sum acomp surveys
} ## end surv fleets
} ## end ages
} ## end nspace
## survey age comps w error
## age comps in catches
# Catch_yaf_est(y,a,fish_flt) = (Freal_yf(a)/(Z(a)))*(1-exp(-Z(a)))*
#   phi_if_fish(fish_flt, i)* N_yai_beg(y,a,i)*wage_catch(a,y); ## do this by fleet with phi
# CatchN_yaf(y,a,fish_flt) = (Freal_yf(a)/(Z(a)))*(1-exp(-Z(a)))* phi_if_fish(fish_flt, i)* N_yai_beg(y,a,i);## Calculate the catch in kg
# Catch_yf_est(y,fish_flt)= Catch_yf_est[y,a,fish_flt] + Catch_yaf_est(y,a,fish_flt); ## sum over the current catch at age
# CatchN(y,fish_flt) <- CatchN_yaf[y,a,] CatchN_yaf(y,a,fish_flt);
} ## END YEARS
## new option - by area weighted Fs
catch_yf_predt <- data.frame(matrix(NA, nrow = tEnd, ncol = nfleets_fish))
for(flt in 1:nfleets_fish){
for(y in 1:(tEnd-1)){
catch_yf_predt[y,flt] <- sum(catch_yfi_pred[y,flt,])
}
}
names(catch_yf_predt) <- paste('Fleet',1:3)
catch_yf_predt <- catch_yf_predt %>%
mutate(Year = 1:nrow(catch_yf_predt)) %>%
melt(id = 'Year') %>%
mutate(Type = 'PRED')
catch_yf_obst<- catch_yf_obs[1:52,]%>%  data.frame() %>%select(-X1)
names(catch_yf_obst) <- paste('Fleet',1:3)
catch_yf_obst <- catch_yf_obst %>%
mutate(Year = 1:52) %>%
melt(id = 'Year') %>%
## convert CV to SD via CV = mean/sd
mutate(Type = 'OBS',
lci = value - 1.96*(0.1*value),
uci = value + 1.96*(0.1*value))
ggplot(data = catch_yf_obst, aes(x = Year, y = value, color = variable)) +
geom_line(data = catch_yf_predt, lwd = 0.75) +
scale_color_manual(values = c('blue','blue1','blue2')) +
geom_point(pch = 1, fill = NA, col = 'black') +
geom_errorbar(aes(ymin = lci, ymax = uci), col = 'black') +
theme_sleek() + theme(legend.position = 'none')+
labs(y = 'Catch (lbs)', color = 'Fishing Fleet') +
facet_wrap(~variable, scales = "free_y")
## comparing options
plot(Freal_yf[,2] ~ rowSums(F_area_yfi[,2,]),
xlab = 'New Method sum of F x fleet x Area', ylab = 'old method F_fleet')
abline(0,1,col = 'red',add = TRUE)
plot(catch_yf_pred[,2] ~   catch_yf_predt[,2],
xlab = 'New Method sum of F x fleet x Area', ylab = 'old method F_fleet')
abline(0,1,col = 'red',add = TRUE)
plot(catch_yf_pred[,2] ~   catch_yf_predt[,2],
xlab = 'New Method sum of F x fleet x Area', ylab = 'old method F_fleet')
catch_yf_predt
catch_yf_predt <- data.frame(matrix(NA, nrow = tEnd, ncol = nfleets_fish))
for(flt in 1:nfleets_fish){
for(y in 1:(tEnd-1)){
catch_yf_predt[y,flt] <- sum(catch_yfi_pred[y,flt,])
}
}
plot(catch_yf_pred[,2] ~   catch_yf_predt[,2],
xlab = 'New Method sum of F x fleet x Area', ylab = 'old method F_fleet')
abline(0,1,col = 'red',add = TRUE)
rm(list = ls())

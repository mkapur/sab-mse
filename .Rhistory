)
lapply(surveys, function(x) as.integer(colnames(x)))
dat$minAgePerFleet
dat$maxAgePerFleet
dat$idx1
ccdat <- SS_readdat(file = "./input/raw/CC_2019_100.00/data.ss")
ccdat$agecomp$fleet <-   ccdat$fleetnames[ccdat$agecomp$FltSvy ] ## rename fleets
ccdat$lencomp$fleet <-   ccdat$fleetnames[ccdat$lencomp$FltSvy ] ## rename fleets
ccdat$agecomp %>%
mutate(Year = Yr, subarea = NA, stock = NA, mgmt = "CC", type = 'age_comp' ) %>%
select(-Seas, - FltSvy, -Gender, -Part, -Ageerr, -Lbin_lo, -Yr, -Lbin_hi) %>%
select(Year, fleet, type, subarea,stock, mgmt, Nsamp, everything())
unique(ccdat$agecomp$fleet)
## METHOD 2
ccdat$agecomp %>%
mutate(Year = Yr, subarea = NA, stock = NA, mgmt = "CC", type = 'age_comp' ) %>%
select(-Seas, - FltSvy, -Gender, -Part, -Ageerr, -Lbin_lo, -Yr, -Lbin_hi) %>%
select(Year, fleet, type, subarea,stock, mgmt, Nsamp, everything()) %>%
split( . , f = fleet )
## METHOD 2
ccdat$agecomp %>%
mutate(Year = Yr, subarea = NA, stock = NA, mgmt = "CC", type = 'age_comp' ) %>%
select(-Seas, - FltSvy, -Gender, -Part, -Ageerr, -Lbin_lo, -Yr, -Lbin_hi) %>%
select(Year, fleet, type, subarea,stock, mgmt, Nsamp, everything()) %>%
group_split(fleet)
attr(dat, "idx1")
surveys
dat$nobs
dat$logobs
head(dat$idx1)
## format data
dat2 <- makeDat(surveys=surveys,
residual.fleet=cn,
prop.mature=mo,
stock.mean.weight=sw,
catch.mean.weight=cw,
dis.mean.weight=dw,
land.mean.weight=lw,
prop.f=pf,
prop.m=pm,
natural.mortality=nm,
land.frac=lf)
definit
data3 <- cleanCatch(dat2, conf)
data3
str(data3)
obj
obj <- MakeADFun(tmball, parameters, random = ran, DLL = "CopyOfstockassessment"
)
tmball <- c(data, conf, simFlag = as.numeric(sim.condRE))
tmball <- c(data, conf, simFlag = as.numeric(FALSE))
obj <- MakeADFun(tmball, parameters, random = ran, DLL = "CopyOfstockassessment"
)
rm.unidentified
if (length(conf$maxAgePlusGroup) == 1) {
tmp <- conf$maxAgePlusGroup
conf$maxAgePlusGroup <- modConfig(data)$maxAgePlusGroup
conf$maxAgePlusGroup[1] <- tmp
}
definit <- makePar(data, conf)
data = data2
data = data2
data = dat2
if (length(conf$maxAgePlusGroup) == 1) {
tmp <- conf$maxAgePlusGroup
conf$maxAgePlusGroup <- modConfig(data)$maxAgePlusGroup
conf$maxAgePlusGroup[1] <- tmp
}
definit <- makePar(data, conf)
if (!identical(parameters, relist(unlist(parameters), skeleton = definit))) {
warning("Initial values are not consistent, so running with default init values from makePars()")
parameters <- definit
}
data <- cleanCatch(data, conf)
parameters = pars
parameters = par
for (i in 1:length(confTmp)) {
if (!names(confTmp)[i] %in% names(conf)) {
conf[[length(conf) + 1]] = confTmp[[i]]
names(conf)[length(conf)] = names(confTmp)[i]
}
}
definit <- makePar(data, conf)
if (!identical(parameters, relist(unlist(parameters), skeleton = definit))) {
warning("Initial values are not consistent, so running with default init values from makePars()")
parameters <- definit
}
data <- cleanCatch(data, conf)
confTmp = modConfig(data) ## reconfig based on cleaned dat
for (i in 1:length(confTmp)) {
if (!names(confTmp)[i] %in% names(conf)) {
conf[[length(conf) + 1]] = confTmp[[i]]
names(conf)[length(conf)] = names(confTmp)[i]
}
}
tmball <- c(data, conf, simFlag = as.numeric(sim.condRE))
if (is.null(tmball$resFlag)) {
tmball$resFlag <- 0
}
nmissing <- sum(is.na(data$logobs))
parameters$missing <- numeric(nmissing)
ran <- c("logN", "logF", "missing")
obj <- MakeADFun(tmball, parameters, random = ran, DLL = "CopyOfstockassessment",
...)
obj <- MakeADFun(tmball, parameters, random = ran, DLL = "CopyOfstockassessment"
)
# Now we are ready to optimize the model. This function runs the TMB call
fit <- runMod(dat2,conf,par) ## currently calling CopyOfstockassessment
?predNFun
conf$stockRecruitmentModelCode
conf$keyLogFsta
conf$keyBiomassTreat
-1-1
dat$fleetTypes
conf$minAge
dat$aux[1,2]
dat$aux
dat$aux[1,]
dat$maxAgePerFleet
conf$maxAgePlusGroup
conf$keyQpow
conf$keyBiomassTreat
require(dplyr)
require(r4ss)
# Landings & Discards ----
ccbase <- SS_output("./input/raw/CC_2019_100.00/", forecast = FALSE, covar = FALSE) ## from STAR - possibly not the most updated
## METHOD 2 [SAM]
cc_catdis0 <- ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs)
cc_catdis0
## METHOD 2 [SAM]
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
write.csv(., file = paste0("input/temp/cc_catch_",Sys.Date(),".csv"), row.names = FALSE)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(fleet)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>%
save(., file = paste0("input/temp/cc_catch_",Sys.Date(),".Rdata"))
## these are sitting in input; the function is source()d in helpers.R
cn <- load("input/temp/cc_catch_2020-04-17.Rdata") ) ## list by fleet with single column for catches
## these are sitting in input; the function is source()d in helpers.R
cn <- load("input/temp/cc_catch_2020-04-17.Rdata")  ## list by fleet with single column for catches
cw <- read.ices("./input/ices_testing/cw.dat") ## catch weights by fleet-year
cn
?Sav
?Save
?Save
?save
## METHOD 2 [SAM]
cn <- ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name)
save(cn, file = paste0("input/temp/cc_catch_",Sys.Date(),".Rdata"))
rm(cn)
rm(cc_catdis0)
## these are sitting in input; the function is source()d in helpers.R
cn <- load("input/temp/cc_catch_2020-04-17.Rdata")  ## list by fleet with single column for catches
cn
load("input/temp/cc_catch_2020-04-17.Rdata")
cn
## format data
dat2 <- makeDat(fleets = cn,
surveys=surveys,
prop.mature=mo,
stock.mean.weight=sw,
catch.mean.weight=cw,
dis.mean.weight=dw,
land.mean.weight=lw,
prop.f=pf,
prop.m=pm,
natural.mortality=nm,
land.frac=lf)
surveys
read.csv("./input/raw/Indices_SS3_2020-01-23v3.csv")  %>% ## VAST stdization
distinct(Fleet, Year, Estimate_metric_tons, .keep_all = TRUE) %>% ## remove any dupes
filter(Fleet != "AllAreas") %>%
merge(.,spmat, by.x = "Fleet", by.y = "mgmt", all.y = FALSE) %>%
mutate(value = Estimate_metric_tons,
sigma = SD_log,
fleet = Fleet,
mgmt = fleet,
type = 'survey') %>%
select(Year, fleet, type, subarea, stock, mgmt, value, sigma) %>%
arrange(.,Year,fleet) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(fleet)
## spatial matrix -- for matching on region, stock, sub_area, etc
spmat <- data.frame(subarea = c('A1',"A2","B3","B2","B1","C2","C1"),
stock = c("R5","R4","R4","R3","R2","R2","R1"),
mgmt = c("AI","AK", rep("BC",3), rep("CC",2)))
read.csv("./input/raw/Indices_SS3_2020-01-23v3.csv")  %>% ## VAST stdization
distinct(Fleet, Year, Estimate_metric_tons, .keep_all = TRUE) %>% ## remove any dupes
filter(Fleet != "AllAreas") %>%
merge(.,spmat, by.x = "Fleet", by.y = "mgmt", all.y = FALSE) %>%
mutate(value = Estimate_metric_tons,
sigma = SD_log,
fleet = Fleet,
mgmt = fleet,
type = 'survey') %>%
select(Year, fleet, type, subarea, stock, mgmt, value, sigma) %>%
arrange(.,Year,fleet) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(fleet)
## survey - SAM format
surveys <- read.csv("./input/raw/Indices_SS3_2020-01-23v3.csv")  %>% ## VAST stdization
distinct(Fleet, Year, Estimate_metric_tons, .keep_all = TRUE) %>% ## remove any dupes
filter(Fleet != "AllAreas") %>%
merge(.,spmat, by.x = "Fleet", by.y = "mgmt", all.y = FALSE) %>%
mutate(value = Estimate_metric_tons,
sigma = SD_log,
fleet = Fleet,
mgmt = fleet,
type = 'survey') %>%
select(Year, fleet, type, subarea, stock, mgmt, value, sigma) %>%
arrange(.,Year,fleet) %>%
filter( fleet == 'CC') %>%
group_split(fleet)
save(surveys, file = paste0("input/temp/cc_surv_",Sys.Date(),".Rdata"))
surveys <- load("input/temp/cc_surv_2020-04-17.Rdata") #read.ices("./input/ices_testing/survey.dat")
makeDat(fleets = cn,
surveys=surveys
)
fleets = cn
fleet.idx <- 0
type <- NULL
time <- NULL
name <- NULL
corList <- list()
## columns are years, 1 row per fleet
idxCor <- matrix(NA, nrow = length(fleets) + length(surveys) +
1, ncol = nrow(natural.mortality))
colnames(idxCor) <- rownames(natural.mortality)
dat <- data.frame(year = NA, fleet = NA, age = NA, aux = NA)
weight <- NULL
doone <- function(m) { ## single fleet per input dataset
year <- rownames(m)[row(m)] ## rowNAMES are years
fleet.idx <<- fleet.idx + 1 ## updates for nesting as we move along
fleet <- rep(fleet.idx, length(year))
age <- as.integer(colnames(m)[col(m)]) ## assumes columns are age bins
aux <- as.vector(m) ## vectorize all contents
dat <<- rbind(dat, data.frame(year, fleet, age, aux)) ## reshape (again)...
if ("weight" %in% names(attributes(m))) {
weight <<- c(weight, as.vector(attr(m, "weight")))
}
else {
if ("cov" %in% names(attributes(m))) {
weigthTmp = do.call(rbind, lapply(attr(m, "cov"),
diag))
weight <<- c(weight, as.vector(weigthTmp))
}
else {
if ("cov-weight" %in% names(attributes(m))) {
weigthTmp = do.call(rbind, lapply(attr(m,
"cov-weight"), diag))
weight <<- c(weight, 1/as.vector(weigthTmp))
}
else {
weight <<- c(weight, rep(NA, length(year)))
}
}
}
if ("cov" %in% names(attributes(m))) {
attr(m, "cor") <- lapply(attr(m, "cov"), cov2cor)
}
if ("cov-weight" %in% names(attributes(m))) {
attr(m, "cor") <- lapply(attr(m, "cov-weight"),
cov2cor)
}
if ("cor" %in% names(attributes(m))) {
thisCorList <- attr(m, "cor")
whichCorOK <- which(unlist(lapply(thisCorList, function(x) !any(is.na(x)))))
thisCorList <- thisCorList[whichCorOK]
corList <<- c(corList, thisCorList)
nextIdx <- if (all(is.na(idxCor))) {
0
}
else {
max(idxCor, na.rm = TRUE)
}
idxCor[fleet.idx, colnames(idxCor) %in% rownames(m)][whichCorOK] <<- nextIdx:(nextIdx +
length(thisCorList) - 1)
}
}
if (!is.null(residual.fleet)) {
doone(residual.fleet) ## updates dat with this fleet info
type <- c(type, 0)
time <- c(time, 0)
name <- c(name, "Residual catch")
}
if (!is.null(fleets)) {
if (is.data.frame(fleets) | is.matrix(fleets)) {
doone(fleets)
type <- c(type, 1) ## 1 means fishery fleet
time <- c(time, 0)
name <- c(name, "Comm fleet")
}
else {
dummy <- lapply(fleets, doone)
type <- c(type, rep(1, length(fleets)))
time <- c(time, rep(0, length(fleets)))
name <- c(name, strtrim(gsub("\\s", "", names(dummy)),
50))
}
}
is.data.frame(fleets)
is.matrix(fleets)
fleets
class(fleet)
class(fleets)
dummy <- lapply(fleets, doone)
cn[-"Yr"]
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
add_rownames(Yr)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
rownames_to_column(Yr)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
tibble::rownames_to_column(Yr)
?tibble::rownames_to_column
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
`rownames<-`(Yr)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
`rownames<-`(.$Yr)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>%
`rownames<-`(.$Yr)
## METHOD 2 [SAM]
cn <- ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>%
`rownames<-`(.$Yr)
cn[[1]]
row.names(cn[[1]])
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>% tibble::column_to_rownames('Yr')
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%  tibble::column_to_rownames('Yr') %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>%
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%  tibble::column_to_rownames('Yr') %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>%
tibble::column_to_rownames('Yr')
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>% data.frame() %>%
tibble::column_to_rownames('Yr')
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
data.frame() %>%   group_split(Fleet_Name) %>%
tibble::column_to_rownames('Yr')
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
data.frame() %>%
tibble::column_to_rownames('Yr') %>%  group_split(Fleet_Name)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
data.frame() %>%   group_split(Fleet_Name)  %>% data.frame() %>%
tibble::column_to_rownames('Yr')
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
data.frame() %>%
tibble::column_to_rownames('Yr') %>%   group_split(Fleet_Name)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>% data.frame() %>%
tibble::column_to_rownames('Yr') %>%   group_split(Fleet_Name)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>% data.frame() %>%
tibble::column_to_rownames('Yr')
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>% data.frame() %>% select(Fleet_Name, Obs) %>%
tibble::column_to_rownames('Yr')
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>% data.frame() %>%
tibble::column_to_rownames('Yr') %>%  select(Fleet_Name, Obs) %>% group_split(Fleet_Name)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>% data.frame() %>%
tibble::column_to_rownames('Yr')
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>% data.frame() %>%
tibble::column_to_rownames('Yr') %>%  select(Fleet_Name, Obs)
ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
group_split(Fleet_Name) %>% data.frame() %>%
tibble::column_to_rownames('Yr') %>%  select(Fleet_Name, Obs) %>%
group_split(Fleet_Name)
## METHOD 2 [SAM]
cn <- ccbase$catch %>%
select(Fleet_Name, Yr, Obs, ret_bio) %>%
mutate(discard = Obs-ret_bio) %>%
select(Fleet_Name, Yr, Obs) %>%
# tidyr::pivot_wider(names_from = Fleet_Name,  values_from = Obs) %>%
# group_split(Fleet_Name) %>% data.frame() %>%
#   tibble::column_to_rownames('Yr') %>%
# select(Fleet_Name, Obs) %>%
group_split(Fleet_Name)
nm
class(nm)
class(Cw)
class(cw)
cw
read.ices("./input/ices_testing/survey.dat")
class(surveys)
class(surveys[[1]])

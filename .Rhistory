survey_x2  <- rep(-2, length(years)) ## we have obs from 1970+
survey_x2[5:length(survey_x2)] <- -2## a -2 if no survey, 2 if survey occured
nfleets_surv <- ncol(survey2)
## setup phi (matching matrix) depending on spatial setup
if(nspace == 6){ ## OM
phi_if_surv <- matrix(0, nrow = nfleets_surv, ncol = nspace)
phi_if_surv[1,1:2] <-  phi_if_surv[2,1:2] <-  phi_if_surv[3,3:4]<-  phi_if_surv[4,3:4] <-  phi_if_surv[5,5:6] <- 1
phi_if_fish <- matrix(1, nrow = nfleets_fish, ncol = nspace) ## placeholder for fishing fleets
phi_ik <-  matrix(0, ncol = nspace, nrow = 4) ## nesting of subareas within stocks, for recruitment purposes
phi_ik[1,1] <-  phi_ik[2,2:3] <-  phi_ik[3,4:5]<-  phi_ik[4,6]  <- 1
tau_ik <-  matrix(0, ncol = nspace, nrow = 4) ## nesting of subareas within stocks, for recruitment purposes
tau_ik[1,1] <-   tau_ik[4,6]  <- 1 ## 100% of recruitment in stock
tau_ik[2,2:3] <-  tau_ik[3,4:5] <-  0.5 ## split 50/50 for now
# phi_if_fish[1,1:2] <-  phi_if_fish[2,1:2] <-  phi_if_fish[3,3:4]<-  phi_if_fish[4,3:4] <-  phi_if_fish[5,5:6] <- 1
} else {
phi_if_surv <- matrix(rbinom(nfleets_surv*nspace,1,0.5), byrow = TRUE, nrow = nfleets_surv, ncol = nspace) ## placeholder for alternative spatial stratifications
phi_if_fish <- matrix(c(0,1,1,1,1,0), nrow = nfleets_fish, ncol = nspace)  ## placeholder for fishing fleets
phi_ik <- matrix(rbinom(4*nspace,1,0.5), nrow = 4, ncol = nspace) ## placeholder for alternative spatial stratifications
tau_ik <- matrix(c(0.25,0.75,0.9,0.1,0.1,0.9,0.5,0.5), nrow = 4, byrow = TRUE, ncol = nspace) ## placeholder for alternative spatial stratifications
}
# Load the age comps
age_survey.tmp <- read.csv(here("input","data",'age_survey_ss.csv'))
age_survey.tmp2 <- array(NA, dim = c(nrow(age_survey.tmp),ncol(age_survey.tmp), nfleets_surv)) ## placeholder; the last term should be nfleets-acomp
age_survey.tmp2[,,1] <- age_survey.tmp2[,,2] <- as.matrix(age_survey.tmp)
age_catch.tmp <- read.csv(here("input","data",'age_catch_ss.csv'))
ac.data <- read.csv(here("input","data",'ac_data.csv'))
# age_survey <- as.data.frame(matrix(-1, nyear,dim(age_survey.df)[2]))
# names(age_survey) <- names(age_survey.df)
# age_survey$year <- years
# age_catch <- as.data.frame(matrix(-1, nyear,dim(age_catch.df)[2]))
# names(age_catch) <- names(age_catch.df)
# age_catch$year <- years
#
# for (i in 1:dim(age_survey.df)[1]){
#   idx <- which(age_survey$year == age_survey.df$year[i])
#   age_survey[idx,] <-age_survey.df[i,]
#
# }
#
# for (i in 1:dim(age_catch.df)[1]){
#   idx <- which(age_catch$year == age_catch.df$year[i])
#   age_catch[idx,] <-age_catch.df[i,]
#
# }
# Load parameters from the assessment
initN <- rev(read.csv(here("input","data",'Ninit_MLE.csv')))[,1]
Rdev <- read.csv(here("input","data",'Rdev_MLE.csv'))[,1]
PSEL <- as.matrix(read.csv(here("input","data",'p_MLE.csv'))) ## time varying selex pars for fihsery(?)
#Fin <- assessment$F0
# b <- matrix(NA, nyear)
# Yr <- 1946:max(years)
# # Parameters
# yb_1 <- 1965 #_last_early_yr_nobias_adj_in_MPD
# yb_2 <- 1971 #_first_yr_fullbias_adj_in_MPD
# yb_3 <- 2016 #_last_yr_fullbias_adj_in_MPD
# yb_4 <- max(years) #_first_recent_yr_nobias_adj_in_MPD
# b_max <- 0.87 #_max_bias_adj_in_MPD
#
# b[1] <- 0
# for(j in 2:length(Yr)){
#
#   if (Yr[j] <= yb_1){
#     b[j] = 0}
#
#   if(Yr[j] > yb_1 & Yr[j]< yb_2){
#     b[j] = b_max*((Yr[j]-yb_1)/(yb_2-yb_1));
#   }
#
#   if(Yr[j] >= yb_2 & Yr[j] <= yb_3){
#     b[j] = b_max}
#
#   if(Yr[j] > yb_3 & Yr[j] < yb_4){
#     b[j] = b_max*(1-(yb_3-Yr[j])/(yb_4-yb_3))
#   }
#
#   if(Yr[j] >= yb_4){
#     b[j] = 0
#   }
#   # if (b[j]<b[j-1]){
#   #   stop('why')
#   # }
# }
#
#b <- matrix(1, tEnd)
b <- as.matrix(read.csv(here("input","data",'b_input.csv'))) ## this is rec penalty
# if(move == TRUE){
#    mul <- 1.015
# }else{
#  mul <- 1
#  }
# load parameters specifically for hake
parms.scalar <- read.csv(here("input","data","parms_scalar.csv"))
parms.sel <- read.csv(here("input","data",'selectivity.csv'))
initN <- as.matrix(read.table(here("input","data",'initN.csv'))) ## initial n at age?
Rdev <- as.matrix(read.csv(here("input","data",'Rdev.csv')))
if(sel_hist == 1){
PSEL <- as.matrix(read.csv(here("input","data",'PSEL.csv')))
}else{
PSEL <- matrix(0, 5, 28)
}
if(nseason == 4 & nspace == 2){
Fnseason <- matrix(NA, 2,4)
#Fnseason[1,] <- c(0.0,0.4,0.50,0.1) # Must add to one
Fnseason[1,] <- c(0.001,0.188,0.603,0.208)
#Fnseason[2,] <- c(0.0,0.4,0.50,0.1) # Must add to onec
Fnseason[2,] <- c(0.000,0.317,0.382,0.302)/sum(c(0.000,0.317,0.382,0.302)) # Divide by sum to sum to 1
}else{
Fnseason <- matrix(NA, nspace, nseason)
Fnseason[1:nspace,] <- 1/nseason # Equally distributed catch
}
rmul <-1
if(nspace == 2){
rmul <- 1.1
}
parms <- list( # Just start all the simluations with the same initial conditions
logRinit = parms.scalar$logRinit+log(rmul),
logh = parms.scalar$logh,
logMinit = parms.scalar$logMinit,
logSDsurv = parms.scalar$logSDsurv,
#logSDR = log(1.4),
logphi_catch = parms.scalar$logphi_catch,
#logphi_survey = log(11.33),
# logSDF = log(0.1),
# Selectivity parameters
psel_fish = parms.sel$value[parms.sel$source == 'fish'],
psel_surv = parms.sel$value[parms.sel$source == 'survey'],
initN = initN,
Rin = Rdev,
PSEL = PSEL
)
psel<- matrix(NA,nspace, 5)
for(i in 1:nspace){
#psel[i,] <- c(2.8476, 0.973,0.3861,0.1775,0.5048) # USA selectivity
psel[i,] <- parms$psel_fish
}
if(nspace == 2){
psel[1,] <- c(1,1,1,1,1)
}
# Flag if there's a selectivity change in that year
selYear <- 1991
flag_sel <- rep(0,nyear)
flag_sel[which(years == selYear):which(years == myear)] <- 1
df <-list(      #### Parameters #####
wage_ssb = t(wage_ssb),
wage_catch = t(wage_catch),
wage_survey = t(wage_survey),
wage_mid = t(wage_mid),
selidx = which(years == selYear),
#  Input parameters
year_sel = length(1991:max(years)), # Years to model time varying sel
Msel = msel,
Matsel= as.numeric(mat),
nage = nage,
age = age,
nseason = nseason,
nyear = nyear,
tEnd = tEnd, # The extra year is to initialize
logQ = log(1.14135),   # Analytical solution
# Selectivity
Smin = 1,
Smin_survey = 2,
Smax = 6,
Smax_survey = 6,
flag_sel = flag_sel,
surveyseason = surveyseason,
nsurvey = nsurvey, # Frequency of survey years (e.g., 2 is every second year)
# survey
survey = survey, # Make sure the survey has the same length as the catch time series
survey2 = survey2,
nfleets_surv = nfleets_surv,
flag_surv_bio = survey_x2, #ac.data$survey_x, # Is there a survey in that year?
survey_err = ac.data$ss.error, # Make sure the survey has the same length as the catch time series
ss_survey = ac.data$ss.survey,
flag_surv_acomp =ac.data$sflag,
age_survey = age_survey.tmp,
age_survey2 = age_survey.tmp2,
age_maxage = 15, # Max age for age comps
# Catch
#                Catchobs = catch$Fishery, # Convert to kg
ss_catch = ac.data$ss.catch,
flag_catch =ac.data$cflag,
age_catch = age_catch.tmp,
nfleets_fish = nfleets_fish,
# variance parameters
logSDcatch = log(0.01),
logSDR = log(logSDR), # Fixed in stock assessment ,
logphi_survey = log(11.46),
years = years,
b = b,
bfuture = bfuture,
#logh = log(0.8),
# Space parameters
smul = 0.5, # Annual survey timing
sigma_psel = 1.4,
sum_zero = 0,
nspace = nspace,
#TAC = TAC,
movemat = movemat,
move = move,
recruitmat = recruitmat,
move.init = move.init,
movefifty = movefifty,
movemax = movemax,
movesouth = movesouth,
moveout = moveout,
moveslope = moveslope,
# F0 = Fin,
psel = psel,
parms = parms,
Fnseason = Fnseason,
selectivity_change = selectivity_change,
Catch = catch,
Catch2 = catch2,
phi_if_surv = phi_if_surv,
phi_if_fish = phi_if_fish,
phi_ik = phi_ik,
tau_ik = tau_ik,
nstocks = nrow(phi_ik)
# Parameters from the estimation model
)
Catch.country <- read.csv(here("input","data",'catch_per_country.csv'))
df$Catch.country <- as.matrix(Catch.country[,2:3])[,c(2,1)]
df$Catch <- rowSums(df$Catch.country)
if(nyear > length(df$Catch)){
df$Catch <- c(df$Catch,rep(mean(df$Catch), nyear-length(df$Catch)))
}
if(nyear >nrow(df$Catch.country)){
df$Catch.country <- rbind(df$Catch.country,t(replicate(nyear-nrow(Catch.country),colMeans(df$Catch.country))))
}
if(yr_future > 0){
idx.future <- length(1966:myear)+seq(2,yr_future, by = df$nsurvey) # Years where survey occurs
df$survey_x <- c(df$survey_x,rep(-2, yr_future))
df$survey_x[idx.future] <- 2
df$survey_err <- c(df$survey_err,rep(1, yr_future))
df$survey_err[idx.future] <- mean(df$survey_err[df$survey_err != 1])
df$ss_survey <- c(df$ss_survey, rep(0,  yr_future))
df$ss_survey[idx.future] <- mean(df$ss_survey[df$ss_survey != -1])
df$flag_survey <- c(df$flag_survey, rep(-1,yr_future))
df$flag_survey[idx.future] <- 1
df$flag_catch[years > 2018] <- 1
Rdevs <- rnorm(n = yr_future,mean = 0, sd = exp(df$logSDR))
#Rdevs <- rep(0, yr_future)
df$parms$Rin <- c(df$parms$Rin,Rdevs)
# Bias adjustment
df$b <- c(df$b,rep(df$bfuture, yr_future))
}
return(df) ## this has all the data in a format ready for estimation
}
set.seed(731)
plot.figures = FALSE # Set true for printing to file
# Run the simulation model
assessment <- read.csv(here("input","data",'assessment_MLE.csv')) ## I believe this comes from SS3
assessment <- assessment[assessment$year > 1965 &assessment$year < 2018 ,]
Catch.obs <- read.csv(here("input","data",'hake_totcatch.csv'))
df <- load_data_seasons(nspace =2)
df$Catch <- Catch.obs$Fishery
time <- 1
yrinit <- df$nyear
### Run the OM and the EM for x number of years in the MSE
### Set targets for harvesting etc
# df$parms$initN <- df$parms$initN*0
# df$parms$Rin <- df$parms$Rin*0
# df$F0 <- 0*df$F0
simyears <- 25 # Project 30 years into the future (2048 that year)
year.future <- c(df$years,(df$years[length(df$years)]+1):(df$years[length(df$years)]+simyears))
N0 <- NA
sim.data <- run.agebased.true.catch(df)
simdata0 <- sim.data # The other one is gonna get overwritten.
# Plot stuff
parms <- getParameters_OM(trueparms = FALSE, df = df)
##  Create a data frame to send to runsabassessment
df.new <- create_TMB_data(sim.data, df, history = TRUE)
parms.new <- parms
F0 <- rowSums(sim.data$Fout)
Rdev <- parms$Rin
parms.new$F0 <- F0
parms.new$Rin <- Rdev
obj <- MakeADFun(df.new,
parms.new,
DLL= "runsabassessment") # Run the assessment, in TMB folder
reps <- obj$report()
reps$F1_yf
df.new$phi_if_fish
reps$N_yai_beg[,,1]
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
compile(here("TMB","runsabassessment.cpp"))
dyn.load(dynlib(here("TMB","runsabassessment")))
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
compile(here("TMB","runsabassessment.cpp"))
dyn.load(dynlib(here("TMB","runsabassessment")))
obj <- MakeADFun(df.new,
parms.new,
DLL= "runsabassessment") # Run the assessment, in TMB folder
reps <- obj$report()
reps$F1_yf
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
compile(here("TMB","runsabassessment.cpp"))
dyn.load(dynlib(here("TMB","runsabassessment")))
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
compile(here("TMB","runsabassessment.cpp"))
dyn.load(dynlib(here("TMB","runsabassessment")))
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
compile(here("TMB","runsabassessment.cpp"))
dyn.load(dynlib(here("TMB","runsabassessment")))
obj <- MakeADFun(df.new,
parms.new,
DLL= "runsabassessment") # Run the assessment, in TMB folder
reps <- obj$report()
reps$term0
reps$term1
v1
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
compile(here("TMB","runsabassessment.cpp"))
dyn.load(dynlib(here("TMB","runsabassessment")))
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
compile(here("TMB","runsabassessment.cpp"))
dyn.load(dynlib(here("TMB","runsabassessment")))
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
compile(here("TMB","runsabassessment.cpp"))
dyn.load(dynlib(here("TMB","runsabassessment")))
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
compile(here("TMB","runsabassessment.cpp"))
dyn.load(dynlib(here("TMB","runsabassessment")))
obj <- MakeADFun(df.new,
parms.new,
DLL= "runsabassessment") # Run the assessment, in TMB folder
reps <- obj$report()
reps$F1_yf
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
compile(here("TMB","runsabassessment.cpp"))
dyn.load(dynlib(here("TMB","runsabassessment")))
## OM MODEL INIT ----
# Initialize the model parameters. Make a version
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
compile(here("TMB","runsabassessment.cpp"))
dyn.load(dynlib(here("TMB","runsabassessment")))
## OM MODEL INIT ----
# Initialize the model parameters. Make a version
obj <- MakeADFun(df.new,
parms.new,
DLL= "runsabassessment") # Run the assessment, in TMB folder
reps <- obj$report()
reps$F_tilde
reps$N_yai_beg
reps$N_yai_beg[1,1,1]
reps$N_yai_beg[1,15,1]
df.new$phi_if_fish
df.new$wage_catch
reps$selectivity_save
df.new$catch_yf_obs
source(here("R","functions",'load_files_OM.R'))
# runomem and run om condition
set.seed(731)
plot.figures = FALSE # Set true for printing to file
# Run the simulation model
assessment <- read.csv(here("input","data",'assessment_MLE.csv')) ## I believe this comes from SS3
assessment <- assessment[assessment$year > 1965 &assessment$year < 2018 ,]
Catch.obs <- read.csv(here("input","data",'hake_totcatch.csv'))
df <- load_data_seasons(nspace =2)
df$Catch <- Catch.obs$Fishery
time <- 1
yrinit <- df$nyear
### Run the OM and the EM for x number of years in the MSE
### Set targets for harvesting etc
# df$parms$initN <- df$parms$initN*0
# df$parms$Rin <- df$parms$Rin*0
# df$F0 <- 0*df$F0
simyears <- 25 # Project 30 years into the future (2048 that year)
year.future <- c(df$years,(df$years[length(df$years)]+1):(df$years[length(df$years)]+simyears))
N0 <- NA
sim.data <- run.agebased.true.catch(df)
simdata0 <- sim.data # The other one is gonna get overwritten.
# Plot stuff
parms <- getParameters_OM(trueparms = FALSE, df = df)
##  Create a data frame to send to runsabassessment
df.new <- create_TMB_data(sim.data, df, history = TRUE)
parms.new <- parms
F0 <- rowSums(sim.data$Fout)
Rdev <- parms$Rin
parms.new$F0 <- F0
parms.new$Rin <- Rdev
obj <- MakeADFun(df.new,
parms.new,
DLL= "runsabassessment") # Run the assessment, in TMB folder
reps <- obj$report()
reps$F_tilde
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
compile(here("TMB","runsabassessment.cpp"))
dyn.load(dynlib(here("TMB","runsabassessment")))
obj <- MakeADFun(df.new,
parms.new,
DLL= "runsabassessment") # Run the assessment, in TMB folder
reps <- obj$report()
reps$F_tilde

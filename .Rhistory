rstar
dim(et)
length(et)
length(Ry)
?abline
abline(b = 0, a = mean(Ry), add = T)
abline( v = mean(Ry), add = T)
abline( v = mean(Ry), add = T, col = 'red')
abline( v = mean(rstar), add = T, col = 'blue', lty = 'dashed')
hist(eps, col = 'grey44',alpha = 0.2)
hist(eps, col = 'grey44',alpha = 0.2)
hist(et, col = 'grey22', add = T)
abline( v = mean(eps), add = T, col = 'red')
abline( v = mean(et), add = T, col = 'blue', lty = 'dashed')
hist(et, col = 'grey22', add = T)
hist(et, col = 'grey22')
hist(eps, col = 'grey44',alpha = 0.2, xlim = c(-2,2))
hist(et, col = 'grey22', add = T)
abline( v = mean(eps), add = T, col = 'red')
abline( v = mean(et), add = T, col = 'blue', lty = 'dashed')
mean(et)
mean(exp(eps))
hist(exp(eps), col = 'grey77', add = T)
par(mfrow = c(1,2))
## recdev itself is normal and zero-centered
hist(eps, col = 'grey44',alpha = 0.2, xlim = c(-2,2))
hist(exp(eps), col = 'grey77', add = T) ## shifted up
## when transformed and corrected, the mean is now one
hist(et, col = 'grey22', add = T)
abline( v = mean(eps), add = T, col = 'red')
abline( v = mean(et), add = T, col = 'blue', lty = 'dashed')
hist(rstar, col = 'grey55',alpha = 0.2)
hist(Ry, col = 'grey22', add = T)
## means are on top of one another
abline( v = mean(Ry), add = T, col = 'red')
abline( v = mean(rstar), add = T, col = 'blue', lty = 'dashed')
par(mfrow = c(1,2))
## recdev itself is normal and zero-centered
hist(eps, col = 'grey44',alpha = 0.2, xlim = c(-1,2))
hist(exp(eps), col = 'grey77', add = T) ## shifted up
## when transformed and corrected, the mean is now one
hist(et, col = 'grey22', add = T)
abline( v = mean(eps), add = T, col = 'red')
abline( v = mean(et), add = T, col = 'blue', lty = 'dashed')
hist(rstar, col = 'grey55',alpha = 0.2)
hist(Ry, col = 'grey22', add = T)
## means are on top of one another
abline( v = mean(Ry), add = T, col = 'red')
abline( v = mean(rstar), add = T, col = 'blue', lty = 'dashed')
abline( v = mean(exp(eps)), add = T, col = 'green')
par(mfrow = c(1,2))
## recdevs vs transformed----
## recdev itself is normal and zero-centered
hist(eps, col = 'grey44',alpha = 0.2, xlim = c(-1,2))
hist(exp(eps), col = 'grey77', add = T) ## shifted up
## when transformed and corrected, the mean is now one
hist(et, col = 'grey22', add = T)
abline( v = mean(eps), add = T, col = 'red')
abline( v = mean(et), add = T, col = 'blue', lty = 'dashed')
abline( v = mean(exp(eps)), add = T, col = 'green')
## Ry vs Rstar ----
hist(rstar, col = 'grey55',alpha = 0.2)
hist(Ry, col = 'grey22', add = T)
## means are on top of one another
abline( v = mean(Ry), add = T, col = 'red')
abline( v = mean(rstar), add = T, col = 'blue', lty = 'dashed')
devtools::install_git("mkapur/kaputils")
devtools::install_github("mkapur/kaputils")
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
remove.packages('kaputils')
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
devtools::install_github("mkapur/kaputils")
devtools::install_github("mkapur/kaputils")
devtools::install_github("mkapur/kaputils", dependencies = FALSE)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospectivess/"
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospectivess/"
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospectives/"
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospectives/"
suff = NA,
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospectives/",
suff = NA,
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
require(dplyr)
require(r4ss)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospectives/",
suff = NA,
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospective/",
suff = NA,
terminal_year = 2012,
pattern = "OM",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospective/",
suffix = NA,
terminal_year = 2012,
pattern = "retro-",
subpattern = NA,
writeTables = FALSE
)
require(kaputils)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospective/",
suffix = NA,
terminal_year = 2012,
pattern = "retro-",
subpattern = NA,
writeTables = FALSE
)
kaputils:::extractResults(
rootdir =   "C:/Users/mkapur/Dropbox/UW/ms_diags/MK_Plots_Diags/retrospective/",
suffix = NA,
terminal_year = 2012,
pattern = "retro-",
subpattern = NA,
writeTables = TRUE
)
length(seq(0.05,0.95,0.05))
9 %%3
## super explicit version
for(i in 1:100){
if( i %% 3 ==0 ) {
case <- "Fizz"
} else if( i %% 5 ==0 ) {
caset <- "Buzz"
} else if(i %% 3 == 0 & i %% 5 == 0 ) {
case <- "FizzBuzz"
} else{
case <- i
}
cat(case, "\n")
}
## super explicit version
for(i in 1:10){
if( i %% 3 ==0 ) {
case <- "Fizz"
} else if( i %% 5 ==0 ) {
caset <- "Buzz"
} else if(i %% 3 == 0 & i %% 5 == 0 ) {
case <- "FizzBuzz"
} else{
case <- i
}
cat(case, "\n")
}
## super explicit version
for(i in 1:10){
if( i %% 3 ==0 ) {
case <- "Fizz"
} else if( i %% 5 ==0 ) {
case <- "Buzz"
} else if(i %% 3 == 0 & i %% 5 == 0 ) {
case <- "FizzBuzz"
} else{
case <- i
}
cat(case, "\n")
}
## super explicit version
for(i in 1:100){
if( i %% 3 ==0 ) {
case <- "Fizz"
} else if( i %% 5 ==0 ) {
case <- "Buzz"
} else if(i %% 3 == 0 & i %% 5 == 0 ) {
case <- "FizzBuzz"
} else{
case <- i
}
cat(case, "\n")
}
## super explicit version
for(i in 1:100){
## check for both first
if(  i %% 3 == 0 & i %% 5 == 0 ) {
case <- "Fizz"
} else if( i %% 5 ==0 ) {
case <- "Buzz"
} else if( i %% 3 ==0 ) {
case <- "FizzBuzz"
} else{
case <- i
}
cat(case, "\n")
}
remotes::install_github('rstudio/blogdown')
?blogdown::new_site()
?blogdown::new_site("./maiakapur")
?blogdown::new_site(dir = "./dropbox/maiakapur")
getwd()
?blogdown::new_site(dir = "C:/Users/mkapur/dropbox/maiakapur")
blogdown::new_site(dir = "C:/Users/mkapur/dropbox/maiakapur")
require(blogdown)
library(rlang)
install.packages('rlang')
install.packages(c("vctrs", "rlang", "tidyverse"))
dplyr::relocate()
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
source(here("R","functions",'load_files_OM.R'))
## OM_Master.R
## M S Kapur mod from N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v2L",'shire_v2L_1')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
HERE()
here()
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v3L",'shire_v4L')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =   df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
setwd("C:/Users/mkapur/Dropbox/UW/sab-mse/R")
setwd("C:/Users/mkapur/Dropbox/UW/sab-mse")
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v3L",'shire_v4L')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
urm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v3L",'shire_v4L')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =   df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
# "log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[1])
## confirm that we've only bounded unfixed fleets by number
# length(bounds$upper[names(bounds$upper)=='log_fsh_slx_pars']) == length(mappy$log_fsh_slx_pars[!is.na(mappy$log_fsh_slx_pars)])
# length(bounds$upper[names(bounds$upper)=='log_srv_slx_pars']) == length(mappy$log_srv_slx_pars[!is.na(mappy$log_srv_slx_pars)])
with(bounds, array(exp(lower[names(lower)=='log_fsh_slx_pars']), dim = c(7,2,1,2),
dimnames = list(df$fltnames_fish)))
with(bounds, array(exp(upper[names(upper)=='log_srv_slx_pars']), dim = c(5,2,1,2)))
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
opt$time_for_MLE
df$surv_yf_err
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-10-27y_v4L_M=0.2-0.2-0.2-0.2_srvslxest_withbounds/opt.rdata")
years <- 1960:2019
nyear <- length(years)
tEnd <- length(years)
age <- 0:70
nage <- length(age)
## if everythign fixed use
if(length(mappy$log_fsh_slx_pars) == length(df$parms$log_fsh_slx_pars) ){
inputSel <- array(exp(df$parms$log_fsh_slx_pars),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
selP <- array(exp(df$parms$log_fsh_slx_pars),
dim = c(7,2,1,2))
} else{
inputSel <- array(exp(obj$par[grep('fsh_slx',names(obj$par))]),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
selP <- array(exp(opt$par[grep('fsh_slx',names(opt$par))]),
dim = c(7,2,1,2))
}
mapped_fsh_selnames <- c('AK_FIX','AK_TWL',paste(df$fltnames_fish[3:df$nfleets_fish]))
dimnames(selP)[[1]] <- mapped_fsh_selnames
fsh_sel_afs <- array(NA, dim = c(df$nage,
length(mapped_fsh_selnames),#df$nfleets_fish
2),
dimnames = list(c(df$age),
mapped_fsh_selnames,# c(paste(df$fltnames_fish)),
c('Fem','Mal')))
for(a in 1:df$nage){
for(s in 1:2){
for(fish_flt in 1:length(mapped_fsh_selnames)){
fsh_sel_afs[,fish_flt,s] <- getSelec2(sex = s,
selP = selP,
flt_idx = fish_flt,
selType = df$selType_fish[fish_flt],
selShape = df$selShape_fish[fish_flt])
}
}
}
fltnames <- read.table(here("input","input_data","OM_fleetnames.txt"),header = TRUE)
demPal <- c("#015b58", "#2c6184", "#ba7999", "#a8bbcc") ## 4 demographic regions, these are 4:1
mgmtPal <- c("#015b58",  "#2c6184",  "#ba7999")## 3 Demographic regions AK -> WC
require(here)
fltnames <- read.table(here("input","input_data","OM_fleetnames.txt"),header = TRUE)
demPal <- c("#015b58", "#2c6184", "#ba7999", "#a8bbcc") ## 4 demographic regions, these are 4:1
mgmtPal <- c("#015b58",  "#2c6184",  "#ba7999")## 3 Demographic regions AK -> WC
subareaPal <- c("#015b58" ,"#2c6184", "#1f455e", "#ba7999" ,"#984e73" ,"#a8bbcc")
fishfltPal <- matrix(paste0("#",c('015B58','2c6184','1f455e','2c6184',
'2c6184', '984e73','a8bbcc','efbcd5','ef798a'))[1:length( fltnames$NAME[fltnames$COMM])],
nrow = 1)
# fishfltPal <- matrix(paste0("#",c('015B58','175E6E','2C6184','1F455E',
#                            'BA7999','984E73','A8BBCC','efbcd5','ef798a'))[1:length( fltnames$NAME[fltnames$COMM])],
#                    nrow = 1)
colnames(fishfltPal) <- fltnames$NAME[fltnames$COMM]
survfltPal <-  matrix(PNWColors::pnw_palette(name = 'Bay',n=5), ncol = 5) ## for VAST outputs
colnames(survfltPal) <- fltnames$NAME[fltnames$SURV]
sexPal <- c("#de9b71", "#5d74a5") ## female, male
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
par(mfrow = c(4,2) )
for(flt in 1:length(mapped_fsh_selnames)){
for(s in 1:2){
tmp <- fsh_sel_afs[,flt,s]
## if fixed overwrite colors
if(length(mappy$log_fsh_slx_pars) == length(df$parms$log_fsh_slx_pars) ){
sexPal = c('grey22','grey66')
}
if(s == 1) plot(tmp,
col = sexPal[1],
type = 'l',
yaxt = 'n',
lwd = 2,
xlab = ifelse(df$selType_fish[flt] == 0,
'Age','Length'),
ylab = 'Selectivity',
lty = 1,
ylim = c(0,1),
main = mapped_fsh_selnames[flt], xlim = c(0,75),
col.main  = c(rep(mgmtPal[1],2),
rep(mgmtPal[2],3),
rep(mgmtPal[3],2))[flt])
box(which = 'plot', lty = 'solid',
col = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt],
lwd = 2)
axis(2, at = seq(0,1,0.2), labels = seq(0,1,0.2))
if(s == 2) lines(tmp, col = sexPal[2], type = 'l', lty = 2, lwd = 2)
}
}
length(mappy$log_fsh_slx_pars) == length(df$parms$log_fsh_slx_pars)
array(exp(df$parms$log_fsh_slx_pars),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-10-27y_v4L_M=0.2-0.2-0.2-0.2_srvslxest_withbounds/df_used.rdata")
## if everythign fixed use
if(length(mappy$log_fsh_slx_pars) == length(df$parms$log_fsh_slx_pars) ){
inputSel <- array(exp(df$parms$log_fsh_slx_pars),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
selP <- array(exp(df$parms$log_fsh_slx_pars),
dim = c(7,2,1,2))
} else{
inputSel <- array(exp(obj$par[grep('fsh_slx',names(obj$par))]),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
selP <- array(exp(opt$par[grep('fsh_slx',names(opt$par))]),
dim = c(7,2,1,2))
}
mapped_fsh_selnames <- c('AK_FIX','AK_TWL',paste(df$fltnames_fish[3:df$nfleets_fish]))
dimnames(selP)[[1]] <- mapped_fsh_selnames
fsh_sel_afs <- array(NA, dim = c(df$nage,
length(mapped_fsh_selnames),#df$nfleets_fish
2),
dimnames = list(c(df$age),
mapped_fsh_selnames,# c(paste(df$fltnames_fish)),
c('Fem','Mal')))
for(a in 1:df$nage){
for(s in 1:2){
for(fish_flt in 1:length(mapped_fsh_selnames)){
fsh_sel_afs[,fish_flt,s] <- getSelec2(sex = s,
selP = selP,
flt_idx = fish_flt,
selType = df$selType_fish[fish_flt],
selShape = df$selShape_fish[fish_flt])
}
}
}
par(mfrow = c(4,2) )
for(flt in 1:length(mapped_fsh_selnames)){
for(s in 1:2){
tmp <- fsh_sel_afs[,flt,s]
## if fixed overwrite colors
if(length(mappy$log_fsh_slx_pars) == length(df$parms$log_fsh_slx_pars) ){
sexPal = c('grey22','grey66')
}
if(s == 1) plot(tmp,
col = sexPal[1],
type = 'l',
yaxt = 'n',
lwd = 2,
xlab = ifelse(df$selType_fish[flt] == 0,
'Age','Length'),
ylab = 'Selectivity',
lty = 1,
ylim = c(0,1),
main = mapped_fsh_selnames[flt], xlim = c(0,75),
col.main  = c(rep(mgmtPal[1],2),
rep(mgmtPal[2],3),
rep(mgmtPal[3],2))[flt])
box(which = 'plot', lty = 'solid',
col = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt],
lwd = 2)
axis(2, at = seq(0,1,0.2), labels = seq(0,1,0.2))
if(s == 2) lines(tmp, col = sexPal[2], type = 'l', lty = 2, lwd = 2)
}
}
df$surv_yf_err

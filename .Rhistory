wage_mid <- df$wage_mid
# array<Type> Length_yai_beg(tEnd+1,nage,nspace); // placeholder for true lengths-at-age
# array<Type> Length_yai_mid(tEnd+1,nage,nspace); // placeholder for true lengths-at-age
# array<Type> LengthAge_alyi_beg(nage,LBins,tEnd+1,nspace); // placeholder for true age-length dist
# array<Type> LengthAge_alyi_mid(nage,LBins,tEnd+1,nspace); // placeholder for true age-length dist
# M selectivity
Msel <- df$Msel # no difference between males and females
# M0 <- exp(df$parms$logMinit)
M <- 0.2 #M0*Msel # Naural mortality at age
SDR <- exp(df$logSDR)
b <- rep(1, tEnd)
# Survey selectivity
# surv.sel <- getSelec(df$age,df$parms$psel_surv, df$Smin_survey, df$Smax_survey) # Constant over time
# True values
M0 <- 0.2 #exp(df$parms$logMinit) # no difference between males and females
# F0 <- df$F0
recruitmat <- df$recruitmat
# if(df$move == FALSE){
#   recruitmat <- 1
# }
movemat <- df$X_ija #df$movemat ## array of subarea x age, x season x year
# move.init <- df$move.init
# Catchability
# q <- 1 #exp(df$logQ) # Constant over time
# surv.sd <- exp(df$parms$logSDsurv) # Survey error
# Maturity
# Mat.sel <- df$Matsel # Fecundity
h_k <- exp(df$parms$logh_k)
# Age
nage <- df$nage
age <- df$age
R_0k <- rep(exp(df$parms$logRinit), nspace) ## change this to better value
# Mage <- c(0,cumsum(M[1:(nage-1)]))
# Calculate N0 based on R0
# mage <- max(df$age) # Max age
# agetmp <- 0:(mage*3)
# nagetmp <- length(agetmp)
#
# N0tmp <- rep(NA,nagetmp)
#
# N0tmp[1:(nagetmp-1)] = R0*exp(-agetmp[1:(nagetmp-1)]*M0)
# N0tmp[nagetmp] =  R0*exp(-M0*agetmp[nagetmp])/(1-exp(-M0))
#
# N0 <- matrix(NA,nage)
# N0[1:(nage-1)] <- N0tmp[1:(nage-1)]
# N0[nage] <- sum(N0tmp[nage:nagetmp])
#
# SSB_0 <- NA
#
# for(i in 1:nspace){
#   #SSB_0[i] <- sum(df$Matsel*N0*move.init[i])
#   SSB_0[i] <- sum(N0*move.init[i]*df$wage_ssb[,1])*0.5
# }
# names(SSB_0) <- paste(rep('space',each = df$nspace),1:nspace)
#
# R_0 <- R0*move.init  # Used the inital recruitment devs to get a start
## Unfished Naa and SB0 ----
## note that omega makes this non-smooth
N_0ai <- matrix(NA, nrow = nage, ncol = nspace)
SSB_0i <- rep(0, nspace)
for(k in 1:nstocks){
for(i in 1:nspace){
for(a in 1:(nage-1)){
N_0ai[a,i] = 0.5*omega_ai[a,i]*R_0k[k]*tau_ik[k,i]*exp(-(M[a]*age[a]))
}
# // note the A+ group will be in slot A-1
N_0ai[nage,i] = omega_ai[nage,i]* N_0ai[nage-1,i]*exp(-(M[nage-1]*age[nage-1]))/(1-exp(-M[nage]*age[nage]))
} ## // end subareas
}  ## // end stocks
SSB_0i <- rep(0, nspace);  SSB_0k <- rep(0, nstocks);
for(i in 1:nspace){
for(a in 1:(nage)){
SSB_0i[i] = SSB_0i[i] + mat_age[a]*N_0ai[a,i]*0.5;
for(k in 1:nstocks){
SSB_0k[k] = SSB_0k[k] + phi_ik[k,i]*mat_age[a]*N_0ai[a,i]*0.5;
} #// end stocks
} #// end ages
} # // end space
## Ninit ----
Ninit_ai <- matrix(NA, nrow = nage, ncol = nspace)
tildeR_initk <-  rep(1, nstocks)
tildeR_yk <- matrix(1, nrow = tEnd, ncol = nstocks)
for(k in 1:nstocks){
for(i in 1:nspace){
for(a in 1:(nage-1)){
Ninit_ai[a,i] = 0.5* omega_ai[a,i] * tau_ik[k,i] * R_0k[k]*
exp(-(M[a]*age[a])) * exp(-0.5*SDR*SDR+tildeR_initk[k])
} #// end ages
Ninit_ai[nage,i] = (omega_ai[nage,i] * Ninit_ai[nage-1,i] *
exp(-M[nage]*age[nage-1]))/(1-exp(-(M[nage]*age[nage]))*
exp(-0.5*SDR*SDR+tildeR_initk[k]))
} #// end space
} #// end stocks
Length_yai_beg <- Length_yai_mid <- N_yai_beg <- N_yai_mid <- array(NA, dim = c(tEnd, nage, nspace))
LengthAge_alyi_beg <- LengthAge_alyi_mid <- array(NA,dim = c(nage,LBins,tEnd,nspace))
SSB_yi <- matrix(0, nrow = tEnd, ncol = nspace)
SSB_yk <- matrix(0, nrow = tEnd, ncol = nstocks)
R_yk <- matrix(0, nrow = tEnd, ncol = nstocks)
R_yi <- matrix(0, nrow = tEnd, ncol = nspace)
niter <- 100 ## F iterations
F1_yf <- F2_yf <- array(0, dim = c(tEnd, nfleets_fish, niter+1)) ## storage for intermediate guesses
Freal_yf <-  matrix(0, nrow = tEnd, ncol = nfleets_fish) ## storage for final guess
Zreal_ya <- matrix(0, nrow = tEnd, ncol = nage)
Zreal_yai <- array(0, dim = c(tEnd, nage, nspace))
F_area_yfi <-  array(0, dim = c(tEnd, nfleets_fish, nspace))
F_m_y <- matrix(0, nrow = tEnd, ncol = nmgmt_reg)
# Catch_yf_est <- array(0, dim = c(tEnd,nage,nfleets_fish))
# CatchN <- matrix(0, nrow = tEnd, ncol = nfleets_fish)
catch_yaf_pred <-  array(0, dim = c(tEnd, nage, nfleets_fish))
catch_yaif_pred <-  array(0, dim = c(tEnd, nage, nspace, nfleets_fish))
catch_yf_pred <-    N_avail_yf <-  matrix(0, nrow= tEnd, ncol = nfleets_fish)
N_weight_yfi <- catch_yfi_pred <-  array(0, dim = c(tEnd, nfleets_fish, nspace))
Nsamp_acomp_yf <-  survey_yf_pred <- matrix(0, nrow= tEnd, ncol = nfleets_surv)
## start year loop ----
for(y in 1:(tEnd-1)){
cat(y,"\n")
## Year 0 ----
if(y == 1){
# for(k in 1:nstocks){
for(i in 1:nspace){
Length_yai_beg[1,1,i] <- 10
N_yai_beg[1,1,i] <- Ninit_ai[1,i]
N_yai_mid[1,1,i] <- N_yai_beg[1,1,i]*exp(-0.15)
for(a in 2:(nage-1)){ ## fill A0 in position 1 later
for(j in 1:nspace){
pLeave = 0.0;  NCome = 0.0; # // reset for new age
if(i != j){
pLeave = pLeave + X_ija[i,j,a]; #// will do 1-this for proportion which stay
NCome = NCome + X_ija[j,i,a]*Ninit_ai[a,j]; #// actual numbers incoming
}
} #// end subareas j
# // this is the synthesis syntax; 10 is placeholder for LMIN
# // likely need a lower L1 at age stock-specific and linear before that age
Length_yai_beg[y,a,i] = Linf_yk[1,phi_ik2[i]]+(10-Linf_yk[1,phi_ik2[i]])*
exp(-kappa_yk[1,phi_ik2[i]]*a)
Length_yai_mid[y,a,i] = Linf_yk[1,phi_ik2[i]]+(10-Linf_yk[1,phi_ik2[i]])*
exp(-0.5*kappa_yk[1,phi_ik2[i]]*a)
N_yai_beg[y,a,i] = ((1-pLeave)*Ninit_ai[a,i] + NCome)*exp(-M[a])
} #// end ages
for(j in 1:nspace){
pLeave = 0.0;  NCome = 0.0; # // reset for new age
#   #// plus group includes those already at A AND age into A
if(i != j){
pLeave = pLeave + X_ija[i,j,nage]
# NCome = NCome + X_ija[j,i,nage]*(N_yai_beg[1,nage-1,j] + N_yai_beg[1,nage-1,j])  #// if M becomes spatial use M_aj here
NCome = NCome + X_ija[j,i,nage]*(Ninit_ai[nage,j] + Ninit_ai[nage-1,j])  #// if M becomes spatial use M_aj here
}
} #// end subareas j
N_yai_beg[y,nage,i] =  ((1-pLeave)*(Ninit_ai[nage,i] + Ninit_ai[nage-1,i]) +  NCome)*exp(-M[nage])
Length_yai_beg[y,nage,i] = Linf_yk[1,phi_ik2[i]]+(10-Linf_yk[1,phi_ik2[i]])*
exp(-kappa_yk[1,phi_ik2[i]]*nage-1)
Length_yai_mid[y,nage,i]  = Linf_yk[1,phi_ik2[i]]+(10-Linf_yk[1,phi_ik2[i]])*
exp(-0.5*kappa_yk[1,phi_ik2[i]]*nage-1)
} #// end subareas i
# } #// end stocks
} ## end y == 1
## SSB_y ----
for(i in 1:nspace){
# SSB_yi[y,i] = 0;SSB_yk[y,] = 0
for(a in 1:(nage)){
SSB_yi[y,i] <- SSB_yi[y,i] +  N_yai_beg[y,a,i]*wage_ssb[a,y]*0.5
# cat(  SSB_yi[y,i] +  N_yai_beg[y,a,i]*wage_ssb[a,y]*0.5,"\n")
# cat( SSB_yi[y,i],"\n")
for(k in 1:nstocks){
SSB_yk[y,k] <- SSB_yk[y,k] + phi_ik[k,i]*N_yai_beg[y,a,i]*wage_ssb[a,y]*0.5
} # // end stocks
} #// end ages
} #// end space
## A0 Recruits ----
# next year based on present SSB
omega_0ij <- rep(1, nspace)
for(i in 1:nspace){
for(k in 1:nstocks){
# // SSB_yk already has summation
R_yk[y,k] = (4*h_k[k]*R_0k[k]*SSB_yk[y,k]
/(SSB_0k[k]*(1-h_k[k])+
SSB_yk[y,k]*(5*h_k[k]-1)))*exp(-0.5*b[y]*SDR*SDR+tildeR_yk[y,k])
# if(R_yk[y,k] == 0) stop(paste("RYK IS ZER ON,",y,k,"\n"))
} # // end stocks
R_yi[y,i] = R_yk[y,phi_ik2[i]]*tau_ik[phi_ik2[i],i]*omega_0ij[i] #// downscale to subarea including age-0 movement
N_yai_beg[y+1,1,i] =  R_yi[y,i] #// fill age-0 recruits
} ### end space
#N- and Nominal Length ----
# at-age for the middle of this year and beginning of next
for(i in 1:nspace){
N_yai_mid[y,1,i] <- N_yai_beg[y,1,i]*exp(-0.15)
for(a in 2:(nage-1)){ ## note that TMB starts at pos 1 which is age 1 which is pos 2 here
pLeave = 0.0;  NCome = 0.0
for(j in 1:nspace){
if(i != j){
pLeave = pLeave + X_ija[i,j,a]; ### will do 1-this for proportion which stay
NCome = NCome + X_ija[j,i,a]*N_yai_beg[y,a,j]; ### actual numbers incoming
}
} ### end subareas j
N_yai_mid[y,a,i] = N_yai_beg[y,a,i]*exp(-0.15)
N_yai_beg[y+1,a,i] = ((1-pLeave)*N_yai_beg[y,a-1,i] + NCome)*exp(-0.15) ## this exponent needs to be Ztuned eventually
Length_yai_beg[y,1,i] <- 10 ## another LMIN placeholder
## as in document: next year A1 == this year A0 plus growth
Length_yai_beg[y+1,a,i] = Length_yai_beg[y,a-1,i] + (Linf_yk[y,phi_ik2[i]]-Length_yai_beg[y,a-1,i])*(1-exp(-kappa_yk[y,phi_ik2[i]]))
Length_yai_mid[y,a,i] = Length_yai_beg[y,a,i] + (Linf_yk[y,phi_ik2[i]]-Length_yai_beg[y,a,i]*
(1-exp(-0.5*kappa_yk[y,phi_ik2[i]])))
} ## end ages
# ## plus groups
pLeave = 0.0;  NCome = 0.0
for(j in 1:nspace){
if(i != j){
pLeave <- pLeave + X_ija[i,j,nage-1]
NCome <- NCome + X_ija[j,i,nage-1]*(N_yai_beg[y,nage,j] + N_yai_beg[y,nage-1,j])
} ## end i != j
} ## end subareas j
N_yai_mid[y,nage,i] = N_yai_beg[y,nage,i]*exp(-0.15)
N_yai_beg[y+1,nage,i] =   ((1-pLeave)*( N_yai_beg[y,nage,i]+ N_yai_beg[y,nage-1,i]) + NCome)*exp(-0.15);
## plus group weighted average (we already have the numbers at age)
Length_yai_beg[y+1,nage,i] = ( N_yai_beg[y+1,nage-1,i]*
(Length_yai_beg[y,nage-1,i]+
(Linf_yk[y,phi_ik2[i]]-Length_yai_beg[y,nage-1,i]*(1-exp(-kappa_yk[y,phi_ik2[i]])))) +
N_yai_beg[y+1,nage-1,i]*
(Length_yai_beg[y,nage,i]+
(Linf_yk[y,phi_ik2[i]]-Length_yai_beg[y,nage,i])*(1-exp(-kappa_yk[y,phi_ik2[i]]))))/
(N_yai_beg[y+1,nage-1,i] + N_yai_beg[y+1,nage,i])
#
Length_yai_mid[y+1,nage,i] = (N_yai_mid[y+1,nage-1,i]*
(Length_yai_beg[y,nage-1,i]+(Linf_yk[y,phi_ik2[i]]-Length_yai_beg[y,nage-1,i]*(1-exp(-0.5*kappa_yk[y,phi_ik2[i]])))) +
N_yai_mid[y+1,nage,i]*
(Length_yai_beg[y,nage,i]+(Linf_yk[y,phi_ik2[i]]-Length_yai_beg[y,nage,i])*(1-exp(-0.5*kappa_yk[y,phi_ik2[i]]))))/
(N_yai_mid[y,nage-1,i] + N_yai_mid[y,nage,i])
} ## end subareas i
## reweight length-at-age based on movement from other stocks ----
for(i in 1:nspace){
for(a in 2:(nage)){ ## note that TMB starts at pos 1 which is age 1 which is pos 2 here
LCome = 0.0; NCome = 0.0
for(j in 1:nspace){
if(i != j){
LCome = LCome + phi_ij[i,j]*N_yai_beg[y,a,j]*Length_yai_beg[y,a,j] ## for numerator
NCome = NCome + phi_ij[i,j]*N_yai_beg[y,a,j] ## for denom
}
} ## end subareas j
Length_yai_beg[y+1,a,i] = (N_yai_beg[y,a,i]*Length_yai_beg[y,a,i] + LCome)/(N_yai_beg[y,a,i]+NCome)
} ## end ages
} ## end subareas i
## prob of length-at-age
for(i in 1:nspace){
for(a in 1:(nage)){
LengthAge_alyi_beg[a,1,y,i] = pnorm(1,  Length_yai_beg[y,a,i], sigmaG_yk[y,phi_ik2[i]]);
LengthAge_alyi_mid[a,1,y,i] = pnorm(1,  Length_yai_mid[y,a,i], sigmaG_yk[y,phi_ik2[i]]);
for(l in 2:(LBins-1)){
LengthAge_alyi_beg[a,l,y,i] = pnorm(l+1,  Length_yai_beg[y,a,i], sigmaG_yk[y,phi_ik2[i]]) -
pnorm(l,  Length_yai_beg[y,a,i], sigmaG_yk[y,phi_ik2[i]])
LengthAge_alyi_mid[a,l,y,i] = pnorm(l+1,  Length_yai_mid[y,a,i], sigmaG_yk[y,phi_ik2[i]]) -
pnorm(l,  Length_yai_mid[y,a,i], sigmaG_yk[y,phi_ik2[i]])
} ## end LBins
LengthAge_alyi_beg[a,LBins,y,i] = 1-pnorm(LBins, Length_yai_beg[y,a,i], sigmaG_yk[y,phi_ik2[i]]);
LengthAge_alyi_mid[a,LBins,y,i] = 1-pnorm(LBins, Length_yai_mid[y,a,i], sigmaG_yk[y,phi_ik2[i]]);
if(is.na(   LengthAge_alyi_beg[a,LBins,y,i])) stop('NA ON ', a,l,y,i,"\n")
} ## end ages
} ## end nspace
## Hybrid F tuning  ----
# v1 <- 0.99;   Fmax <- 3; ##corresponds to an Fmax of 3
# v1 = 0.865; Fmax <- 2##corresponds to an Fmax of 2
# v1 = 0.7; Fmax = 1.5
v1 = 0.65; Fmax <- 1.15
# v1 = 0.25
v2 <- 30;
catch_afk_TEMP <- array(0, dim = c(nage, nfleets_fish, niter+1)) ## storage for intermediate guesses
Adj <- Z_a_TEMP <- Z_a_TEMP2 <- NULL
for(fish_flt in 1:nfleets_fish){
catch_yaf_pred[y,,fish_flt] <- catch_yf_pred[y,fish_flt] <- catch_yfi_pred[y,fish_flt,] <- 0
## make an initial guess for Ff using obs catch - need to update selex whihc is 1.0 now
denom = 0
for(i in 1:nspace){
# if(phi_im[i, m] == 0) next() ## skip area if not in mgmt reg
denom <- denom + (phi_if_fish[fish_flt, i] *
sum(N_yai_beg[y,,i])*
sum(wage_catch[,y]) * 1.0 +
catch_yf_obs[y, fish_flt+1])
}
# F1_yf[y, fish_flt, 1] <-    catch_yf_obs[y, fish_flt+1]/denom
## make this guess by M, and sum over phi_im
F1_yf[y, fish_flt, 1] <-    catch_yf_obs[y, fish_flt+1]/denom
latest_guess <-    F1_yf[y, fish_flt, 1]
## iterative tuning for F at M
for(k in 2:(niter+1)){
## modify the guess Eq 20
term0 = 1/(1+exp(v2*( latest_guess - v1)));
term1 = latest_guess*term0;
term2 = v1*(1-term0);
F1_yf[y,fish_flt,k] = -log(1-(term1+term2))
# Predicted catches @ F Eq 21; need to add SELEX
## also include phi_im
for(i in 1:nspace){
for(a in 1:nage){
Z_a_TEMP[a] <- F1_yf[y,fish_flt,k] + M[a]
catch_afk_TEMP[a,fish_flt,k] <-     catch_afk_TEMP[a,fish_flt,k] +
(F1_yf[y,fish_flt,k]/(Z_a_TEMP[a]))*(1-exp(-Z_a_TEMP[a]))*
phi_if_fish[fish_flt, i]*
N_yai_beg[y,a,i]*1.0*
wage_catch[a,i]
} ## end ages
} ## end space
## Calc Adj Eq 22
Adj[k] <- catch_yf_obs[y, fish_flt+1]/sum(catch_afk_TEMP[,fish_flt,k])
## Get new Z given ADJ - need to add discard and selex here
for(a in 1:nage) Z_a_TEMP2[a] <-  Adj[k]*F1_yf[y,fish_flt,k] +  M[a]
## Second Guess for F (EQ 24)
denom = 0
for(i in 1:nspace){
for(a in 1:nage){
denom <- denom + phi_if_fish[fish_flt, i] *
N_yai_beg[y,a,i]*
wage_catch[a,y] * 1.0 *(1-exp(-Z_a_TEMP2[a])) * (F1_yf[y,fish_flt,k]/(Z_a_TEMP2[a]))
}
}
# F2_yf[y, fish_flt, k] <- F2_yf[y, fish_flt, k-1] + catch_yf_obs[y, fish_flt+1]/denom
F2_yf[y, fish_flt, k] <- catch_yf_obs[y, fish_flt+1]/denom
## Modify the guess again Eq 25
term0 = 1/(1+exp(v2*( F2_yf[y,fish_flt,k] - v1)));
term1 = F2_yf[y,fish_flt,k]*term0;
term2 = v1*(1-term0);
F2_yf[y,fish_flt,k] = -log(1-(term1+term2))
# cat(F2_yf[y,fish_flt,k],"\n")
latest_guess <- F2_yf[y,fish_flt,k]
} ## end hybrid F iterations
## Define F, Z and predicted catches ----
Freal_yf[y, fish_flt] <- latest_guess ## final as Freal_yf
## annoying multi-loops for F in area
N_avail_yf[y,fish_flt] <- 0
## get total N exploitable by this fleet
for(i in 1:nspace){
N_avail_yf[y,fish_flt] <- N_avail_yf[y,fish_flt] + sum( phi_if_fish[fish_flt, i]*
N_yai_beg[y,,i])
}
## get ratio of N in area & reweight F
## will just return Freal and 0 for single-area fisheries
for(i in 1:nspace){
N_weight_yfi[y,fish_flt, i] <- sum(phi_if_fish[fish_flt, i]*  N_yai_beg[y,,i])/
N_avail_yf[y,fish_flt]
F_area_yfi[y,fish_flt,i] <- Freal_yf[y, fish_flt]*N_weight_yfi[y,fish_flt, i]
# Zreal_yai[y,a,i]  <- F_area_yfi[y,fish_flt,i] + M[a]
}
## add together for mgmt regions
for(m in 1:nmgmt_reg){
F_m_y[y,m] <- F_m_y[y,m]+phi_fm[fish_flt,m]*Freal_yf[y, fish_flt]
}
for(i in 1:nspace){
for(a in 1:nage){
Zreal_ya[y,a] <-   Freal_yf[y, fish_flt] + M[a] ## should this include all flets?
catch_yaf_pred[y,a,fish_flt] <- catch_yaf_pred[y,a,fish_flt] +
(Freal_yf[y, fish_flt]/(Zreal_ya[y,a]))*(1-exp(-Zreal_ya[y,a]))*
phi_if_fish[fish_flt, i]*
N_yai_beg[y,a,i]*
1.0*
wage_catch[a,i]
Zreal_yai[y,a,i]  <-  F_area_yfi[y,fish_flt,i] + M[a]
catch_yaif_pred[y,a,i,fish_flt] <- (F_area_yfi[y,fish_flt,i]/
(  Zreal_yai[y,a,i] ))*(1-exp(-  Zreal_yai[y,a,i] ))*
phi_if_fish[fish_flt, i]*
N_yai_beg[y,a,i]*
1.0*
wage_catch[a,i]
} ## end ages for predicted catch
catch_yfi_pred[y,fish_flt,i] <- sum(catch_yaif_pred[y,,i,fish_flt])
} ## end nspace for predicted catch
catch_yf_pred[y,fish_flt] <- sum(catch_yaf_pred[y,,fish_flt])
} ## end fishery fleets
cat( Freal_yf[y, fish_flt],fish_flt,"\n")
## survey biomass ----
## Estimate survey biomass at midyear
for( sur_flt in 1:nfleets_surv){
Nsamp_acomp_yf[y,sur_flt] <- survey_yf_pred[y,sur_flt] <- 0
for(i in 1:nspace){
for(a in 1:nage){
## need selex here
survey_yf_pred[y,sur_flt] <-  survey_yf_pred[y,sur_flt] +
1.0*wage_survey[a,y]*phi_if_surv[sur_flt,i]*N_yai_mid[y,a,i]*q; ## need to include phi matrix to conditionally sum biomass over i
Nsamp_acomp_yf[y,sur_flt] <-  Nsamp_acomp_yf[sur_flt]  +
1.0*phi_if_surv[sur_flt,i]*N_yai_mid[y,a,i]; ## To use with age comps; may need to change phi to sum acomp surveys
} ## end surv fleets
} ## end ages
} ## end nspace
## survey age comps w error
## age comps in catches
# Catch_yaf_est(y,a,fish_flt) = (Freal_yf(a)/(Z(a)))*(1-exp(-Z(a)))*
#   phi_if_fish(fish_flt, i)* N_yai_beg(y,a,i)*wage_catch(a,y); ## do this by fleet with phi
# CatchN_yaf(y,a,fish_flt) = (Freal_yf(a)/(Z(a)))*(1-exp(-Z(a)))* phi_if_fish(fish_flt, i)* N_yai_beg(y,a,i);## Calculate the catch in kg
# Catch_yf_est(y,fish_flt)= Catch_yf_est[y,a,fish_flt] + Catch_yaf_est(y,a,fish_flt); ## sum over the current catch at age
# CatchN(y,fish_flt) <- CatchN_yaf[y,a,] CatchN_yaf(y,a,fish_flt);
} ## END YEARS
df.out   <- list(N.save = Nsave,
SSB = SSB,
N.save.age = N.save.age,
R.save = R.save,
V.save = V.save,
SSB.all = SSB.all,
Catch.save.age = Catch.save.age,
CatchN.save.age = CatchN.save.age,
Catch = Catch,
Catch.age = Catch.age,
Catch.quota = Catch.quota,
Catch.quota.N = Catch.quota.N,
Fout = Fout.save,
age_comps_OM = age_comps_OM,
age_catch = age_comps_catch,
SSB_0 = SSB_0,
N0 = N0,
SSB.weight = SSB.weight,
survey.true = survey.true,
Z = Z.save,
survey = as.numeric(survey),
age_comps_surv = age_comps_surv,
age_comps_country = age_comps_surv_space,
age_comps_catch_space = age_comps_catch_space,
Fseason = Fseason.save,
Fsel = Fsel.save,
Ninit = Ninit,
SSB0 = SSB_0)
return(df.out)
} ## END FUNC
runOM_datagen(df)
Linf_yk
phi_ik2
phi_ik2 <- df$phi_ik2 + 1 ## zero-indexed, add one
Linf_yk[1,phi_ik2[i]]
i
phi_ik2
phi_ik2[i]
Linf_yk[1,phi_ik2[i]]
Linf_yk
# array of year x stock x sex
Linf_yk <- L1_yk <- kappa_yk <- sigmaG_yk <- array(NA,
dim = c(length(1960:2018),
length(unique(growPar$Region)),2))
for(s in 1:2){
for(r in 1:4){
temp <- subset(growPar, Sex == c("F","M")[s] & Region == paste0("R",c(1,2,4,5)[r]))
if("pool" %in% temp$Period){
Linf_yk[,r,s] <- temp$Linf
L1_yk[,r,s] <- temp$L1
kappa_yk[,r,s] <- temp$k
sigmaG_yk[,r,s] <- temp$Sigma
next()
}
Linf_yk[1:(2009-1960),r,s] <- temp$Linf[temp$Period == 'early']
Linf_yk[(2009-1960):nrow(Linf_yk),r,s] <- temp$Linf[temp$Period == 'late']
L1_yk[1:(2009-1960),r,s] <- temp$L1[temp$Period == 'early']
L1_yk[(2009-1960):nrow(L1_yk),r,s] <- temp$L1[temp$Period == 'late']
kappa_yk[1:(2009-1960),r,s] <- temp$k[temp$Period == 'early']
kappa_yk[(2009-1960):nrow(Linf_yk),r,s] <- temp$k[temp$Period == 'late']
sigmaG_yk[1:(2009-1960),r,s] <- temp$Sigma[temp$Period == 'early']
sigmaG_yk[(2009-1960):nrow(Linf_yk),r,s] <- temp$Sigma[temp$Period == 'late']
}
}
## growth ----
## load growth params - this used to happen in load_data_seasons
growPar <- read.csv(here("input","raw_data","demography","Table3_2020-05-06phase2.csv"))
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
growPar$Sex <- substrRight(as.character(growPar$Sex), 1)## overwrite for loops
# array of year x stock x sex
Linf_yk <- L1_yk <- kappa_yk <- sigmaG_yk <- array(NA,
dim = c(length(1960:2018),
length(unique(growPar$Region)),2))
for(s in 1:2){
for(r in 1:4){
temp <- subset(growPar, Sex == c("F","M")[s] & Region == paste0("R",c(1,2,4,5)[r]))
if("pool" %in% temp$Period){
Linf_yk[,r,s] <- temp$Linf
L1_yk[,r,s] <- temp$L1
kappa_yk[,r,s] <- temp$k
sigmaG_yk[,r,s] <- temp$Sigma
next()
}
Linf_yk[1:(2009-1960),r,s] <- temp$Linf[temp$Period == 'early']
Linf_yk[(2009-1960):nrow(Linf_yk),r,s] <- temp$Linf[temp$Period == 'late']
L1_yk[1:(2009-1960),r,s] <- temp$L1[temp$Period == 'early']
L1_yk[(2009-1960):nrow(L1_yk),r,s] <- temp$L1[temp$Period == 'late']
kappa_yk[1:(2009-1960),r,s] <- temp$k[temp$Period == 'early']
kappa_yk[(2009-1960):nrow(Linf_yk),r,s] <- temp$k[temp$Period == 'late']
sigmaG_yk[1:(2009-1960),r,s] <- temp$Sigma[temp$Period == 'early']
sigmaG_yk[(2009-1960):nrow(Linf_yk),r,s] <- temp$Sigma[temp$Period == 'late']
}
}
Linf_yk
growthPars <- list("Linf_yk"=Linf_yk, "L1_yk"=L1_yk,
"kappa_yk"=kappa_yk, "sigmaG_yk"=sigmaG_yk)
save(growthPars,
file = here('input','input_data',"OM_growthPars.rdata"))
# Run the simulation model
# assessment <- read.csv(here("input","data",'assessment_MLE.csv')) ## I believe this comes from SS3
# assessment <- assessment[assessment$year > 1965 &assessment$year < 2018 ,]
# Catch.obs <- read.csv(here("input","data",'hake_totcatch.csv'))
df <- load_data_seasons(nspace = 6, move = FALSE) ## data that works with OM
runOM_datagen(df)
rm(Linf_yk)
runOM_datagen(df)
df$Linf_yk
phi_ik2+1
phi_ik2
df$phi_ik2
Linf[2,4]
Linf_yk[2,4]
phi_ik2
phi_ik2[i]
Linf_yk
# // growth //
Linf_yk <- df$Linf_yk
,phi_ik2[i]
Linf_yk[1,phi_ik2[i]]
phi_ik2[i]
Linf_yk
Linf_yk[1,4]
Linf_yk[1,phi_ik2[i],1]

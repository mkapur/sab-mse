"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("WC_TWL", "AK_VAST_W","AK_VAST_E","WC_VAST"))
array(mappy$log_fsh_slx_pars, dim = c(df$nfleets_fish,2,1,2), dimnames = dimnames(df$parms$log_fsh_slx_pars))
array(mappy$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,1,2), dimnames = dimnames(df$parms$log_srv_slx_pars))
## ~90s with full years
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
# system.time(rep1 <- obj$report()) ## one off caclulation using start pars
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3]
)
## confirm that we've only bounded unfixed fleets by number
length(bounds$upper[names(bounds$upper)=='log_fsh_slx_pars'])== length(mappy$log_fsh_slx_pars[!is.na(mappy$log_fsh_slx_pars)])
length(bounds$upper[names(bounds$upper)=='log_srv_slx_pars'])== length(mappy$log_srv_slx_pars[!is.na(mappy$log_srv_slx_pars)])
# with(bounds, array(exp(lower[names(lower)=='log_fsh_slx_pars']), dim = c(7,2,1,2),
#                    dimnames = list(df$fltnames_fish)))
# with(bounds, array(exp(upper[names(upper)=='log_srv_slx_pars']), dim = c(5,2,1,2)))
## 3 hrs for 40 yrs with no bounds
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
# for (k in 1:2)  opt <- nlminb(obj$env$last.pa
opt$time_for_MLE
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(dat=dat,obj = obj, opt = opt, rep=rep, cppname =cppname, mappy = mappy,
runname = paste0("-",df$yRun,"y_",cppname,"_M=",
paste(df$parms$mort_k,collapse="-"),
"_wcselFixed_somesurvFixed"))
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v3L",'shire_v4L')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =   df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
rm(list = ls())
dllUSE = c("shire_v3L",'shire_v4L')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =   df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-07-59y_v4L_M=0.2-0.2-0.2-0.2_slxestwithnobnds/opt.rdata")
df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("WC_TWL", "WC_FIX","AK_FIX"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3]
)
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v3L",'shire_v4L')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =   df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-07-59y_v4L_M=0.2-0.2-0.2-0.2_slxestwithnobnds/opt.rdata")
df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
df$parms$log_srv_slx_pars
rm(list = ls())
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
## OM_Master.R
## M S Kapur
## Inspiration from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v3L",'shire_v4L')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =   df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-07-59y_v4L_M=0.2-0.2-0.2-0.2_slxestwithnobnds/opt.rdata")
df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
mappy
array(mappy$log_fsh_slx_pars, dim = c(df$nfleets_fish,2,1,2), dimnames = dimnames(df$parms$log_fsh_slx_pars))
array(mappy$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,1,2), dimnames = dimnames(df$parms$log_srv_slx_pars))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[3])
## confirm that we've only bounded unfixed fleets by number
length(bounds$upper[names(bounds$upper)=='log_fsh_slx_pars'])== length(mappy$log_fsh_slx_pars[!is.na(mappy$log_fsh_slx_pars)])
length(bounds$upper[names(bounds$upper)=='log_fsh_slx_pars'])
length(bounds$upper[names(bounds$upper)=='log_srv_slx_pars'])== length(mappy$log_srv_slx_pars[!is.na(mappy$log_srv_slx_pars)])
length(bounds$upper[names(bounds$upper)=='log_srv_slx_pars'])
length(mappy$log_srv_slx_pars[!is.na(mappy$log_srv_slx_pars)])
mappy$log_srv_slx_pars
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
rm(list = ls(
))
## OM_Master.R
## M S Kapur
## Inspiration from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v3L",'shire_v4L')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =   df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-07-59y_v4L_M=0.2-0.2-0.2-0.2_slxestwithnobnds/opt.rdata")
# df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
#                                    dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
# "log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
mappy
array(mappy$log_fsh_slx_pars, dim = c(df$nfleets_fish,2,1,2), dimnames = dimnames(df$parms$log_fsh_slx_pars))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
bounds
exp(4.24)
## confirm that we've only bounded unfixed fleets by number
length(bounds$upper[names(bounds$upper)=='log_fsh_slx_pars']) == length(mappy$log_fsh_slx_pars[!is.na(mappy$log_fsh_slx_pars)])
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
dlnorm(log(10),log(4), 0.6,TRUE )
dlnorm(log(10),log(4), 0.6+0.2,TRUE )
exp(-1.6)
exp(-1.7)
rm(list = ls())
## OM_Master.R
## M S Kapur
## Inspiration from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v3L",'shire_v4L')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =   df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
df$catch_yf_error
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-07-59y_v4L_M=0.2-0.2-0.2-0.2_slxestwithnobnds/opt.rdata")
# df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
#                                    dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
# "log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
df$yRun =  30# df$tEnd-1 ## number of years to run model
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
opt$time_for_MLE
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
writeOM(dat=dat,obj = obj, opt = opt, rep=rep, cppname =cppname, mappy = mappy,
runname = paste0("-",df$yRun,"y_",cppname,"_M=",
paste(df$parms$mort_k,collapse="-"),
"_wcselFixed_somesurvFixed"))
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(dat=dat,obj = obj, opt = opt, rep=rep, cppname =cppname, mappy = mappy,
runname = paste0("-",df$yRun,"y_",cppname,"_M=",
paste(df$parms$mort_k,collapse="-"),
"_allslxest_custombounds"))
opt$max_gradient
opt$diagnostics
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars")
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE) %>%
# filter(Param =="log_srv_slx_pars") %>%
# select(fixed) %>%
# ungroup() %>%
array(., dim = c(3*2*2,2,1,2))
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE)
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE) %>%
data.frame() %>%
# filter(Param =="log_srv_slx_pars") %>%
# select(fixed) %>%
# ungroup() %>%
array(., dim = c(3*2*2,2,1,2))
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE) %>%
matrix() %>%
# filter(Param =="log_srv_slx_pars") %>%
# select(fixed) %>%
# ungroup() %>%
array(., dim = c(3*2*2,2,1,2))
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE)
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE) %>%
# filter(Param =="log_srv_slx_pars") %>%
# select(fixed) %>%
# ungroup() %>%
array(as.numeric(exp(.)), dim = c(3*2*2,2,1,2))
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE) %>%
data.frame() %>%
# filter(Param =="log_srv_slx_pars") %>%
# select(fixed) %>%
# ungroup() %>%
array(as.numeric(exp(.)), dim = c(3*2*2,2,1,2))
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE) %>%
data.frame(exp(.)) %>%
# filter(Param =="log_srv_slx_pars") %>%
# select(fixed) %>%
# ungroup() %>%
array(as.numeric(.), dim = c(3*2*2,2,1,2))
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE) %>%
data.frame(exp(.))
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE) %>%
exp(.)
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE) %>%
exp(.) %>%
# filter(Param =="log_srv_slx_pars") %>%
# select(fixed) %>%
# ungroup() %>%
array(as.numeric(.), dim = c(3*2*2,2,1,2))
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE) %>%
exp(.) %>%
# filter(Param =="log_srv_slx_pars") %>%
# select(fixed) %>%
# ungroup() %>%
array(., dim = c(3*2*2,2,1,2))
opt$diagnostics %>%
# mutate('fixed' = starting_value == MLE) %>%
# group_by(Param) %>%
filter(Param =="log_fsh_slx_pars") %>%
select(MLE) %>%
exp(.)
## OM_Master.R
## M S Kapur
## Inspiration from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v3L",'shire_v4L')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
## Inspiration from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v3L",'shire_v4L')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =  30# df$tEnd-1 ## number of years to run model
df$yRun =   df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
# "log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
mappy
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
## confirm that we've only bounded unfixed fleets by number
# length(bounds$upper[names(bounds$upper)=='log_fsh_slx_pars']) == length(mappy$log_fsh_slx_pars[!is.na(mappy$log_fsh_slx_pars)])
# length(bounds$upper[names(bounds$upper)=='log_srv_slx_pars']) == length(mappy$log_srv_slx_pars[!is.na(mappy$log_srv_slx_pars)])
with(bounds, array(exp(lower[names(lower)=='log_fsh_slx_pars']), dim = c(7,2,1,2),
dimnames = list(df$fltnames_fish)))
with(bounds, array(exp(upper[names(upper)=='log_srv_slx_pars']), dim = c(5,2,1,2)))
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)

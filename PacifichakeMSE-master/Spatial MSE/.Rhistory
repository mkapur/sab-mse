}else{
pseltmp <- psel
}
}
if(df$selectivity_change ==1){
if(space == 1){
pseltmp <- psel
}else{
pseltmp <- c(0.05,0.05,0,0,0)
}
}
if(df$selectivity_change ==2){
pseltmp <- df$psel[2,]+df$parms$PSEL[,ncol(df$parms$PSEL)]*df$sigma_psel}
}
p.save[yr] <- sum(pseltmp)
#
Fsel <- getSelec(age,pseltmp,df$Smin,df$Smax) # Constant over space right now
rm(pseltmp)
Fsel.save[yr,space,] <- Fsel
if(df$years[yr]<= 2018){
Catch_space <- df$Catch.country[yr,space]
}else{
Catch_space <- df$Catch[yr]*Fspace[space]
}
E.temp <- Catch_space*Fnseason[season]#*Fspace[space] # Catch distribution in the year
B.tmp <-  sum(N.save.age[,yr,space,season]*exp(-Mseason*pope.mul)*w_catch*Fsel) # Get biomass from previous year
N.tmp <- N.save.age[,yr,space,season]#
V.save[yr,space,season] <- B.tmp
Catch.quota[yr,space,season] <- E.temp
if(E.temp/B.tmp >= .9){
if(df$years[yr] < 2018){
stop(paste('Catch exceeds available biomass in year:',year,' and season', season, 'area', space)) # Stop if in the past
}
#print(paste('Catch exceeds available biomass in year:',year,' and season', season, 'area', space))
E.temp <- 0.75*B.tmp
Catch.quota.N[yr,space,season] <- 1
#if(df$years[yr] > 2026){
#stop('danger')
#  }
}
Fout <- getF(E.temp,B.tmp, season, space, Mseason = Mseason, Fsel = Fsel, N.tmp = N.tmp, w_catch = w_catch)
Fout <- Fout
for (yr in 1:nyear){ # Loop over years add one year for initial distribution
#if(year[yr] < year[df$selYear] | year[yr] > 2017){
# }else{
#   psel <- df$parms$psel_fish+df$parms$PSEL[,yr-df$selYear+1]
# }
if(year[yr] < 2018){
w_catch <- df$wage_catch[,yr]
w_surv <- df$wage_survey[,yr]
w_mid <- df$wage_mid[,yr]
}else{
w_catch <- df$wage_catch[,1]
w_surv <- df$wage_survey[,1]
w_mid <- df$wage_mid[,1]
}
if (year[yr] < 2018){
Ry <- df$parms$Rin[yr]
}else{
Ry <- df$parms$Rin[yr]
#    Ry <- 0
}
# Fyear <- F0[yr]*Fsel
Myear <- M # Natural mortality
## add these to load data seasons
# Fnseason <- matrix(1, nseason)
# Fnseason <- Fnseason/sum(Fnseason)
# Fnseason <- c(0,0.5,0.5,0)
if(nseason == 1){
Fnseason = 1
}
if(df$move == FALSE){
Fspace <- 1 # All catches in the south
}
Mseason <- Myear/nseason # M is distributed throughout the year
# fix Ssb and recruitment in all areas
for(space in 1:nspace){
SSB[yr,space] <-sum(N.save.age[,yr,space,1]*Mat.sel, na.rm = TRUE)
SSB.weight[yr,space] <- sum(N.save.age[,yr,space,1]*as.numeric(df$wage_ssb[,yr]), na.rm = TRUE)
SSB.all[1,1,space]<- sum(N.save.age[,1,space,1]*Mat.sel, na.rm = TRUE)
# Recruitment only in season 1
R <- (4*h*R_0[space]*SSB[yr,space]/
(SSB_0[space]*(1-h)+ SSB[yr,space]*(5*h-1)))*exp(-0.5*df$b[yr]*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,yr,space,1] <- R
}
for (season in 1:nseason){
for (space in 1:nspace){
# Get the selectivity of the season and area
psel <- df$psel[space,]
if(year[yr] > year[df$selYear-1] & year[yr]<2019){
pseltmp <- psel+df$parms$PSEL[,yr-df$selYear+1]*df$sigma_psel
}else{
pseltmp <- psel
}
if(year[yr] >2018){
if(df$selectivity_change == 0){
if(space == 1){
pseltmp <- c(1,1,1,1,1)
}else{
pseltmp <- psel
}
}
if(df$selectivity_change ==1){
if(space == 1){
pseltmp <- psel
}else{
pseltmp <- c(0.05,0.05,0,0,0)
}
}
if(df$selectivity_change ==2){
pseltmp <- df$psel[2,]+df$parms$PSEL[,ncol(df$parms$PSEL)]*df$sigma_psel}
}
p.save[yr] <- sum(pseltmp)
#
Fsel <- getSelec(age,pseltmp,df$Smin,df$Smax) # Constant over space right now
rm(pseltmp)
Fsel.save[yr,space,] <- Fsel
if(df$years[yr]<= 2018){
Catch_space <- df$Catch.country[yr,space]
}else{
Catch_space <- df$Catch[yr]*Fspace[space]
}
E.temp <- Catch_space*Fnseason[season]#*Fspace[space] # Catch distribution in the year
B.tmp <-  sum(N.save.age[,yr,space,season]*exp(-Mseason*pope.mul)*w_catch*Fsel) # Get biomass from previous year
N.tmp <- N.save.age[,yr,space,season]#
V.save[yr,space,season] <- B.tmp
Catch.quota[yr,space,season] <- E.temp
if(E.temp/B.tmp >= .9){
if(df$years[yr] < 2018){
stop(paste('Catch exceeds available biomass in year:',year,' and season', season, 'area', space)) # Stop if in the past
}
#print(paste('Catch exceeds available biomass in year:',year,' and season', season, 'area', space))
E.temp <- 0.75*B.tmp
Catch.quota.N[yr,space,season] <- 1
#if(df$years[yr] > 2026){
#stop('danger')
#  }
}
Fout <- getF(E.temp,B.tmp, season, space, Mseason = Mseason, Fsel = Fsel, N.tmp = N.tmp, w_catch = w_catch)
Fout <- Fout
#Fout <- df$parms$F0[yr]
if(E.temp>0){
Fseason <- Fout*Fsel
Fnew <- Fout
Z <- Fnew*Fsel+Mseason
Fseason <- Fnew*Fsel
}else{
Fseason <- 0
}
Fout.save[yr,season,space] <- Fout # terminal fishing mortality
Fseason.save[,yr,season,space] <- Fseason
Z <- Mseason+Fseason
Z.save[,yr,space,season]<- Z
# Iterate to exactly match catch
#Fseason <- Fyear*Fnseason[season]*Fspace[space]
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
if(df$move == FALSE){
spaceidx <- 1
}
if(season <nseason){
N.save.age[,yr,space,season+1] <- N.save.age[,yr,space,season]*exp(-Z)-
N.save.age[, yr,space,season]*exp(-Z)*(movemat[space,,season,yr])+ # Remove the ones that leave
N.save.age[, yr,spaceidx,season]*exp(-Z)*(movemat[spaceidx,,season,yr])# add the ones come to the surrounding areas
age_comps_OM[,yr,space,season] <- N.save.age[, yr,space,season]/sum(N.save.age[, yr,space,season])
SSB.all[yr,season,space]<- sum(N.save.age[,yr,space,season]*Mat.sel, na.rm = T)
Catch.save.age[, yr,space, season] <- (Fseason/(Z))*(1-exp(-(Z)))*N.save.age[,yr,space,season]*w_catch
CatchN.save.age[, yr,space, season] <- (Fseason/(Z))*(1-exp(-(Z)))*N.save.age[,yr,space,season]
}else{
N.save.age[2:(nage-1),yr+1,space,1] <- N.save.age[1:(nage-2),yr,space,season]*exp(-Z[1:(nage-2)])-
N.save.age[1:(nage-2), yr,space,season]*exp(-Z[1:(nage-2)])*(movemat[space,1:(nage-2),season,yr])+ # Remove the ones that leave
N.save.age[1:(nage-2), yr,spaceidx,season]*exp(-Z[1:(nage-2)])*(movemat[spaceidx,1:(nage-2),season,yr])# add the ones come to the surrounding areas
# Plus group
Nsurvive.plus <- (N.save.age[nage-1, yr,space, nseason]*exp(-Z[nage-1])+
N.save.age[nage, yr,space, nseason]*exp(-Z[nage]))
Nout.plus <- Nsurvive.plus*(movemat[space,nage, season,yr]) # Leaving
Nin.plus <- (N.save.age[nage-1, yr,spaceidx,nseason]*exp(-Z[nage-1])+
N.save.age[nage, yr,spaceidx,nseason]*exp(-Z[nage]))*
(movemat[spaceidx,nage, season,yr]) # Incoming
N.save.age[nage,yr+1,space,1] <- Nsurvive.plus- Nout.plus + Nin.plus
age_comps_OM[,yr,space,season] <- N.save.age[, yr,space,season]/sum(N.save.age[, yr,space,season])
SSB.all[yr,season,space]<- sum(N.save.age[,yr,space,season]*Mat.sel, na.rm = T)
Catch.save.age[, yr,space, season] <- (Fseason/(Z))*(1-exp(-(Z)))*N.save.age[,yr,space,season]*w_catch
CatchN.save.age[, yr,space, season] <- (Fseason/(Z))*(1-exp(-(Z)))*N.save.age[,yr,space,season]
}
if(is.na(SSB[yr,space])){
stop('SSB is NA')
}
}
if(Catch.quota[yr,space,season]>0){
if((sum(Catch.save.age[, yr,space, season])/Catch.quota[yr,space,season]) > 1.05){
stop('F estimation overshoots more than 10%')
}
}
} # End of season loop
#Catch.age[,idx]  <- (Fyear/(Fyear+Myear))*(1-exp(-(Fyear+Myear)))*rowSums(N.save.age[,idx,,1])*w_catch # Calculate the catch in kg
if(nseason>1){
Catch.age[,yr] <- apply(Catch.save.age[,yr,,],MARGIN = 1,FUN = sum)
Catch[yr] <- sum(Catch.save.age[,yr,,])
CatchN.age[,yr] <- apply(CatchN.save.age[,yr,,],MARGIN = 1,FUN = sum)
CatchN[yr] <- sum(CatchN.save.age[,yr,,])
}else{
if(nspace == 1){
Catch.age[,yr] <- Catch.save.age[,yr,,]
Catch[yr] <- sum(Catch.save.age[,yr,,])
CatchN.age[,yr] <- CatchN.save.age[,yr,,]
CatchN[yr] <- sum(CatchN.save.age[,yr,,])
}else{
Catch.age[,yr] <- rowSums(Catch.save.age[,yr,,])
Catch[yr] <- sum(Catch.save.age[,yr,,])
CatchN.age[,yr] <- rowSums(CatchN.save.age[,yr,,])
CatchN[yr] <- sum(CatchN.save.age[,yr,,])
}
}
Msurveymul <- 0
for (space in 1:nspace){
survey.true[space,yr] <- sum(N.save.age[,yr,space,df$surveyseason]*
exp(-Msurveymul*Z.save[,yr,space,df$surveyseason])*surv.sel*q*w_surv)
}
#  }
# Save the survey
# Survey is conducted in the start of the year
# }else{
#   Msurveymul <- 0.5
# }
if(df$move == FALSE){
Nsurv <- N.save.age[,yr,,df$surveyseason]*
exp(-Msurveymul*Z.save[,yr,space,df$surveyseason])
}else{
Nsurv <- rowSums(N.save.age[,yr,,df$surveyseason]*
exp(-Msurveymul*Z.save[,yr,space,df$surveyseason]))
}
if (df$flag_survey[yr] == 1){
if(year[yr] > 1990){
err <- rnorm(n = 1,mean = 0, sd = surv.sd)
surv <- exp(log(sum(Nsurv*surv.sel*q*w_surv))+err) # If the xtra factor is not included the mean is > 1
}else{
surv <- sum(Nsurv*surv.sel*q*w_surv)
}
survey[yr] <- surv
}else{
survey[yr] <- 1
}
Ntot.year <- Nsurv
surv.tmp <- sum(Ntot.year*surv.sel*q)
if(df$flag_survey[yr] == 1){
age_comps_surv[1,yr] <- 0 # No year 1 recorded
age_comps_surv[1:(df$age_maxage-1),yr] <-  (Ntot.year[2:(df$age_maxage)]*surv.sel[2:(df$age_maxage)]*q)/surv.tmp
age_comps_surv[df$age_maxage,yr] <- sum(Ntot.year[(df$age_maxage+1):nage]*surv.sel[(df$age_maxage+1):nage]*q)/surv.tmp
}else{
age_comps_surv[,yr] <- NA
}
for(space in 1:nspace){
Ntot.year <- N.save.age[,yr,space,df$surveyseason]
surv.tot[yr,space]  <- sum(Ntot.year*surv.sel*q)
age_comps_surv_space[1,yr,space] <- 0 # No year 1 recorded
age_comps_surv_space[1:(df$age_maxage-1),yr,space] <-
(Ntot.year[2:(df$age_maxage)]*surv.sel[2:(df$age_maxage)]*q)/surv.tot[yr,space]
age_comps_surv_space[df$age_maxage,yr,space] <-
sum(Ntot.year[(df$age_maxage+1):nage]*surv.sel[(df$age_maxage+1):nage]*q)/surv.tot[yr,space]
if(nseason>1){
Catch.tmp <- rowSums(CatchN.save.age[, yr,space,])
}else{
Catch.tmp <- CatchN.save.age[, yr,space,]
}
Catch.tot <- sum(CatchN.save.age[,yr,space,])
age_comps_catch_space[1:(df$age_maxage-1),yr,space] <- Catch.tmp[2:(df$age_maxage)]/Catch.tot
age_comps_catch_space[df$age_maxage,yr,space] <- sum(Catch.tmp[(df$age_maxage+1):nage])/Catch.tot
}
#
if(df$flag_catch[yr] == 1){
age_comps_catch[1:(df$age_maxage-1),yr] <-  CatchN.age[2:(df$age_maxage),yr]/CatchN[yr]
age_comps_catch[df$age_maxage,yr] <- sum(CatchN.age[(df$age_maxage+1):nage,yr])/CatchN[yr]
}else{
age_comps_catch[,yr] <- NA
}
}# End of year loop
#
if(df$flag_catch[yr] == 1){
age_comps_catch[1:(df$age_maxage-1),yr] <-  CatchN.age[2:(df$age_maxage),yr]/CatchN[yr]
age_comps_catch[df$age_maxage,yr] <- sum(CatchN.age[(df$age_maxage+1):nage,yr])/CatchN[yr]
}else{
age_comps_catch[,yr] <- NA
}
yr
#if(year[yr] < year[df$selYear] | year[yr] > 2017){
# }else{
#   psel <- df$parms$psel_fish+df$parms$PSEL[,yr-df$selYear+1]
# }
if(year[yr] < 2018){
w_catch <- df$wage_catch[,yr]
w_surv <- df$wage_survey[,yr]
w_mid <- df$wage_mid[,yr]
}else{
w_catch <- df$wage_catch[,1]
w_surv <- df$wage_survey[,1]
w_mid <- df$wage_mid[,1]
}
if (year[yr] < 2018){
Ry <- df$parms$Rin[yr]
}else{
Ry <- df$parms$Rin[yr]
#    Ry <- 0
}
# Fyear <- F0[yr]*Fsel
Myear <- M # Natural mortality
if(nseason == 1){
Fnseason = 1
}
if(df$move == FALSE){
Fspace <- 1 # All catches in the south
}
Mseason <- Myear/nseason # M is distributed throughout the year
# fix Ssb and recruitment in all areas
for(space in 1:nspace){
SSB[yr,space] <-sum(N.save.age[,yr,space,1]*Mat.sel, na.rm = TRUE)
SSB.weight[yr,space] <- sum(N.save.age[,yr,space,1]*as.numeric(df$wage_ssb[,yr]), na.rm = TRUE)
SSB.all[1,1,space]<- sum(N.save.age[,1,space,1]*Mat.sel, na.rm = TRUE)
# Recruitment only in season 1
R <- (4*h*R_0[space]*SSB[yr,space]/
(SSB_0[space]*(1-h)+ SSB[yr,space]*(5*h-1)))*exp(-0.5*df$b[yr]*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,yr,space,1] <- R
}
for (season in 1:nseason){
for (space in 1:nspace){
# Get the selectivity of the season and area
psel <- df$psel[space,]
if(year[yr] > year[df$selYear-1] & year[yr]<2019){
pseltmp <- psel+df$parms$PSEL[,yr-df$selYear+1]*df$sigma_psel
}else{
pseltmp <- psel
}
if(year[yr] >2018){
if(df$selectivity_change == 0){
if(space == 1){
pseltmp <- c(1,1,1,1,1)
}else{
pseltmp <- psel
}
}
if(df$selectivity_change ==1){
if(space == 1){
pseltmp <- psel
}else{
pseltmp <- c(0.05,0.05,0,0,0)
}
}
if(df$selectivity_change ==2){
pseltmp <- df$psel[2,]+df$parms$PSEL[,ncol(df$parms$PSEL)]*df$sigma_psel}
}
p.save[yr] <- sum(pseltmp)
#
Fsel <- getSelec(age,pseltmp,df$Smin,df$Smax) # Constant over space right now
rm(pseltmp)
Fsel.save[yr,space,] <- Fsel
if(df$years[yr]<= 2018){
Catch_space <- df$Catch.country[yr,space]
}else{
Catch_space <- df$Catch[yr]*Fspace[space]
}
E.temp <- Catch_space*Fnseason[season]#*Fspace[space] # Catch distribution in the year
B.tmp <-  sum(N.save.age[,yr,space,season]*exp(-Mseason*pope.mul)*w_catch*Fsel) # Get biomass from previous year
N.tmp <- N.save.age[,yr,space,season]#
V.save[yr,space,season] <- B.tmp
Catch.quota[yr,space,season] <- E.temp
if(E.temp/B.tmp >= .9){
if(df$years[yr] < 2018){
stop(paste('Catch exceeds available biomass in year:',year,' and season', season, 'area', space)) # Stop if in the past
}
#print(paste('Catch exceeds available biomass in year:',year,' and season', season, 'area', space))
E.temp <- 0.75*B.tmp
Catch.quota.N[yr,space,season] <- 1
#if(df$years[yr] > 2026){
#stop('danger')
#  }
}
Fout <- getF(E.temp,B.tmp, season, space, Mseason = Mseason, Fsel = Fsel, N.tmp = N.tmp, w_catch = w_catch)
Fout <- Fout
#Fout <- df$parms$F0[yr]
if(E.temp>0){
Fseason <- Fout*Fsel
Fnew <- Fout
Z <- Fnew*Fsel+Mseason
Fseason <- Fnew*Fsel
}else{
Fseason <- 0
}
Fout.save[yr,season,space] <- Fout # terminal fishing mortality
Fseason.save[,yr,season,space] <- Fseason
Z <- Mseason+Fseason
Z.save[,yr,space,season]<- Z
# Iterate to exactly match catch
#Fseason <- Fyear*Fnseason[season]*Fspace[space]
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
if(df$move == FALSE){
spaceidx <- 1
}
if(season <nseason){
N.save.age[,yr,space,season+1] <- N.save.age[,yr,space,season]*exp(-Z)-
N.save.age[, yr,space,season]*exp(-Z)*(movemat[space,,season,yr])+ # Remove the ones that leave
N.save.age[, yr,spaceidx,season]*exp(-Z)*(movemat[spaceidx,,season,yr])# add the ones come to the surrounding areas
age_comps_OM[,yr,space,season] <- N.save.age[, yr,space,season]/sum(N.save.age[, yr,space,season])
SSB.all[yr,season,space]<- sum(N.save.age[,yr,space,season]*Mat.sel, na.rm = T)
Catch.save.age[, yr,space, season] <- (Fseason/(Z))*(1-exp(-(Z)))*N.save.age[,yr,space,season]*w_catch
CatchN.save.age[, yr,space, season] <- (Fseason/(Z))*(1-exp(-(Z)))*N.save.age[,yr,space,season]
}else{
N.save.age[2:(nage-1),yr+1,space,1] <- N.save.age[1:(nage-2),yr,space,season]*exp(-Z[1:(nage-2)])-
N.save.age[1:(nage-2), yr,space,season]*exp(-Z[1:(nage-2)])*(movemat[space,1:(nage-2),season,yr])+ # Remove the ones that leave
N.save.age[1:(nage-2), yr,spaceidx,season]*exp(-Z[1:(nage-2)])*(movemat[spaceidx,1:(nage-2),season,yr])# add the ones come to the surrounding areas
# Plus group
Nsurvive.plus <- (N.save.age[nage-1, yr,space, nseason]*exp(-Z[nage-1])+
N.save.age[nage, yr,space, nseason]*exp(-Z[nage]))
Nout.plus <- Nsurvive.plus*(movemat[space,nage, season,yr]) # Leaving
Nin.plus <- (N.save.age[nage-1, yr,spaceidx,nseason]*exp(-Z[nage-1])+
N.save.age[nage, yr,spaceidx,nseason]*exp(-Z[nage]))*
(movemat[spaceidx,nage, season,yr]) # Incoming
N.save.age[nage,yr+1,space,1] <- Nsurvive.plus- Nout.plus + Nin.plus
age_comps_OM[,yr,space,season] <- N.save.age[, yr,space,season]/sum(N.save.age[, yr,space,season])
SSB.all[yr,season,space]<- sum(N.save.age[,yr,space,season]*Mat.sel, na.rm = T)
Catch.save.age[, yr,space, season] <- (Fseason/(Z))*(1-exp(-(Z)))*N.save.age[,yr,space,season]*w_catch
CatchN.save.age[, yr,space, season] <- (Fseason/(Z))*(1-exp(-(Z)))*N.save.age[,yr,space,season]
}
if(is.na(SSB[yr,space])){
stop('SSB is NA')
}
}
if(Catch.quota[yr,space,season]>0){
if((sum(Catch.save.age[, yr,space, season])/Catch.quota[yr,space,season]) > 1.05){
stop('F estimation overshoots more than 10%')
}
}
} # End of season loop
if(nseason>1){
Catch.age[,yr] <- apply(Catch.save.age[,yr,,],MARGIN = 1,FUN = sum)
Catch[yr] <- sum(Catch.save.age[,yr,,])
CatchN.age[,yr] <- apply(CatchN.save.age[,yr,,],MARGIN = 1,FUN = sum)
CatchN[yr] <- sum(CatchN.save.age[,yr,,])
}else{
if(nspace == 1){
Catch.age[,yr] <- Catch.save.age[,yr,,]
Catch[yr] <- sum(Catch.save.age[,yr,,])
CatchN.age[,yr] <- CatchN.save.age[,yr,,]
CatchN[yr] <- sum(CatchN.save.age[,yr,,])
}else{
Catch.age[,yr] <- rowSums(Catch.save.age[,yr,,])
Catch[yr] <- sum(Catch.save.age[,yr,,])
CatchN.age[,yr] <- rowSums(CatchN.save.age[,yr,,])
CatchN[yr] <- sum(CatchN.save.age[,yr,,])
}
}
#if(year[yr] < year[df$selYear] | year[yr] > 2017){
# }else{
#   psel <- df$parms$psel_fish+df$parms$PSEL[,yr-df$selYear+1]
# }
if(year[yr] < 2018){
w_catch <- df$wage_catch[,yr]
w_surv <- df$wage_survey[,yr]
w_mid <- df$wage_mid[,yr]
}else{
w_catch <- df$wage_catch[,1]
w_surv <- df$wage_survey[,1]
w_mid <- df$wage_mid[,1]
}
if (year[yr] < 2018){
Ry <- df$parms$Rin[yr]
}else{
Ry <- df$parms$Rin[yr]
#    Ry <- 0
}
# Fyear <- F0[yr]*Fsel
Myear <- M # Natural mortality
if(nseason == 1){
Fnseason = 1
}
if(df$move == FALSE){
Fspace <- 1 # All catches in the south
}
Mseason <- Myear/nseason # M is distributed throughout the year
# fix Ssb and recruitment in all areas
for(space in 1:nspace){
SSB[yr,space] <-sum(N.save.age[,yr,space,1]*Mat.sel, na.rm = TRUE)
SSB.weight[yr,space] <- sum(N.save.age[,yr,space,1]*as.numeric(df$wage_ssb[,yr]), na.rm = TRUE)
SSB.all[1,1,space]<- sum(N.save.age[,1,space,1]*Mat.sel, na.rm = TRUE)
# Recruitment only in season 1
R <- (4*h*R_0[space]*SSB[yr,space]/
(SSB_0[space]*(1-h)+ SSB[yr,space]*(5*h-1)))*exp(-0.5*df$b[yr]*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,yr,space,1] <- R
}
df$wage_ssb[,yr
]
dim(df$wage_ssb)
nyear
dim(df$wage_catch)
length(df$years)
df$years

control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
rep1$surv_yf_pred
system.time(rep1 <- obj$report())
rep1$surv_yf_pred
dat = rep1
survey_yf_predt <- data.frame(dat$surv_yf_pred)
names(survey_yf_predt) <- df$fltnames_surv
survey_yf_predt <- survey_yf_predt %>%
mutate(Year = years) %>%
melt(id = 'Year') %>%
mutate(Type = 'PRED') %>%
mutate(REG = substr(variable,0,2)) %>%
filter(value > 0)
survey_yf_errt <- data.frame(df$surv_yf_err) %>%
mutate(Year = years) %>%
melt(id = 'Year') %>%
filter(!is.na(value))
survey_yf_obst <- data.frame( df$surv_yf_obs)  %>%
mutate(Year = years) %>%
melt(id = 'Year') %>%
filter(value > 0) %>%
merge(survey_yf_errt, by = c('Year','variable')) %>%
mutate(value = value.x) %>%
## convert CV to SD via CV = mean/sd
## we think these are sds in mt (input to model as log)
mutate(Type = 'OBS',
lci = round(value - value*(value.y)),
uci = round(value + (value*value.y))) %>%
mutate(REG = substr(variable,0,2)) %>%
select(Year, variable, value, lci, uci)
years <- 1960:2019
nyear <- length(years)
tEnd <- length(years)
age <- 0:70
nage <- length(age)
survey_yf_predt <- data.frame(dat$surv_yf_pred)
names(survey_yf_predt) <- df$fltnames_surv
survey_yf_predt <- survey_yf_predt %>%
mutate(Year = years) %>%
melt(id = 'Year') %>%
mutate(Type = 'PRED') %>%
mutate(REG = substr(variable,0,2)) %>%
filter(value > 0)
survey_yf_errt <- data.frame(df$surv_yf_err) %>%
mutate(Year = years) %>%
melt(id = 'Year') %>%
filter(!is.na(value))
survey_yf_obst <- data.frame( df$surv_yf_obs)  %>%
mutate(Year = years) %>%
melt(id = 'Year') %>%
filter(value > 0) %>%
merge(survey_yf_errt, by = c('Year','variable')) %>%
mutate(value = value.x) %>%
## convert CV to SD via CV = mean/sd
## we think these are sds in mt (input to model as log)
mutate(Type = 'OBS',
lci = round(value - value*(value.y)),
uci = round(value + (value*value.y))) %>%
mutate(REG = substr(variable,0,2)) %>%
select(Year, variable, value, lci, uci)
ggplot(data = survey_yf_obst,
aes(x = Year, y = value, color = variable)) +
geom_line(data = survey_yf_predt, lwd = 0.75) +
scale_color_manual(values = survfltPal) +
geom_point(pch = 1, fill = NA, col = 'black') +
geom_errorbar(aes(ymin = lci, ymax = uci), col = 'black',width=0) +
scale_x_continuous(limits = c(1980,ifelse(df$yRun == 59,2021,1959+df$yRun)),
breaks = seq(1980,1960+df$yRun,10),
labels = seq(1980,1960+df$yRun,10)) +
theme_sleek() +
theme(legend.position = 'none')+
labs(y = 'survey', color = 'Fishing Fleet')+
facet_wrap(~variable, scales = "free_y")
survey_yf_predt
## 2019 Sab WC SS ----
wc <- SS_output(here("input","raw_data","2019 WC Stock Assessment"))
require(tidyverse)
require(reshape2)
require(r4ss)
require(here)
require(ggplot2)
require(ggsidekick)
require(PNWColors)
## 2019 Sab WC SS ----
wc <- SS_output(here("input","raw_data","2019 WC Stock Assessment"))
wc$derived_quants
wc$timeseries
wc$derived_quants[grep("SSB_", wc$derived_quants$Label),]
rm(list = ls())
paste0("-",df$yRun-1,"y_",cppname,
# "_M=", paste(df$parms$mort_k,collapse="-"),
"_baseQ=WCGBTS",
"_fshfixed_wcbcearlyfixed_withbounds")
dllUSE = c("shire_v4L",'shire_v4')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v4L",'shire_v4')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-
df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <-  df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
df$acomp_yafs_obs
df$fltnames_acomp
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-
df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <-  df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
load(here("output","2020-12-17-59y_v4L_baseQ=WCGBTS_fshfixed_wcbcearlyfixed_withbounds/opt.rdata"))
df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
rm(opt)
load(here("output","2020-12-17-59y_v4L_baseQ=WCGBTS_fshfixed_wcbcearlyfixed_withbounds/opt.rdata"))
df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
rm(opt)
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
load(here("output","2020-12-17-59y_v4L_baseQ=WCGBTS_fshfixed_wcbcearlyfixed_withbounds/opt.rdata"))
rm(opt)
load(here("output","2020-12-17-59y_v4L_baseQ=WCGBTS_fshfixed_wcbcearlyfixed_withbounds/opt.rdata"))
df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
rm(opt)
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh", "WC_VAST","BC_EARLY"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(rep1 <- obj$report()) ## one off caclulation using start pars
head(rep1$Length_yais_beg)
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v4L",'shire_v4')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-
df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <-  df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
load(here("output","2020-12-17-59y_v4L_baseQ=WCGBTS_fshfixed_wcbcearlyfixed_withbounds/opt.rdata"))
df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
rm(opt)
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh", "WC_VAST","BC_EARLY"))
# array(mappy$log_fsh_slx_pars, dim = c(df$nfleets_fish,2,1,2), dimnames = dimnames(df$parms$log_fsh_slx_pars))
# array(mappy$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,1,2),
#       dimnames = dimnames(df$parms$log_srv_slx_pars))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(rep1 <- obj$report()) ## one off caclulation using start pars
head(rep1$Length_yais_beg)
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v4L",'shire_v4')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v4L",'shire_v4')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-
df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <-  df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
load(here("output","2020-12-17-59y_v4L_baseQ=WCGBTS_fshfixed_wcbcearlyfixed_withbounds/opt.rdata"))
df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
rm(opt)
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh", "WC_VAST","BC_EARLY"))
# array(mappy$log_fsh_slx_pars, dim = c(df$nfleets_fish,2,1,2), dimnames = dimnames(df$parms$log_fsh_slx_pars))
# array(mappy$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,1,2),
#       dimnames = dimnames(df$parms$log_srv_slx_pars))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(rep1 <- obj$report()) ## one off caclulation using start pars
rep1$surv_yf_pred
rep1$N_yais_beg
df$parms
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v4L",'shire_v4')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-
df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <-  df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
# load(here("output","2020-12-17-59y_v4L_baseQ=WCGBTS_fshfixed_wcbcearlyfixed_withbounds/opt.rdata"))
# df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
# dimnames = dimnames(df$parms$log_srv_slx_pars))
# df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
#                                    dimnames = dimnames(df$parms$log_fsh_slx_pars))
# rm(opt)
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh", "WC_VAST","BC_EARLY"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(rep1 <- obj$report()) ## one off caclulation using start pars
head(rep1$Length_yais_beg)
## OM_Master.R
## M S Kapur
## Inspiration & code guidance from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v4L",'shire_v4')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-
df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <-  df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
# load(here("output","2020-12-17-59y_v4L_baseQ=WCGBTS_fshfixed_wcbcearlyfixed_withbounds/opt.rdata"))
# df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
# dimnames = dimnames(df$parms$log_srv_slx_pars))
# df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
#                                    dimnames = dimnames(df$parms$log_fsh_slx_pars))
# rm(opt)
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh", "WC_VAST","BC_EARLY"))
# array(mappy$log_fsh_slx_pars, dim = c(df$nfleets_fish,2,1,2), dimnames = dimnames(df$parms$log_fsh_slx_pars))
# array(mappy$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,1,2),
#       dimnames = dimnames(df$parms$log_srv_slx_pars))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(rep1 <- obj$report())
head(rep1$Length_yais_mid)
## OM_Master.R
## M S Kapur
## Inspiration & code guidance from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v4L",'shire_v4')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-
df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <-  df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
# load(here("output","2020-12-17-59y_v4L_baseQ=WCGBTS_fshfixed_wcbcearlyfixed_withbounds/opt.rdata"))
# df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
# dimnames = dimnames(df$parms$log_srv_slx_pars))
# df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
#                                    dimnames = dimnames(df$parms$log_fsh_slx_pars))
# rm(opt)
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh", "WC_VAST","BC_EARLY"))
# array(mappy$log_fsh_slx_pars, dim = c(df$nfleets_fish,2,1,2), dimnames = dimnames(df$parms$log_fsh_slx_pars))
# array(mappy$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,1,2),
#       dimnames = dimnames(df$parms$log_srv_slx_pars))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(rep1 <- obj$report())
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
load(here("output","2020-12-17-59y_v4L_baseQ=WCGBTS_allest_lwrbounds/opt.rdata"))
df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
rm(opt)
load(here("output","2020-12-17-59y_v4L_baseQ=WCGBTS_allest_lwrbounds/opt.rdata"))
load(here("output","2020-12-15-59y_v4L_baseQ=WCGBTS_allest_lwrbounds/opt.rdata"))
df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
rm(opt)
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh", "WC_VAST","BC_EARLY"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v4L",'shire_v4')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v4L",'shire_v4')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v4L",'shire_v4')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-
df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <-  df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
load(here("output","2020-12-15-59y_v4L_baseQ=WCGBTS_allest_lwrbounds/opt.rdata"))
df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
rm(opt)
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
# "log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh", "WC_VAST","BC_EARLY"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v4L",'shire_v4')[2]
compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-23-59y_v4_baseQ=WCGBTS_lengthon/opt.rdata")
opt$max_gradient

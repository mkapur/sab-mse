arrange(.,Year,Fleet) %>%
tidyr::pivot_wider(names_from= Fleet, values_from = value) %>%
filter(Year > 1964 & Year < 2020) %>%
merge(., data.frame('Year' = 1960:2019), all = TRUE)
names(surv_vals)[2:6] <- paste(fltnames$NAME[fltnames$SURV][c(3,2,1,4,5)])
write.csv(surv_vals %>% select(fltnames_surv), here("input","input_data","OM_indices.csv"),row.names = FALSE) ## save in special order
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =   27# df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
# load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-07-59y_v4L_M=0.2-0.2-0.2-0.2_slxestwithnobnds/opt.rdata")
# df$parms$log
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
# "log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-10-59y_v4L_M=0.2-0.2-0.2-0.2_
allslxest_withbounds/opt.rdata")
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-10-59y_v4L_M=0.2-0.2-0.2-0.2_allslxest_withbounds/opt.rdata")
# df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
#                                    dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
bounds
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
opt$time_for_MLE
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(dat=dat,obj = obj, opt = opt, rep=rep, cppname =cppname, mappy = mappy,
runname = paste0("-",df$yRun,"y_",cppname,"_M=",
paste(df$parms$mort_k,collapse="-"),
"_srvslxest_withbounds"))
df$yRun
steep <- exp(opt$par[names(opt$par) == 'logh_k']); names(steep) <- paste0("h","_R",1:4);steep
logR_0 <- opt$par[names(opt$par) == 'logR_0k'];names(logR_0) <- paste0("logR_0","_R",1:4);logR_0
grep('all_fsh', names(mappy)
mappy
dim(df$parms$log_fsh_slx_pars)
length(df$parms$log_fsh_slx_pars)
# plot FISH selex ----
## bring estimates out and rearrange
if(length(mappy$log_fsh_slx_pars) == length(df$parms$log_fsh_slx_pars) )
length(mappy$log_fsh_slx_pars) == length(df$parms$log_fsh_slx_pars)
inputSel <- array(exp(df$parms$log_fsh_slx_pars),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
## if everythign fixed use
if(length(mappy$log_fsh_slx_pars) == length(df$parms$log_fsh_slx_pars) ){
inputSel <- array(exp(df$parms$log_fsh_slx_pars),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
} else{
inputSel <- array(exp(obj$par[grep('fsh_slx',names(obj$par))]),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
}
mapped_fsh_selnames <- c('AK_FIX','AK_TWL',paste(df$fltnames_fish[3:df$nfleets_fish]))
selP <- array(exp(opt$par[grep('fsh_slx',names(opt$par))]),
dim = c(7,2,1,2))
dimnames(selP)[[1]] <- mapped_fsh_selnames
fsh_sel_afs <- array(NA, dim = c(df$nage,
length(mapped_fsh_selnames),#df$nfleets_fish
2),
dimnames = list(c(df$age),
mapped_fsh_selnames,# c(paste(df$fltnames_fish)),
c('Fem','Mal')))
for(a in 1:df$nage){
for(s in 1:2){
for(fish_flt in 1:length(mapped_fsh_selnames)){
fsh_sel_afs[,fish_flt,s] <- getSelec2(sex = s,
selP = selP,
flt_idx = fish_flt,
selType = df$selType_fish[fish_flt],
selShape = df$selShape_fish[fish_flt])
}
}
}
par(mfrow = c(4,2) )
for(flt in 1:length(mapped_fsh_selnames)){
for(s in 1:2){
tmp <- fsh_sel_afs[,flt,s]
if(s == 1) plot(tmp,
col = sexPal[1],
type = 'l',
yaxt = 'n',
lwd = 2,
xlab = ifelse(df$selType_fish[flt] == 0,
'Age','Length'),
ylab = 'Selectivity',
lty = 1,
ylim = c(0,1),
main = mapped_fsh_selnames[flt], xlim = c(0,75),
col.main  = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt])
box(which = 'plot', lty = 'solid',
col = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt],
lwd = 2)
axis(2, at = seq(0,1,0.2), labels = seq(0,1,0.2))
if(s == 2) lines(tmp, col = sexPal[2], type = 'l', lty = 2, lwd = 2)
}
}
fsh_sel_afs
## if everythign fixed use
if(length(mappy$log_fsh_slx_pars) == length(df$parms$log_fsh_slx_pars) ){
inputSel <- array(exp(df$parms$log_fsh_slx_pars),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
selP <- array(exp(df$parms$log_fsh_slx_pars),
dim = c(7,2,1,2))
} else{
inputSel <- array(exp(obj$par[grep('fsh_slx',names(obj$par))]),
dim = dim(df$parms$log_fsh_slx_pars),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
selP <- array(exp(opt$par[grep('fsh_slx',names(opt$par))]),
dim = c(7,2,1,2))
}
mapped_fsh_selnames <- c('AK_FIX','AK_TWL',paste(df$fltnames_fish[3:df$nfleets_fish]))
dimnames(selP)[[1]] <- mapped_fsh_selnames
fsh_sel_afs <- array(NA, dim = c(df$nage,
length(mapped_fsh_selnames),#df$nfleets_fish
2),
dimnames = list(c(df$age),
mapped_fsh_selnames,# c(paste(df$fltnames_fish)),
c('Fem','Mal')))
selP
for(a in 1:df$nage){
for(s in 1:2){
for(fish_flt in 1:length(mapped_fsh_selnames)){
fsh_sel_afs[,fish_flt,s] <- getSelec2(sex = s,
selP = selP,
flt_idx = fish_flt,
selType = df$selType_fish[fish_flt],
selShape = df$selShape_fish[fish_flt])
}
}
}
for(flt in 1:length(mapped_fsh_selnames)){
for(s in 1:2){
tmp <- fsh_sel_afs[,flt,s]
if(s == 1) plot(tmp,
col = sexPal[1],
type = 'l',
yaxt = 'n',
lwd = 2,
xlab = ifelse(df$selType_fish[flt] == 0,
'Age','Length'),
ylab = 'Selectivity',
lty = 1,
ylim = c(0,1),
main = mapped_fsh_selnames[flt], xlim = c(0,75),
col.main  = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt])
box(which = 'plot', lty = 'solid',
col = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt],
lwd = 2)
axis(2, at = seq(0,1,0.2), labels = seq(0,1,0.2))
if(s == 2) lines(tmp, col = sexPal[2], type = 'l', lty = 2, lwd = 2)
}
}
par(mfrow = c(4,2) )
for(flt in 1:length(mapped_fsh_selnames)){
for(s in 1:2){
tmp <- fsh_sel_afs[,flt,s]
if(s == 1) plot(tmp,
col = sexPal[1],
type = 'l',
yaxt = 'n',
lwd = 2,
xlab = ifelse(df$selType_fish[flt] == 0,
'Age','Length'),
ylab = 'Selectivity',
lty = 1,
ylim = c(0,1),
main = mapped_fsh_selnames[flt], xlim = c(0,75),
col.main  = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt])
box(which = 'plot', lty = 'solid',
col = c(rep(mgmtPal[1],2), rep(mgmtPal[2],3),rep(mgmtPal[3],2))[flt],
lwd = 2)
axis(2, at = seq(0,1,0.2), labels = seq(0,1,0.2))
if(s == 2) lines(tmp, col = sexPal[2], type = 'l', lty = 2, lwd = 2)
}
}
rm(opt)
rm(obj)
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =  df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-10-59y_v4L_M=0.2-0.2-0.2-0.2_allslxest_withbounds/opt.rdata")
# df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
#                                    dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repreat for stability)
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c("shire_v3L",'shire_v4L')[2]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =  df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-10-59y_v4L_M=0.2-0.2-0.2-0.2_allslxest_withbounds/opt.rdata")
# df$parms$log_srv_slx_pars <- array(opt$par[names(opt$par) == 'log_srv_slx_pars'],dim= c(8,2,1,2),
#                                    dimnames = dimnames(df$parms$log_srv_slx_pars))
df$parms$log_fsh_slx_pars <- array(opt$par[names(opt$par) == 'log_fsh_slx_pars'],dim= c(7,2,1,2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
# "log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[3])
df$surv_yf_obs <- df$surv_yf_obs*10000
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$parms$logq_f
exp(df$parms$logq_f )
df$yRun =  df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
# df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
df$surv_yf_obs <- df$surv_yf_obs*10000
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
# "log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =  df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
# df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
df$surv_yf_obs <- df$surv_yf_obs*1000
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =  df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
# df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
df$surv_yf_obs <- df$surv_yf_obs*100
df$surv_yf_obs
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =  df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
# df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
df$surv_yf_obs[df$surv_yf_obs >0] <- df$surv_yf_obs*100
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =  df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
# df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
df$surv_yf_obs[df$surv_yf_obs >0] <- df$surv_yf_obs[df$surv_yf_obs >0]*100
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =  df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
# df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
df$surv_yf_obs[df$surv_yf_obs >0] <-
df$surv_yf_obs[df$surv_yf_obs >0]*10
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(rep1 <- obj$report())
df <- load_data_OM(nspace = 6, move = TRUE) ## data that works with OM
df$yRun =  df$tEnd-1 ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
# df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
df$surv_yf_obs[df$surv_yf_obs >0] <-
df$surv_yf_obs[df$surv_yf_obs >0]
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
df$parms$logq_f <- rep(log(1e-5),length(df$parms$logq_f))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
# "mort_k",
# "log_srv_slx_pars"),
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars"),
# "mort_k",
# "log_srv_slx_pars"),
fixFlt = c("all_fsh"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[3])
bounds
source(here("R","functions",'load_files_OM.R'))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[3])
bounds
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
system.time(opt <-
TMBhelper::fit_tmb(
obj,
# lower = bounds$lower,
# upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars"),
"mort_k",
# "log_srv_slx_pars"),
fixFlt = c("all_fsh"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
"mort_k",
# "log_srv_slx_pars"
),
fixFlt = c("all_fsh"))
mappy <-
buildMap(toFix =  c("omega_0ij",
"epsilon_tau",
"log_fsh_slx_pars",
"mort_k"
# "log_srv_slx_pars"
),
fixFlt = c("all_fsh"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll =dllUSE,
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
system.time(opt <-
TMBhelper::fit_tmb(
obj,
# lower = bounds$lower,
# upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
opt$time_for_MLE
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(dat=dat,obj = obj, opt = opt, rep=rep, cppname =cppname, mappy = mappy,
runname = paste0("-",df$yRun,"y_",cppname,"_M=",
paste(df$parms$mort_k,collapse="-"),
"_allest_nobounds"))
mappy
steep <- exp(opt$par[names(opt$par) == 'logh_k']); names(steep) <- paste0("h","_R",1:4);steep
logR_0 <- opt$par[names(opt$par) == 'logR_0k'];names(logR_0) <- paste0("logR_0","_R",1:4);logR_0
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(dat=dat,obj = obj, opt = opt, rep=rep, cppname =cppname, mappy = mappy,
runname = paste0("-",df$yRun,"y_",cppname,"_M=",
paste(df$parms$mort_k,collapse="-"),
"_baseQ=goaL_srvslxest_withbounds"))
opt$time_for_MLE
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2020-12-13-59y_v4L_0922VAST_srvslxest_nobounds/mappy.rdata")
mappy

ggplot(., aes(x = Year, y = (value), color = REG)) +
# ggplot(., aes(x = Year, y = assSSBMT, color = REG)) +
geom_line(aes(y = (value)),lwd = 1.1) +
# geom_errorbar(aes(ymin = assSSBMT-CV*assSSBMT,ymax= assSSBMT+CV*assSSBMT, color = REG,width=0)) +
geom_errorbar(aes(ymin = (value-CV*value),
ymax = (value+CV*value),
color = REG,width=0)) +
scale_color_manual(values = mgmtPal)+
geom_point()+
ggsidekick::theme_sleek() +
scale_x_continuous(limits = c(1960,1959+df$yRun)) +
labs(x = 'Modeled Year',y = ' SSB (units vary)', color = 'Mgmt Region') +
facet_wrap(~REG+variable,scales = 'free_y', ncol = 2)
# anim_save(paste0(dumpfile,"SSB_yk_animate.gif",animation = last_animation()))
## (SSB_ym) with compare ----
spmat <- data.frame(subarea = c('A4',"A3","B3","B2","C2","C1"),
stock = c("R4","R3","R3","R2","R2","R1"),
mgmt = c("AK","AK", rep("BC",2), rep("CC",2)))
assSB <- read.csv(here('input','downloads','AssessmentDat_thru2018.csv'),fileEncoding="UTF-8-BOM") %>%
mutate(REG = substr(Index,1,2), assSSBMT = Value) %>% filter(Type == 'SpawnBiomass')
names(SSB_yi) <- spmat$subarea
SSB_yi <- data.frame(dat$SSB_yi)
SSB_ym0 <-  SSB_yi %>%
mutate('Yr' = years[1:nrow(.)]) %>%
reshape2::melt(id = c('Yr')) %>%
merge(., spmat, by.x = "variable", by.y = "subarea") %>%
group_by(Yr, mgmt) %>%
summarise(totSSBkg = sum(value),
totSSBmt = totSSBkg) %>% select(Yr, mgmt, totSSBmt)
levels(SSB_ym0$mgmt) <- c('AK','BC','CC','WC', 'AI')
SSB_ym0$mgmt[SSB_ym0$mgmt == 'AI'] <- 'AK'
SSB_ym0$mgmt[SSB_ym0$mgmt == 'CC'] <- 'WC'
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-15 07_56_55-60y_v4_tildeR_yON_estWC_FIX_srvblksON/dat.rdata")
attach(dat)
assSB <- read.csv(here('input','downloads','AssessmentDat_thru2018.csv'),fileEncoding="UTF-8-BOM") %>%
mutate(REG = substr(Index,1,2), assSSBMT = Value) %>% filter(Type == 'SpawnBiomass')
SSB_yi <- data.frame(dat$SSB_yi)
names(SSB_yi) <- spmat$subarea
SSB_ym0 <-  SSB_yi %>%
mutate('Yr' = years[1:nrow(.)]) %>%
reshape2::melt(id = c('Yr')) %>%
merge(., spmat, by.x = "variable", by.y = "subarea") %>%
group_by(Yr, mgmt) %>%
summarise(totSSBkg = sum(value),
totSSBmt = totSSBkg) %>% select(Yr, mgmt, totSSBmt)
levels(SSB_ym0$mgmt) <- c('AK','BC','CC','WC', 'AI')
SSB_ym0$mgmt[SSB_ym0$mgmt == 'AI'] <- 'AK'
SSB_yi
SSB_ym0 <-  SSB_yi %>%
mutate('Yr' = years[1:nrow(.)]) %>%
reshape2::melt(id = c('Yr')) %>%
merge(., spmat, by.x = "variable", by.y = "subarea") %>%
group_by(Yr, mgmt) %>%
summarise(totSSBkg = sum(value),
totSSBmt = totSSBkg) %>% select(Yr, mgmt, totSSBmt)
years <- 1960:2019
nyear <- length(years)
tEnd <- length(years)
age <- 0:70
nage <- length(age)
SSB_ym0 <-  SSB_yi %>%
mutate('Yr' = years[1:nrow(.)]) %>%
reshape2::melt(id = c('Yr')) %>%
merge(., spmat, by.x = "variable", by.y = "subarea") %>%
group_by(Yr, mgmt) %>%
summarise(totSSBkg = sum(value),
totSSBmt = totSSBkg) %>% select(Yr, mgmt, totSSBmt)
SSB_ym0$mgmt[SSB_ym0$mgmt == 'AI'] <- 'AK'
levels(SSB_ym0$mgmt) <- c('AK','BC','CC','WC', 'AI')
SSB_ym0$mgmt[SSB_ym0$mgmt == 'CC'] <- 'WC'
SSB_ym <- SSB_ym0 %>% group_by(Yr, mgmt) %>%
summarise(omSSBMT = sum(totSSBmt))
merge(assSB, SSB_ym, by.x = c('Year','REG'), by.y = c('Yr','mgmt')) %>%
mutate('Last Assessment' = assSSBMT, 'Operating Model' =omSSBMT) %>%
select(Year, REG, CV, 'Last Assessment', 'Operating Model') %>%
# filter(Year >1965 ) %>%
melt(id = c('Year','REG', 'CV')) %>%
ggplot(., aes(x = Year, y = (value), color = REG)) +
# ggplot(., aes(x = Year, y = assSSBMT, color = REG)) +
geom_line(aes(y = (value)),lwd = 1.1) +
# geom_errorbar(aes(ymin = assSSBMT-CV*assSSBMT,ymax= assSSBMT+CV*assSSBMT, color = REG,width=0)) +
geom_errorbar(aes(ymin = (value-CV*value),
ymax = (value+CV*value),
color = REG,width=0)) +
scale_color_manual(values = mgmtPal)+
geom_point()+
ggsidekick::theme_sleek() +
scale_x_continuous(limits = c(1960,1959+df$yRun)) +
labs(x = 'Modeled Year',y = ' SSB (units vary)', color = 'Mgmt Region') +
facet_wrap(~REG+variable,scales = 'free_y', ncol = 2)
merge(assSB, SSB_ym, by.x = c('Year','REG'), by.y = c('Yr','mgmt')) %>%
mutate('Last Assessment' = assSSBMT, 'Operating Model' =omSSBMT) %>%
select(Year, REG, CV, 'Last Assessment', 'Operating Model') %>%
# filter(Year >1965 ) %>%
melt(id = c('Year','REG', 'CV'))
SSB_ym
assSB <- read.csv(here('input','downloads','AssessmentDat_thru2018.csv'),fileEncoding="UTF-8-BOM") %>%
mutate(REG = substr(Index,1,2), assSSBMT = Value) %>% filter(Type == 'SpawnBiomass')
SSB_yi <- data.frame(dat$SSB_yi)
names(SSB_yi) <- spmat$subarea
SSB_ym0 <-  SSB_yi %>%
mutate('Yr' = years[1:nrow(.)]) %>%
reshape2::melt(id = c('Yr')) %>%
merge(., spmat, by.x = "variable", by.y = "subarea") %>%
group_by(Yr, mgmt) %>%
summarise(totSSBkg = sum(value),
totSSBmt = totSSBkg) %>% select(Yr, mgmt, totSSBmt)
levels(SSB_ym0$mgmt) <- c('AK','BC','CC','WC', 'AI')
SSB_ym0$mgmt[SSB_ym0$mgmt == 'AI'] <- 'AK'
SSB_ym0$mgmt[SSB_ym0$mgmt == 'CC'] <- 'WC'
SSB_ym <- SSB_ym0 %>% group_by(Yr, mgmt) %>%
summarise(omSSBMT = sum(totSSBmt))
assSB
merge(assSB, SSB_ym, by.x = c('Year','REG'), by.y = c('Yr','mgmt')) %>%
mutate('Last Assessment' = assSSBMT, 'Operating Model' =omSSBMT) %>%
select(Year, REG, CV, 'Last Assessment', 'Operating Model') %>%
# filter(Year >1965 ) %>%
melt(id = c('Year','REG', 'CV'))
merge(assSB, SSB_ym, by.x = c('Year','REG'), by.y = c('Yr','mgmt')) %>%
mutate('Last Assessment' = assSSBMT, 'Operating Model' =omSSBMT) %>%
select(Year, REG, CV, 'Last Assessment', 'Operating Model') %>%
# filter(Year >1965 ) %>%
melt(id = c('Year','REG', 'CV')) %>%
ggplot(., aes(x = Year, y = value, color = REG)) +
# ggplot(., aes(x = Year, y = assSSBMT, color = REG)) +
geom_line(aes(y = value),lwd = 1.1) +
# geom_errorbar(aes(ymin = assSSBMT-CV*assSSBMT,ymax= assSSBMT+CV*assSSBMT, color = REG,width=0)) +
geom_errorbar(aes(ymin = (value-CV*value),
ymax = (value+CV*value),
color = REG,width=0)) +
scale_color_manual(values = mgmtPal)+
geom_point()+
ggsidekick::theme_sleek() +
scale_x_continuous(limits = c(1960,1959+df$yRun)) +
labs(x = 'Modeled Year',y = ' SSB (units vary)', color = 'Mgmt Region') +
facet_wrap(~REG+variable,scales = 'free_y', ncol = 2)
merge(assSB, SSB_ym, by.x = c('Year','REG'), by.y = c('Yr','mgmt')) %>%
mutate('Last Assessment' = assSSBMT, 'Operating Model' =omSSBMT) %>%
select(Year, REG, CV, 'Last Assessment', 'Operating Model') %>%
# filter(Year >1965 ) %>%
melt(id = c('Year','REG', 'CV')) %>%
ggplot(., aes(x = Year, y = value, color = REG)) +
# ggplot(., aes(x = Year, y = assSSBMT, color = REG)) +
geom_line(aes(y = value),lwd = 1.1)
value-CV*value
merge(assSB, SSB_ym, by.x = c('Year','REG'), by.y = c('Yr','mgmt')) %>%
mutate('Last Assessment' = assSSBMT, 'Operating Model' =omSSBMT) %>%
select(Year, REG, CV, 'Last Assessment', 'Operating Model') %>%
# filter(Year >1965 ) %>%
melt(id = c('Year','REG', 'CV')) %>%
ggplot(., aes(x = Year, y = value, color = REG)) +
# ggplot(., aes(x = Year, y = assSSBMT, color = REG)) +
geom_line(aes(y = value),lwd = 1.1) +
# geom_errorbar(aes(ymin = assSSBMT-CV*assSSBMT,ymax= assSSBMT+CV*assSSBMT, color = REG,width=0)) +
geom_errorbar(aes(ymin = (value-CV*value),
ymax = (value+CV*value),
color = REG,width=0))
merge(assSB, SSB_ym, by.x = c('Year','REG'), by.y = c('Yr','mgmt')) %>%
mutate('Last Assessment' = assSSBMT, 'Operating Model' =omSSBMT) %>%
select(Year, REG, CV, 'Last Assessment', 'Operating Model') %>%
# filter(Year >1965 ) %>%
melt(id = c('Year','REG', 'CV')) %>%
ggplot(., aes(x = Year, y = value, color = REG)) +
# ggplot(., aes(x = Year, y = assSSBMT, color = REG)) +
geom_line(aes(y = value),lwd = 1.1) +
# geom_errorbar(aes(ymin = assSSBMT-CV*assSSBMT,ymax= assSSBMT+CV*assSSBMT, color = REG,width=0)) +
geom_errorbar(aes(ymin = (value-CV*value),
ymax = (value+CV*value),
color = REG,width=0)) +
scale_color_manual(values = mgmtPal) +
geom_point()+
ggsidekick::theme_sleek()
merge(assSB, SSB_ym, by.x = c('Year','REG'), by.y = c('Yr','mgmt')) %>%
mutate('Last Assessment' = assSSBMT, 'Operating Model' =omSSBMT) %>%
select(Year, REG, CV, 'Last Assessment', 'Operating Model') %>%
# filter(Year >1965 ) %>%
melt(id = c('Year','REG', 'CV')) %>%
ggplot(., aes(x = Year, y = value, color = REG)) +
# ggplot(., aes(x = Year, y = assSSBMT, color = REG)) +
geom_line(aes(y = value),lwd = 1.1) +
# geom_errorbar(aes(ymin = assSSBMT-CV*assSSBMT,ymax= assSSBMT+CV*assSSBMT, color = REG,width=0)) +
geom_errorbar(aes(ymin = (value-CV*value),
ymax = (value+CV*value),
color = REG,width=0)) +
scale_color_manual(values = mgmtPal) +
geom_point()+
ggsidekick::theme_sleek() +
scale_x_continuous(limits = c(1960,1959+df$yRun))
df$yRun
df$yRun = df$tEnd
merge(assSB, SSB_ym, by.x = c('Year','REG'), by.y = c('Yr','mgmt')) %>%
mutate('Last Assessment' = assSSBMT, 'Operating Model' =omSSBMT) %>%
select(Year, REG, CV, 'Last Assessment', 'Operating Model') %>%
# filter(Year >1965 ) %>%
melt(id = c('Year','REG', 'CV')) %>%
ggplot(., aes(x = Year, y = value, color = REG)) +
# ggplot(., aes(x = Year, y = assSSBMT, color = REG)) +
geom_line(aes(y = value),lwd = 1.1) +
# geom_errorbar(aes(ymin = assSSBMT-CV*assSSBMT,ymax= assSSBMT+CV*assSSBMT, color = REG,width=0)) +
geom_errorbar(aes(ymin = (value-CV*value),
ymax = (value+CV*value),
color = REG,width=0)) +
scale_color_manual(values = mgmtPal) +
geom_point()+
ggsidekick::theme_sleek() +
scale_x_continuous(limits = c(1960,1959+df$yRun)) +
labs(x = 'Modeled Year',y = ' SSB (units vary)', color = 'Mgmt Region') +
facet_wrap(~REG+variable,scales = 'free_y', ncol = 2)
## OM_Master.R
## M S Kapur
## Inspiration & code guidance from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c('shire_v4')[1]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6,
move = TRUE,
b_y_max = 0.109) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-  df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <- df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
"all_srv"))
mappy$logh_k <- factor(c(NA,NA,2,3)) ##  fix WC regs
mappy$b_y <- factor(c(1,rep(NA,59))) ## enable estimation of year 1 b_y ## consider mirroring for these guys
mappy
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred/df$surv_yf_obs
dat$catch_yf_pred_total/df$catch_yf_obs[,2:ncol(df$catch_yf_obs)]
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(justPlots = FALSE,
dat=dat,
obj = obj,
opt = opt,
rep=rep,
cppname =cppname,
mappy = mappy,
runname = paste0("-",df$yRun,"y_",
cppname,
"_tildeR_yON",
"_allfltsfixed",
"_estB_y0"))
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
"all_srv"))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred/df$surv_yf_obs
dat$catch_yf_pred_total/df$catch_yf_obs[,2:ncol(df$catch_yf_obs)]
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(justPlots = FALSE,
dat=dat,
obj = obj,
opt = opt,
rep=rep,
cppname =cppname,
mappy = mappy,
runname = paste0("-",df$yRun,"y_",
cppname,
"_tildeR_yON",
"_allfltsfixed",
"_B_y0_off"))
c(df$fltnames_surv,df$fltnames_acomp)
df$fltnames_acomp
df$fltnames_surv
## OM_Master.R
## M S Kapur
## Inspiration & code guidance from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
rm(list = ls())
## Inspiration & code guidance from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c('shire_v4')[1]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6,
move = TRUE,
b_y_max = 0.109) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-  df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <- df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( "AK_VAST_W", "BC_EARLY" , "AK_GOA_SURV","BC_StRS","BC_SS" )))
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( "AK_VAST_W", "BC_EARLY" , "AK_GOA_SURV","BC_StRS","BC_SS" )))
mappy
array(mappy$log_fsh_slx_pars, dim = c(df$nfleets_fish,2,max(df$fsh_blks_size),2),
dimnames = dimnames(df$parms$log_fsh_slx_pars))
array(mappy$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
u
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
dat <- obj$report(par = best)
dat$surv_yf_pred/df$surv_yf_obs
## save everything and plot
cppname = substr(dllUSE,7,nchar(dllUSE))
writeOM(justPlots = FALSE,
dat=dat,
obj = obj,
opt = opt,
rep=rep,
cppname =cppname,
mappy = mappy,
runname = paste0("-",df$yRun,"y_",
cppname,
"_tildeR_yON",
"_somesrvfixed",
"_B_y0_off"))
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-15 07_56_55-60y_v4_tildeR_yON_estWC_FIX_srvblksON/opt.rdata")
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-15 07_56_55-60y_v4_tildeR_yON_estWC_FIX_srvblksON/obj.rdata")
# for (k in 1:2)  opt <- nlminb(obj$env$last.par.best, obj$fn, obj$gr)
best <- obj$env$last.par.best ## update object with the best parameters
array(exp(best[names(best)== "log_srv_slx_pars"]), dim = c(5,2,1,2))
array(exp(best[names(best)== "log_srv_slx_pars"]), dim = c(5,2,3,2))
length(exp(best[names(best)== "log_srv_slx_pars"])
)
load("C:/Users/mkapur/Dropbox/UW/sab-mse/output/2021-01-15 07_56_55-60y_v4_tildeR_yON_estWC_FIX_srvblksON/mappy.rdata")
map_srvslx <- array(as.numeric(mappy$log_srv_slx_pars),
dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
## replace non-fixed values with starting pars
map_srvslx[!is.na(map_srvslx)] <-  array(as.numeric(exp(best[grep('log_srv_slx_pars',names(best))])))
map_srvslx
## OM_Master.R
## M S Kapur
## Inspiration & code guidance from J Sullivan, N Jacobsen Summer 2020
## kapurm@uw.edu
rm(list = ls())
library(TMB)
library(dplyr)
library(reshape2)
library(ggplot2)
library(r4ss)
library(here)
library(ggsidekick)
dllUSE = c('shire_v4')[1]
# compile(here("TMB",paste0(dllUSE,".cpp")))
dyn.load(dynlib(here("TMB",dllUSE)))
df <- load_data_OM(nspace = 6,
move = TRUE,
b_y_max = 0.109) ## data that works with OM
source(here("R","functions",'load_files_OM.R'))
df <- load_data_OM(nspace = 6,
move = TRUE,
b_y_max = 0.109) ## data that works with OM
df$surv_yf_obs[df$surv_yf_obs >0] <-  df$surv_yf_obs[df$surv_yf_obs >0]*1000
df$yRun <- df$tEnd ## number of years to run model
df$parms$mort_k <- c(0.2,0.2,0.2,0.2)
df$Neqn <- buildNeqn(df)
mappy <-
buildMap(toFix =  c("omega_0ij",
"logh_k",
"logSDR",
# "tildeR_yk",
"b_y",
"epsilon_tau",
"logpi_acomp",
"log_fsh_slx_pars",
"log_srv_slx_pars",
"mort_k"),
fixFlt = c("all_fsh",
c( "AK_VAST_W", "BC_EARLY" , "AK_GOA_SURV","BC_StRS","BC_SS" )))
array(mappy$log_srv_slx_pars, dim = c(df$nfleets_surv+df$nfleets_acomp-4,2,max(df$srv_blks_size),2),
dimnames = dimnames(df$parms$log_srv_slx_pars))
system.time(obj <- MakeADFun(df,
parameters = df$parms,
dll = dllUSE,
# random = "tildeR_y",
map = mappy, ## fix everything for testing eigen fails
checkParameterOrder = TRUE))
bounds <- boundPars(obj,
r0_lower = 0,
boundSlx = c(NA,'fsh','srv')[2:3])
system.time(opt <-
TMBhelper::fit_tmb(
obj,
lower = bounds$lower,
upper = bounds$upper,
dll = dllUSE,
getHessian = FALSE,
control = list(eval.max = 1e6,
iter.max = 1e6,
rel.tol = 1e-4)
)$opt) ## estimate; can repeat for stability)
